[
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Protection",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "importPath": "battery",
        "description": "battery",
        "isExtraImport": true,
        "detail": "battery",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "MIN_CELL_VOLTAGE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "open_serial_port",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "AUTO_RESET_SOC",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BATTERY_CAPACITY",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "INVERT_CURRENT_MEASUREMENT",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "MIN_CELL_VOLTAGE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BATTERY_CAPACITY",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "INVERT_CURRENT_MEASUREMENT",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "AUTO_RESET_SOC",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "MAX_BATTERY_CHARGE_CURRENT",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "MAX_BATTERY_DISCHARGE_CURRENT",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "MIN_CELL_VOLTAGE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "open_serial_port",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "GREENMETER_ADDRESS",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "LIPRO_CELL_COUNT",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "LIPRO_END_ADDRESS",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "LIPRO_START_ADDRESS",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "is_bit_set",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "ZERO_CHAR",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "AUTO_RESET_SOC",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "USE_PORT_AS_UNIQUE_ID",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "is_bit_set",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "kelvin_to_celsius",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "ZERO_CHAR",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "SOC_LOW_ALARM",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "SOC_LOW_WARNING",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "USE_BMS_DVCC_VALUES",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "kelvin_to_celsius",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BMS_TYPE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "DRIVER_VERSION",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EXCLUDED_DEVICES",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_SENSOR_DBUS_DEVICE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_SENSOR_DBUS_PATH_CURRENT",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_SENSOR_DBUS_PATH_SOC",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BATTERY_ADDRESSES",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "POLL_INTERVAL",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "validate_config_values",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "publish_config_variables",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BMS_TYPE",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "BATTERY_ADDRESSES",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack_into",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack_into",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "calcsize",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "unpack_from",
        "importPath": "struct",
        "description": "struct",
        "isExtraImport": true,
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_clock_info",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "findall",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "can",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "can",
        "description": "can",
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusState",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CyclicSendTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusState",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CyclicSendTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "LimitedDurationCyclicSendTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "RestartableCyclicTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CyclicSendTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "LimitedDurationCyclicSendTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "RestartableCyclicTaskABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanTimeoutError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusState",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanTimeoutError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "typechecking",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusState",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "typechecking",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "typechecking",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "LogReader",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "SizedRotatingLogger",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Bus",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "BusState",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "SizedRotatingLogger",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "LogReader",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "MessageSync",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "can",
        "description": "can",
        "isExtraImport": true,
        "detail": "can",
        "documentation": {}
    },
    {
        "label": "ext.minimalmodbus",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ext.minimalmodbus",
        "description": "ext.minimalmodbus",
        "detail": "ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "serial",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial",
        "description": "serial",
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "no_type_check",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "_exit",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "statvfs",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "comports",
        "importPath": "serial.tools.list_ports",
        "description": "serial.tools.list_ports",
        "isExtraImport": true,
        "detail": "serial.tools.list_ports",
        "documentation": {}
    },
    {
        "label": "hexlify_codec",
        "importPath": "serial.tools",
        "description": "serial.tools",
        "isExtraImport": true,
        "detail": "serial.tools",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "semantic_version",
        "description": "semantic_version",
        "isExtraImport": true,
        "detail": "semantic_version",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Jkbms_Brn",
        "importPath": "bms.jkbms_brn",
        "description": "bms.jkbms_brn",
        "isExtraImport": true,
        "detail": "bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "BleakScanner",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "BleakClient",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "BleakClient",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "BleakClient",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "BleakScanner",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "BLEDevice",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "BleakClient",
        "importPath": "bleak",
        "description": "bleak",
        "isExtraImport": true,
        "detail": "bleak",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "CancelledError",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "Syncron_Ble",
        "importPath": "utils_ble",
        "description": "utils_ble",
        "isExtraImport": true,
        "detail": "utils_ble",
        "documentation": {}
    },
    {
        "label": "bleak.exc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bleak.exc",
        "description": "bleak.exc",
        "detail": "bleak.exc",
        "documentation": {}
    },
    {
        "label": "BleakDBusError",
        "importPath": "bleak.exc",
        "description": "bleak.exc",
        "isExtraImport": true,
        "detail": "bleak.exc",
        "documentation": {}
    },
    {
        "label": "LltJbdProtection",
        "importPath": "bms.lltjbd",
        "description": "bms.lltjbd",
        "isExtraImport": true,
        "detail": "bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "LltJbd",
        "importPath": "bms.lltjbd",
        "description": "bms.lltjbd",
        "isExtraImport": true,
        "detail": "bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "LltJbd",
        "importPath": "bms.lltjbd",
        "description": "bms.lltjbd",
        "isExtraImport": true,
        "detail": "bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "LltJbd",
        "importPath": "bms.lltjbd",
        "description": "bms.lltjbd",
        "isExtraImport": true,
        "detail": "bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "data_cycle",
        "importPath": "bms.mnb_utils_max17853",
        "description": "bms.mnb_utils_max17853",
        "isExtraImport": true,
        "detail": "bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "init_max",
        "importPath": "bms.mnb_utils_max17853",
        "description": "bms.mnb_utils_max17853",
        "isExtraImport": true,
        "detail": "bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "spidev",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spidev",
        "description": "spidev",
        "detail": "spidev",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "isinf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "isnan",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "LED",
        "importPath": "gpiozero",
        "description": "gpiozero",
        "isExtraImport": true,
        "detail": "gpiozero",
        "documentation": {}
    },
    {
        "label": "LED",
        "importPath": "gpiozero",
        "description": "gpiozero",
        "isExtraImport": true,
        "detail": "gpiozero",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "xor",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "inv",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "abs",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "floordiv",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "lshift",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "rshift",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "mod",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "mul",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "neg",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "pos",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "pow",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "truediv",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "div",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "xor",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "inv",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "abs",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "floordiv",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "lshift",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "rshift",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "mod",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "mul",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "neg",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "pos",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "pow",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "truediv",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getargspec",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getfullargspec",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "isclass",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "aenum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aenum",
        "description": "aenum",
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "EnumType",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "EnumMeta",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "LowerStrEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "UpperStrEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "ReprEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "AutoNumberEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "MultiValueEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "OrderedEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "UniqueEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "AddValueEnum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "Flag",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "TupleSize",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "NamedConstant",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "constant",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "NoAlias",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "AddValue",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "Unique",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "STRICT",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "CONFORM",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "EJECT",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "KEEP",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "_reduce_ex_by_name",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "skip",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "extend_enum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "enum",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "MultiValue",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "member",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "nonmember",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "no_arg",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "basestring",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "baseinteger",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "unicode",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "enum_property",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "pyver",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY2",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY2_6",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3_3",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3_4",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3_5",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3_6",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3_7",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "PY3_11",
        "importPath": "aenum",
        "description": "aenum",
        "isExtraImport": true,
        "detail": "aenum",
        "documentation": {}
    },
    {
        "label": "doctest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest",
        "description": "doctest",
        "detail": "doctest",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "_high_bit",
        "importPath": "aenum._enum",
        "description": "aenum._enum",
        "isExtraImport": true,
        "detail": "aenum._enum",
        "documentation": {}
    },
    {
        "label": "dumps",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "PicklingError",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "HIGHEST_PROTOCOL",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "dumps",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "PicklingError",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "HIGHEST_PROTOCOL",
        "importPath": "pickle",
        "description": "pickle",
        "isExtraImport": true,
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "PropertyAccess",
        "importPath": "dbus_fast.service",
        "description": "dbus_fast.service",
        "isExtraImport": true,
        "detail": "dbus_fast.service",
        "documentation": {}
    },
    {
        "label": "ServiceInterface",
        "importPath": "dbus_fast.service",
        "description": "dbus_fast.service",
        "isExtraImport": true,
        "detail": "dbus_fast.service",
        "documentation": {}
    },
    {
        "label": "dbus_property",
        "importPath": "dbus_fast.service",
        "description": "dbus_fast.service",
        "isExtraImport": true,
        "detail": "dbus_fast.service",
        "documentation": {}
    },
    {
        "label": "method",
        "importPath": "dbus_fast.service",
        "description": "dbus_fast.service",
        "isExtraImport": true,
        "detail": "dbus_fast.service",
        "documentation": {}
    },
    {
        "label": "MessageBus",
        "importPath": "dbus_fast.aio",
        "description": "dbus_fast.aio",
        "isExtraImport": true,
        "detail": "dbus_fast.aio",
        "documentation": {}
    },
    {
        "label": "BusType",
        "importPath": "dbus_fast.constants",
        "description": "dbus_fast.constants",
        "isExtraImport": true,
        "detail": "dbus_fast.constants",
        "documentation": {}
    },
    {
        "label": "ErrorType",
        "importPath": "dbus_fast.constants",
        "description": "dbus_fast.constants",
        "isExtraImport": true,
        "detail": "dbus_fast.constants",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "dbus_fast.constants",
        "description": "dbus_fast.constants",
        "isExtraImport": true,
        "detail": "dbus_fast.constants",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "dbus_fast.constants",
        "description": "dbus_fast.constants",
        "isExtraImport": true,
        "detail": "dbus_fast.constants",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "dbus_fast.message",
        "description": "dbus_fast.message",
        "isExtraImport": true,
        "detail": "dbus_fast.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "dbus_fast.message",
        "description": "dbus_fast.message",
        "isExtraImport": true,
        "detail": "dbus_fast.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "dbus_fast.message",
        "description": "dbus_fast.message",
        "isExtraImport": true,
        "detail": "dbus_fast.message",
        "documentation": {}
    },
    {
        "label": "Variant",
        "importPath": "dbus_fast.signature",
        "description": "dbus_fast.signature",
        "isExtraImport": true,
        "detail": "dbus_fast.signature",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "nullcontext",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "WeakKeyDictionary",
        "importPath": "weakref",
        "description": "weakref",
        "isExtraImport": true,
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "BusType",
        "importPath": "dbus_fast",
        "description": "dbus_fast",
        "isExtraImport": true,
        "detail": "dbus_fast",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "dbus_fast",
        "description": "dbus_fast",
        "isExtraImport": true,
        "detail": "dbus_fast",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "dbus_fast",
        "description": "dbus_fast",
        "isExtraImport": true,
        "detail": "dbus_fast",
        "documentation": {}
    },
    {
        "label": "Variant",
        "importPath": "dbus_fast",
        "description": "dbus_fast",
        "isExtraImport": true,
        "detail": "dbus_fast",
        "documentation": {}
    },
    {
        "label": "unpack_variants",
        "importPath": "dbus_fast",
        "description": "dbus_fast",
        "isExtraImport": true,
        "detail": "dbus_fast",
        "documentation": {}
    },
    {
        "label": "Variant",
        "importPath": "dbus_fast",
        "description": "dbus_fast",
        "isExtraImport": true,
        "detail": "dbus_fast",
        "documentation": {}
    },
    {
        "label": "MessageBus",
        "importPath": "dbus_fast.aio.message_bus",
        "description": "dbus_fast.aio.message_bus",
        "isExtraImport": true,
        "detail": "dbus_fast.aio.message_bus",
        "documentation": {}
    },
    {
        "label": "MessageBus",
        "importPath": "dbus_fast.aio.message_bus",
        "description": "dbus_fast.aio.message_bus",
        "isExtraImport": true,
        "detail": "dbus_fast.aio.message_bus",
        "documentation": {}
    },
    {
        "label": "InvalidObjectPathError",
        "importPath": "dbus_fast.errors",
        "description": "dbus_fast.errors",
        "isExtraImport": true,
        "detail": "dbus_fast.errors",
        "documentation": {}
    },
    {
        "label": "assert_interface_name_valid",
        "importPath": "dbus_fast.validators",
        "description": "dbus_fast.validators",
        "isExtraImport": true,
        "detail": "dbus_fast.validators",
        "documentation": {}
    },
    {
        "label": "assert_member_name_valid",
        "importPath": "dbus_fast.validators",
        "description": "dbus_fast.validators",
        "isExtraImport": true,
        "detail": "dbus_fast.validators",
        "documentation": {}
    },
    {
        "label": "assert_object_path_valid",
        "importPath": "dbus_fast.validators",
        "description": "dbus_fast.validators",
        "isExtraImport": true,
        "detail": "dbus_fast.validators",
        "documentation": {}
    },
    {
        "label": "AuthExternal",
        "importPath": "dbus_fast.auth",
        "description": "dbus_fast.auth",
        "isExtraImport": true,
        "detail": "dbus_fast.auth",
        "documentation": {}
    },
    {
        "label": "objc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "objc",
        "description": "objc",
        "detail": "objc",
        "documentation": {}
    },
    {
        "label": "CBUUID",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBCentralManager",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBManagerStatePoweredOff",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBManagerStatePoweredOn",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBManagerStateResetting",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBManagerStateUnauthorized",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBManagerStateUnknown",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBManagerStateUnsupported",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBPeripheral",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBCharacteristic",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBCharacteristicWriteWithResponse",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBDescriptor",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBPeripheral",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBService",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBCharacteristic",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBUUID",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBCharacteristicWriteWithoutResponse",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBCharacteristicWriteWithResponse",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBPeripheral",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBPeripheralStateConnected",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBDescriptor",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBPeripheral",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBService",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "CBUUID",
        "importPath": "CoreBluetooth",
        "description": "CoreBluetooth",
        "isExtraImport": true,
        "detail": "CoreBluetooth",
        "documentation": {}
    },
    {
        "label": "NSUUID",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSArray",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSDictionary",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSError",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSKeyValueChangeNewKey",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSKeyValueObservingOptionNew",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSNumber",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSObject",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSString",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSUUID",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSArray",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSData",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSError",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSNumber",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSObject",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSString",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSArray",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSData",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSBundle",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "NSData",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "DISPATCH_QUEUE_SERIAL",
        "importPath": "libdispatch",
        "description": "libdispatch",
        "isExtraImport": true,
        "detail": "libdispatch",
        "documentation": {}
    },
    {
        "label": "dispatch_queue_create",
        "importPath": "libdispatch",
        "description": "libdispatch",
        "isExtraImport": true,
        "detail": "libdispatch",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "BroadcastReceiver",
        "importPath": "android.broadcast",
        "description": "android.broadcast",
        "isExtraImport": true,
        "detail": "android.broadcast",
        "documentation": {}
    },
    {
        "label": "BroadcastReceiver",
        "importPath": "android.broadcast",
        "description": "android.broadcast",
        "isExtraImport": true,
        "detail": "android.broadcast",
        "documentation": {}
    },
    {
        "label": "java_method",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "autoclass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "java_method",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "PythonJavaClass",
        "importPath": "jnius",
        "description": "jnius",
        "isExtraImport": true,
        "detail": "jnius",
        "documentation": {}
    },
    {
        "label": "normalize_uuid_16",
        "importPath": "bleak.uuids",
        "description": "bleak.uuids",
        "isExtraImport": true,
        "detail": "bleak.uuids",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "android.permissions",
        "description": "android.permissions",
        "isExtraImport": true,
        "detail": "android.permissions",
        "documentation": {}
    },
    {
        "label": "request_permissions",
        "importPath": "android.permissions",
        "description": "android.permissions",
        "isExtraImport": true,
        "detail": "android.permissions",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "WinError",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "wintypes",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "CFUNCTYPE",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "POINTER",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "Structure",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "byref",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ubyte",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_uint",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ushort",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "sizeof",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ubyte",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ulong",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ushort",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "POINTER",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "Structure",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "sizeof",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_long",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ubyte",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ulong",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ushort",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_void_p",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "byref",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_wchar_p",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "byref",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_ubyte",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "can.interfaces.ixxat.canlib_vcinpl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "can.interfaces.ixxat.canlib_vcinpl",
        "description": "can.interfaces.ixxat.canlib_vcinpl",
        "detail": "can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "can.interfaces.ixxat.canlib_vcinpl2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "can.interfaces.ixxat.canlib_vcinpl2",
        "description": "can.interfaces.ixxat.canlib_vcinpl2",
        "detail": "can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "can.typechecking",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanFilters",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanFilters",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "ReadableBytesLike",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanFilters",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanFilters",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "TAdditionalCliArgs",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "TAdditionalCliArgs",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "TDataStructs",
        "importPath": "can.typechecking",
        "description": "can.typechecking",
        "isExtraImport": true,
        "detail": "can.typechecking",
        "documentation": {}
    },
    {
        "label": "HANDLE",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "PHANDLE",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "CLibrary",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "HRESULT",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "HANDLE",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "PHANDLE",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "CLibrary",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "HRESULT",
        "importPath": "can.ctypesutil",
        "description": "can.ctypesutil",
        "isExtraImport": true,
        "detail": "can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanTimeoutError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "error_check",
        "importPath": "can.exceptions",
        "description": "can.exceptions",
        "isExtraImport": true,
        "detail": "can.exceptions",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "dlc2len",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "len2dlc",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "time_perfcounter_correlation",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "dlc2len",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "len2dlc",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "dlc2len",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "len2dlc",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "time_perfcounter_correlation",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "_dict2timing",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "cast_from_string",
        "importPath": "can.util",
        "description": "can.util",
        "isExtraImport": true,
        "detail": "can.util",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "SimpleQueue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "SimpleQueue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "ctypes.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes.util",
        "description": "ctypes.util",
        "detail": "ctypes.util",
        "documentation": {}
    },
    {
        "label": "find_library",
        "importPath": "ctypes.util",
        "description": "ctypes.util",
        "isExtraImport": true,
        "detail": "ctypes.util",
        "documentation": {}
    },
    {
        "label": "find_library",
        "importPath": "ctypes.util",
        "description": "ctypes.util",
        "isExtraImport": true,
        "detail": "ctypes.util",
        "documentation": {}
    },
    {
        "label": "version",
        "importPath": "packaging",
        "description": "packaging",
        "isExtraImport": true,
        "detail": "packaging",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BufferedIOBase",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select",
        "description": "select",
        "detail": "select",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "LimitedDurationCyclicSendTaskABC",
        "importPath": "can.broadcastmanager",
        "description": "can.broadcastmanager",
        "isExtraImport": true,
        "detail": "can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "ModifiableCyclicTaskABC",
        "importPath": "can.broadcastmanager",
        "description": "can.broadcastmanager",
        "isExtraImport": true,
        "detail": "can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "RestartableCyclicTaskABC",
        "importPath": "can.broadcastmanager",
        "description": "can.broadcastmanager",
        "isExtraImport": true,
        "detail": "can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "CyclicSendTaskABC",
        "importPath": "can.broadcastmanager",
        "description": "can.broadcastmanager",
        "isExtraImport": true,
        "detail": "can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "ThreadBasedCyclicSendTask",
        "importPath": "can.broadcastmanager",
        "description": "can.broadcastmanager",
        "isExtraImport": true,
        "detail": "can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "can.interfaces.socketcan",
        "description": "can.interfaces.socketcan",
        "isExtraImport": true,
        "detail": "can.interfaces.socketcan",
        "documentation": {}
    },
    {
        "label": "find_available_interfaces",
        "importPath": "can.interfaces.socketcan.utils",
        "description": "can.interfaces.socketcan.utils",
        "isExtraImport": true,
        "detail": "can.interfaces.socketcan.utils",
        "documentation": {}
    },
    {
        "label": "pack_filters",
        "importPath": "can.interfaces.socketcan.utils",
        "description": "can.interfaces.socketcan.utils",
        "isExtraImport": true,
        "detail": "can.interfaces.socketcan.utils",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "check_output",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CalledProcessError",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CAN_EFF_FLAG",
        "importPath": "can.interfaces.socketcan.constants",
        "description": "can.interfaces.socketcan.constants",
        "isExtraImport": true,
        "detail": "can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "TracebackType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "TracebackType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "TracebackType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "canalystii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "canalystii",
        "description": "canalystii",
        "detail": "canalystii",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "usb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "usb",
        "description": "usb",
        "detail": "usb",
        "documentation": {}
    },
    {
        "label": "CAN_EFF_FLAG",
        "importPath": "gs_usb.constants",
        "description": "gs_usb.constants",
        "isExtraImport": true,
        "detail": "gs_usb.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERR_FLAG",
        "importPath": "gs_usb.constants",
        "description": "gs_usb.constants",
        "isExtraImport": true,
        "detail": "gs_usb.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MAX_DLC",
        "importPath": "gs_usb.constants",
        "description": "gs_usb.constants",
        "isExtraImport": true,
        "detail": "gs_usb.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RTR_FLAG",
        "importPath": "gs_usb.constants",
        "description": "gs_usb.constants",
        "isExtraImport": true,
        "detail": "gs_usb.constants",
        "documentation": {}
    },
    {
        "label": "GsUsb",
        "importPath": "gs_usb.gs_usb",
        "description": "gs_usb.gs_usb",
        "isExtraImport": true,
        "detail": "gs_usb.gs_usb",
        "documentation": {}
    },
    {
        "label": "GS_USB_NONE_ECHO_ID",
        "importPath": "gs_usb.gs_usb_frame",
        "description": "gs_usb.gs_usb_frame",
        "isExtraImport": true,
        "detail": "gs_usb.gs_usb_frame",
        "documentation": {}
    },
    {
        "label": "GsUsbFrame",
        "importPath": "gs_usb.gs_usb_frame",
        "description": "gs_usb.gs_usb_frame",
        "isExtraImport": true,
        "detail": "gs_usb.gs_usb_frame",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can.bus",
        "description": "can.bus",
        "isExtraImport": true,
        "detail": "can.bus",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "importPath": "can.bus",
        "description": "can.bus",
        "isExtraImport": true,
        "detail": "can.bus",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can.bus",
        "description": "can.bus",
        "isExtraImport": true,
        "detail": "can.bus",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "importPath": "can.bus",
        "description": "can.bus",
        "isExtraImport": true,
        "detail": "can.bus",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "can.message",
        "description": "can.message",
        "isExtraImport": true,
        "detail": "can.message",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "b64decode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "BufferedReader",
        "importPath": "can.listener",
        "description": "can.listener",
        "isExtraImport": true,
        "detail": "can.listener",
        "documentation": {}
    },
    {
        "label": "Listener",
        "importPath": "can.listener",
        "description": "can.listener",
        "isExtraImport": true,
        "detail": "can.listener",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "entry_points",
        "importPath": "importlib.metadata",
        "description": "importlib.metadata",
        "isExtraImport": true,
        "detail": "importlib.metadata",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "_append_filter_argument",
        "importPath": "can.logger",
        "description": "can.logger",
        "isExtraImport": true,
        "detail": "can.logger",
        "documentation": {}
    },
    {
        "label": "_create_base_argument_parser",
        "importPath": "can.logger",
        "description": "can.logger",
        "isExtraImport": true,
        "detail": "can.logger",
        "documentation": {}
    },
    {
        "label": "_create_bus",
        "importPath": "can.logger",
        "description": "can.logger",
        "isExtraImport": true,
        "detail": "can.logger",
        "documentation": {}
    },
    {
        "label": "_parse_additional_config",
        "importPath": "can.logger",
        "description": "can.logger",
        "isExtraImport": true,
        "detail": "can.logger",
        "documentation": {}
    },
    {
        "label": "dbus",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dbus",
        "description": "dbus",
        "detail": "dbus",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "DBusGMainLoop",
        "importPath": "dbus.mainloop.glib",
        "description": "dbus.mainloop.glib",
        "isExtraImport": true,
        "detail": "dbus.mainloop.glib",
        "documentation": {}
    },
    {
        "label": "VeDbusItemExport",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemImport",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusService",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemExport",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusService",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemImport",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusService",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemImport",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusService",
        "importPath": "vedbus",
        "description": "vedbus",
        "isExtraImport": true,
        "detail": "vedbus",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GObject",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "dbus.service",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dbus.service",
        "description": "dbus.service",
        "detail": "dbus.service",
        "documentation": {}
    },
    {
        "label": "fcntl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fcntl",
        "description": "fcntl",
        "detail": "fcntl",
        "documentation": {}
    },
    {
        "label": "ioctl",
        "importPath": "fcntl",
        "description": "fcntl",
        "isExtraImport": true,
        "detail": "fcntl",
        "documentation": {}
    },
    {
        "label": "SettingsDevice",
        "importPath": "settingsdevice",
        "description": "settingsdevice",
        "isExtraImport": true,
        "detail": "settingsdevice",
        "documentation": {}
    },
    {
        "label": "SettingsDevice",
        "importPath": "settingsdevice",
        "description": "settingsdevice",
        "isExtraImport": true,
        "detail": "settingsdevice",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "exit_on_error",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "wrap_dbus_value",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "unwrap_dbus_value",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "add_name_owner_changed_receiver",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "exit_on_error",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "wrap_dbus_value",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "unwrap_dbus_value",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "get_vrm_portal_id",
        "importPath": "ve_utils",
        "description": "ve_utils",
        "isExtraImport": true,
        "detail": "ve_utils",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "collections.abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections.abc",
        "description": "collections.abc",
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyword",
        "description": "keyword",
        "detail": "keyword",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "DbusHelper",
        "importPath": "dbushelper",
        "description": "dbushelper",
        "isExtraImport": true,
        "detail": "dbushelper",
        "documentation": {}
    },
    {
        "label": "Daly",
        "importPath": "bms.daly",
        "description": "bms.daly",
        "isExtraImport": true,
        "detail": "bms.daly",
        "documentation": {}
    },
    {
        "label": "Daly",
        "importPath": "bms.daly",
        "description": "bms.daly",
        "isExtraImport": true,
        "detail": "bms.daly",
        "documentation": {}
    },
    {
        "label": "Daren485",
        "importPath": "bms.daren_485",
        "description": "bms.daren_485",
        "isExtraImport": true,
        "detail": "bms.daren_485",
        "documentation": {}
    },
    {
        "label": "Daren485",
        "importPath": "bms.daren_485",
        "description": "bms.daren_485",
        "isExtraImport": true,
        "detail": "bms.daren_485",
        "documentation": {}
    },
    {
        "label": "Ecs",
        "importPath": "bms.ecs",
        "description": "bms.ecs",
        "isExtraImport": true,
        "detail": "bms.ecs",
        "documentation": {}
    },
    {
        "label": "Ecs",
        "importPath": "bms.ecs",
        "description": "bms.ecs",
        "isExtraImport": true,
        "detail": "bms.ecs",
        "documentation": {}
    },
    {
        "label": "EG4_Lifepower",
        "importPath": "bms.eg4_lifepower",
        "description": "bms.eg4_lifepower",
        "isExtraImport": true,
        "detail": "bms.eg4_lifepower",
        "documentation": {}
    },
    {
        "label": "EG4_Lifepower",
        "importPath": "bms.eg4_lifepower",
        "description": "bms.eg4_lifepower",
        "isExtraImport": true,
        "detail": "bms.eg4_lifepower",
        "documentation": {}
    },
    {
        "label": "EG4_LL",
        "importPath": "bms.eg4_ll",
        "description": "bms.eg4_ll",
        "isExtraImport": true,
        "detail": "bms.eg4_ll",
        "documentation": {}
    },
    {
        "label": "EG4_LL",
        "importPath": "bms.eg4_ll",
        "description": "bms.eg4_ll",
        "isExtraImport": true,
        "detail": "bms.eg4_ll",
        "documentation": {}
    },
    {
        "label": "Felicity",
        "importPath": "bms.felicity",
        "description": "bms.felicity",
        "isExtraImport": true,
        "detail": "bms.felicity",
        "documentation": {}
    },
    {
        "label": "Felicity",
        "importPath": "bms.felicity",
        "description": "bms.felicity",
        "isExtraImport": true,
        "detail": "bms.felicity",
        "documentation": {}
    },
    {
        "label": "HeltecModbus",
        "importPath": "bms.heltecmodbus",
        "description": "bms.heltecmodbus",
        "isExtraImport": true,
        "detail": "bms.heltecmodbus",
        "documentation": {}
    },
    {
        "label": "HeltecModbus",
        "importPath": "bms.heltecmodbus",
        "description": "bms.heltecmodbus",
        "isExtraImport": true,
        "detail": "bms.heltecmodbus",
        "documentation": {}
    },
    {
        "label": "HLPdataBMS4S",
        "importPath": "bms.hlpdatabms4s",
        "description": "bms.hlpdatabms4s",
        "isExtraImport": true,
        "detail": "bms.hlpdatabms4s",
        "documentation": {}
    },
    {
        "label": "HLPdataBMS4S",
        "importPath": "bms.hlpdatabms4s",
        "description": "bms.hlpdatabms4s",
        "isExtraImport": true,
        "detail": "bms.hlpdatabms4s",
        "documentation": {}
    },
    {
        "label": "iRock",
        "importPath": "bms.irock",
        "description": "bms.irock",
        "isExtraImport": true,
        "detail": "bms.irock",
        "documentation": {}
    },
    {
        "label": "Jkbms",
        "importPath": "bms.jkbms",
        "description": "bms.jkbms",
        "isExtraImport": true,
        "detail": "bms.jkbms",
        "documentation": {}
    },
    {
        "label": "Jkbms",
        "importPath": "bms.jkbms",
        "description": "bms.jkbms",
        "isExtraImport": true,
        "detail": "bms.jkbms",
        "documentation": {}
    },
    {
        "label": "Jkbms_pb",
        "importPath": "bms.jkbms_pb",
        "description": "bms.jkbms_pb",
        "isExtraImport": true,
        "detail": "bms.jkbms_pb",
        "documentation": {}
    },
    {
        "label": "Jkbms_pb",
        "importPath": "bms.jkbms_pb",
        "description": "bms.jkbms_pb",
        "isExtraImport": true,
        "detail": "bms.jkbms_pb",
        "documentation": {}
    },
    {
        "label": "Pace",
        "importPath": "bms.pace",
        "description": "bms.pace",
        "isExtraImport": true,
        "detail": "bms.pace",
        "documentation": {}
    },
    {
        "label": "Pace",
        "importPath": "bms.pace",
        "description": "bms.pace",
        "isExtraImport": true,
        "detail": "bms.pace",
        "documentation": {}
    },
    {
        "label": "Renogy",
        "importPath": "bms.renogy",
        "description": "bms.renogy",
        "isExtraImport": true,
        "detail": "bms.renogy",
        "documentation": {}
    },
    {
        "label": "Renogy",
        "importPath": "bms.renogy",
        "description": "bms.renogy",
        "isExtraImport": true,
        "detail": "bms.renogy",
        "documentation": {}
    },
    {
        "label": "Seplos",
        "importPath": "bms.seplos",
        "description": "bms.seplos",
        "isExtraImport": true,
        "detail": "bms.seplos",
        "documentation": {}
    },
    {
        "label": "Seplos",
        "importPath": "bms.seplos",
        "description": "bms.seplos",
        "isExtraImport": true,
        "detail": "bms.seplos",
        "documentation": {}
    },
    {
        "label": "Seplosv3",
        "importPath": "bms.seplosv3",
        "description": "bms.seplosv3",
        "isExtraImport": true,
        "detail": "bms.seplosv3",
        "documentation": {}
    },
    {
        "label": "Seplosv3",
        "importPath": "bms.seplosv3",
        "description": "bms.seplosv3",
        "isExtraImport": true,
        "detail": "bms.seplosv3",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "DbusHelper",
        "importPath": "standalone_helper",
        "description": "standalone_helper",
        "isExtraImport": true,
        "detail": "standalone_helper",
        "documentation": {}
    },
    {
        "label": "standalone_serialbattery",
        "importPath": "standalone_serialbattery",
        "description": "standalone_serialbattery",
        "isExtraImport": true,
        "detail": "standalone_serialbattery",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "lcddriver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lcddriver",
        "description": "lcddriver",
        "detail": "lcddriver",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "importlib.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.util",
        "description": "importlib.util",
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "ANT",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.ant",
        "description": "dbus-serialbattery.bms.ant",
        "peekOfCode": "class ANT(Battery):\n    def __init__(self, port, baud, address):\n        super(ANT, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.history.exclude_values_to_calculate = [\"charge_cycles\", \"total_ah_drawn\"]\n    command_general = b\"\\xdb\\xdb\\x00\\x00\\x00\\x00\"\n    # command_capacity_low = b\"\\x5A\\x5A\\x1F\\x00\\x00\\x1F\"\n    # command_capacity_high = b\"\\x5A\\x5A\\x20\\x00\\x00\\x20\"\n    balancing = 0\n    BATTERYTYPE = \"ANT\"",
        "detail": "dbus-serialbattery.bms.ant",
        "documentation": {}
    },
    {
        "label": "BatteryTemplate",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.battery_template",
        "description": "dbus-serialbattery.bms.battery_template",
        "peekOfCode": "class BatteryTemplate(Battery):\n    def __init__(self, port, baud, address):\n        super(BatteryTemplate, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        # Exclude history values from calculation if they are provided from the BMS\n        self.history.exclude_values_to_calculate = []\n        # If the BMS could be connected over RS485/Modbus and an address can be configured\n        # please use the address in your commands. This will allow multiple batteries to be connected\n        # on the same USB to RS485 adapter\n        self.address = address",
        "detail": "dbus-serialbattery.bms.battery_template",
        "documentation": {}
    },
    {
        "label": "Daly",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.daly",
        "description": "dbus-serialbattery.bms.daly",
        "peekOfCode": "class Daly(Battery):\n    def __init__(self, port, baud, address):\n        super(Daly, self).__init__(port, baud, address)\n        self.charger_connected = None\n        self.load_connected = None\n        self.address = address\n        self.cell_min_voltage = None\n        self.cell_max_voltage = None\n        self.cell_min_no = None\n        self.cell_max_no = None",
        "detail": "dbus-serialbattery.bms.daly",
        "documentation": {}
    },
    {
        "label": "Daly_Can",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.daly_can",
        "description": "dbus-serialbattery.bms.daly_can",
        "peekOfCode": "class Daly_Can(Battery):\n    def __init__(self, port, baud, address):\n        super(Daly_Can, self).__init__(port, baud, address)\n        self.charger_connected = None\n        self.load_connected = None\n        self.cell_min_voltage = None\n        self.cell_max_voltage = None\n        self.cell_min_no = None\n        self.cell_max_no = None\n        # self.cell_count = 0  # init here if testing with bms without battery connected",
        "detail": "dbus-serialbattery.bms.daly_can",
        "documentation": {}
    },
    {
        "label": "Daren485",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.daren_485",
        "description": "dbus-serialbattery.bms.daren_485",
        "peekOfCode": "class Daren485(Battery):\n    def __init__(self, port, baud, address):\n        super(Daren485, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        # Uses address to build request commands, so has to be set\n        # to address reflecting the position of the DIP-switches on the unit(s), starting at '01'.\n        self.address = address\n        self.serial_number = \"\"\n        self.history.exclude_values_to_calculate = [\"charge_cycles\", \"total_ah_drawn\", \"charged_energy\", \"discharged_energy\"]\n    BATTERYTYPE = \"Daren485\"",
        "detail": "dbus-serialbattery.bms.daren_485",
        "documentation": {}
    },
    {
        "label": "Ecs",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.ecs",
        "description": "dbus-serialbattery.bms.ecs",
        "peekOfCode": "class Ecs(Battery):\n    def __init__(self, port, baud, address):\n        super(Ecs, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n    BATTERYTYPE = \"ECS LiPro\"\n    GREENMETER_ID_500A = 500\n    GREENMETER_ID_250A = 501\n    GREENMETER_ID_125A = 502\n    METER_SIZE = \"\"\n    # LiPro 100, 101 is untested but should work if they have updated firmware",
        "detail": "dbus-serialbattery.bms.ecs",
        "documentation": {}
    },
    {
        "label": "EG4_Lifepower",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.eg4_lifepower",
        "description": "dbus-serialbattery.bms.eg4_lifepower",
        "peekOfCode": "class EG4_Lifepower(Battery):\n    def __init__(self, port, baud, address):\n        super(EG4_Lifepower, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.address = address\n        self.command_general = b\"\\x7e\" + address + b\"\\x01\\x00\" + self.get_command_general_part() + b\"\\x0d\"\n        self.command_hardware_version = b\"\\x7e\" + address + b\"\\x42\\x00\\xfc\\x0d\"\n        self.command_firmware_version = b\"\\x7e\" + address + b\"\\x33\\x00\" + self.get_command_general_part() + b\"\\x0d\"\n        self.history.exclude_values_to_calculate = [\"charge_cycles\"]\n        # polling every second seems to create some error messages",
        "detail": "dbus-serialbattery.bms.eg4_lifepower",
        "documentation": {}
    },
    {
        "label": "EG4_LL",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.eg4_ll",
        "description": "dbus-serialbattery.bms.eg4_ll",
        "peekOfCode": "class EG4_LL(Battery):\n    def __init__(self, port, baud, address):\n        super(EG4_LL, self).__init__(port, baud, address)\n        self.charger_connected = None\n        self.load_connected = None\n        self.address = address\n        self.cell_min_voltage = None\n        self.cell_max_voltage = None\n        self.cell_min_no = None\n        self.cell_max_no = None",
        "detail": "dbus-serialbattery.bms.eg4_ll",
        "documentation": {}
    },
    {
        "label": "Felicity",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.felicity",
        "description": "dbus-serialbattery.bms.felicity",
        "peekOfCode": "class Felicity(Battery):\n    def __init__(self, port, baud, address):\n        super(Felicity, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        # should be 0x01\n        self.command_address = address\n    BATTERYTYPE = \"Felicity\"\n    LENGTH_CHECK = 4\n    LENGTH_POS = 2\n    # command bytes [Address field][Function code (03 = Read register)]",
        "detail": "dbus-serialbattery.bms.felicity",
        "documentation": {}
    },
    {
        "label": "HeltecModbus",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.heltecmodbus",
        "description": "dbus-serialbattery.bms.heltecmodbus",
        "peekOfCode": "class HeltecModbus(Battery):\n    def __init__(self, port, baud, address):\n        super(HeltecModbus, self).__init__(port, baud, address)\n        self.address = int.from_bytes(address, byteorder=\"big\")\n        self.type = \"Heltec_Smart\"\n        self.unique_identifier_tmp = \"\"\n    def test_connection(self):\n        \"\"\"\n        call a function that will connect to the battery, send a command and retrieve the result.\n        The result or call should be unique to this BMS. Battery name or version, etc.",
        "detail": "dbus-serialbattery.bms.heltecmodbus",
        "documentation": {}
    },
    {
        "label": "RETRYCNT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.heltecmodbus",
        "description": "dbus-serialbattery.bms.heltecmodbus",
        "peekOfCode": "RETRYCNT = 10\n# the wait time after a communication - normally this should be as defined by modbus RTU and handled in minimalmodbus,\n# but yeah, it seems we need it for the Heltec BMS\nSLPTIME = 0.03\nmbdevs: Dict[int, minimalmodbus.Instrument] = {}\nlocks: Dict[int, any] = {}\nclass HeltecModbus(Battery):\n    def __init__(self, port, baud, address):\n        super(HeltecModbus, self).__init__(port, baud, address)\n        self.address = int.from_bytes(address, byteorder=\"big\")",
        "detail": "dbus-serialbattery.bms.heltecmodbus",
        "documentation": {}
    },
    {
        "label": "SLPTIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.heltecmodbus",
        "description": "dbus-serialbattery.bms.heltecmodbus",
        "peekOfCode": "SLPTIME = 0.03\nmbdevs: Dict[int, minimalmodbus.Instrument] = {}\nlocks: Dict[int, any] = {}\nclass HeltecModbus(Battery):\n    def __init__(self, port, baud, address):\n        super(HeltecModbus, self).__init__(port, baud, address)\n        self.address = int.from_bytes(address, byteorder=\"big\")\n        self.type = \"Heltec_Smart\"\n        self.unique_identifier_tmp = \"\"\n    def test_connection(self):",
        "detail": "dbus-serialbattery.bms.heltecmodbus",
        "documentation": {}
    },
    {
        "label": "HLPdataBMS4S",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s",
        "description": "dbus-serialbattery.bms.hlpdatabms4s",
        "peekOfCode": "class HLPdataBMS4S(Battery):\n    def __init__(self, port, baud, address):\n        super(HLPdataBMS4S, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n    BATTERYTYPE = \"HLPdataBMS4S\"\n    def test_connection(self):\n        \"\"\"\n        call a function that will connect to the battery, send a command and retrieve the result.\n        The result or call should be unique to this BMS. Battery name or version, etc.\n        Return True if success, False for failure",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s",
        "description": "dbus-serialbattery.bms.hlpdatabms4s",
        "peekOfCode": "def read_serial_data(command, port, baud, time, min_len):\n    try:\n        with serial.Serial(port, baudrate=baud, timeout=2.5) as ser:\n            ret = read_serialport_data(ser, command, time, min_len)\n        return ret\n    except serial.SerialException as e:\n        logger.error(e)\n        return False\n    except Exception:\n        return False",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s",
        "documentation": {}
    },
    {
        "label": "read_serialport_data",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s",
        "description": "dbus-serialbattery.bms.hlpdatabms4s",
        "peekOfCode": "def read_serialport_data(ser, command, time, min_len):\n    try:\n        if min_len == 12:\n            ser.write(b\"\\n\")\n            sleep(0.2)\n        cnt = 0\n        while cnt < 3:\n            cnt += 1\n            ser.flushOutput()\n            ser.flushInput()",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s",
        "documentation": {}
    },
    {
        "label": "get_par",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s",
        "description": "dbus-serialbattery.bms.hlpdatabms4s",
        "peekOfCode": "def get_par(p, s):\n    ix = s.find(p)\n    if ix > 0:\n        ix += len(p)\n        for i in range(ix, len(s)):\n            if s[i] == \" \" or s[i] == 10 or s[i] == 13:\n                ret = s[ix:i]\n                return ret\n    return False",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s",
        "documentation": {}
    },
    {
        "label": "ConsoleBase",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class ConsoleBase(object):\n    \"\"\"OS abstraction for console (input/output codec, no echo)\"\"\"\n    def __init__(self, miniterm):\n        self.miniterm = miniterm\n        if sys.version_info >= (3, 0):\n            self.byte_output = sys.stdout.buffer\n        else:\n            self.byte_output = sys.stdout\n        self.output = sys.stdout\n    def setup(self):",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "Transform",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class Transform(object):\n    \"\"\"do-nothing: forward all data unchanged\"\"\"\n    def rx(self, text):\n        \"\"\"text received from serial port\"\"\"\n        return text\n    def tx(self, text):\n        \"\"\"text to be sent to serial port\"\"\"\n        return text\n    def echo(self, text):\n        \"\"\"text to be sent but displayed on console\"\"\"",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "CRLF",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class CRLF(Transform):\n    \"\"\"ENTER sends CR+LF\"\"\"\n    def tx(self, text):\n        return text.replace(\"\\n\", \"\\r\\n\")\nclass CR(Transform):\n    \"\"\"ENTER sends CR\"\"\"\n    def rx(self, text):\n        return text.replace(\"\\r\", \"\\n\")\n    def tx(self, text):\n        return text.replace(\"\\n\", \"\\r\")",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "CR",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class CR(Transform):\n    \"\"\"ENTER sends CR\"\"\"\n    def rx(self, text):\n        return text.replace(\"\\r\", \"\\n\")\n    def tx(self, text):\n        return text.replace(\"\\n\", \"\\r\")\nclass LF(Transform):\n    \"\"\"ENTER sends LF\"\"\"\nclass NoTerminal(Transform):\n    \"\"\"remove typical terminal control codes from input\"\"\"",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "LF",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class LF(Transform):\n    \"\"\"ENTER sends LF\"\"\"\nclass NoTerminal(Transform):\n    \"\"\"remove typical terminal control codes from input\"\"\"\n    REPLACEMENT_MAP = dict((x, 0x2400 + x) for x in range(32) if unichr(x) not in \"\\r\\n\\b\\t\")\n    REPLACEMENT_MAP.update(\n        {\n            0x7F: 0x2421,  # DEL\n            0x9B: 0x2425,  # CSI\n        }",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "NoTerminal",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class NoTerminal(Transform):\n    \"\"\"remove typical terminal control codes from input\"\"\"\n    REPLACEMENT_MAP = dict((x, 0x2400 + x) for x in range(32) if unichr(x) not in \"\\r\\n\\b\\t\")\n    REPLACEMENT_MAP.update(\n        {\n            0x7F: 0x2421,  # DEL\n            0x9B: 0x2425,  # CSI\n        }\n    )\n    def rx(self, text):",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "NoControls",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class NoControls(NoTerminal):\n    \"\"\"Remove all control codes, incl. CR+LF\"\"\"\n    REPLACEMENT_MAP = dict((x, 0x2400 + x) for x in range(32))\n    REPLACEMENT_MAP.update(\n        {\n            0x20: 0x2423,  # visual space\n            0x7F: 0x2421,  # DEL\n            0x9B: 0x2425,  # CSI\n        }\n    )",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "Printable",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class Printable(Transform):\n    \"\"\"Show decimal code for all non-ASCII characters and replace most control codes\"\"\"\n    def rx(self, text):\n        r = []\n        for c in text:\n            if \" \" <= c < \"\\x7f\" or c in \"\\r\\n\\b\\t\":\n                r.append(c)\n            elif c < \" \":\n                r.append(unichr(0x2400 + ord(c)))\n            else:",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "Colorize",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class Colorize(Transform):\n    \"\"\"Apply different colors for received and echo\"\"\"\n    def __init__(self):\n        # XXX make it configurable, use colorama?\n        self.input_color = \"\\x1b[37m\"\n        self.echo_color = \"\\x1b[31m\"\n    def rx(self, text):\n        return self.input_color + text\n    def echo(self, text):\n        return self.echo_color + text",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "DebugIO",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class DebugIO(Transform):\n    \"\"\"Print what is sent and received\"\"\"\n    def rx(self, text):\n        sys.stderr.write(\" [RX:{!r}] \".format(text))\n        sys.stderr.flush()\n        return text\n    def tx(self, text):\n        sys.stderr.write(\" [TX:{!r}] \".format(text))\n        sys.stderr.flush()\n        return text",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "Miniterm",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "class Miniterm(object):\n    \"\"\"\\\n    Terminal application. Copy data from serial port to console and vice versa.\n    Handle special keys from the console to show menu etc.\n    \"\"\"\n    def __init__(self, serial_instance, echo=False, eol=\"crlf\", filters=()):\n        self.console = Console(self)\n        self.serial = serial_instance\n        self.echo = True\n        self.raw = False",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "key_description",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "def key_description(character):\n    \"\"\"generate a readable description for a key\"\"\"\n    ascii_code = ord(character)\n    if ascii_code < 32:\n        return \"Ctrl+{:c}\".format(ord(\"@\") + ascii_code)\n    else:\n        return repr(character)\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass ConsoleBase(object):\n    \"\"\"OS abstraction for console (input/output codec, no echo)\"\"\"",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "ask_for_port",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "def ask_for_port():\n    \"\"\"\\\n    Show a list of ports and ask the user for a choice. To make selection\n    easier on systems with long device names, also allow the input of an\n    index.\n    \"\"\"\n    sys.stderr.write(\"\\n--- Available ports:\\n\")\n    ports = []\n    for n, (port, desc, hwid) in enumerate(sorted(comports()), 1):\n        sys.stderr.write(\"--- {:2}: {:20} {!r}\\n\".format(n, port, desc))",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "def main(\n    default_port=None,\n    default_baudrate=9600,\n    default_rts=None,\n    default_dtr=None,\n    serial_instance=None,\n):\n    \"\"\"Command line tool, entry point\"\"\"\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Miniterm - A simple terminal program for the serial port.\")",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "EOL_TRANSFORMATIONS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "EOL_TRANSFORMATIONS = {\n    \"crlf\": CRLF,\n    \"cr\": CR,\n    \"lf\": LF,\n}\nTRANSFORMATIONS = {\n    \"direct\": Transform,  # no transformation\n    \"default\": NoTerminal,\n    \"nocontrol\": NoControls,\n    \"printable\": Printable,",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "TRANSFORMATIONS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "description": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "peekOfCode": "TRANSFORMATIONS = {\n    \"direct\": Transform,  # no transformation\n    \"default\": NoTerminal,\n    \"nocontrol\": NoControls,\n    \"printable\": Printable,\n    \"colorize\": Colorize,\n    \"debug\": DebugIO,\n}\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ndef ask_for_port():",
        "detail": "dbus-serialbattery.bms.hlpdatabms4s_miniterm",
        "documentation": {}
    },
    {
        "label": "BaseType",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.irock",
        "description": "dbus-serialbattery.bms.irock",
        "peekOfCode": "class BaseType(Enum):\n    INT8 = \"int8\"\n    UINT8 = \"uint8\"\n    CHAR = \"char\"\n    INT16 = \"int16\"\n    UINT16 = \"uint16\"\n    INT32 = \"int32\"\n    UINT32 = \"uint32\"\n    INT64 = \"int64\"\n    UINT64 = \"uint64\"",
        "detail": "dbus-serialbattery.bms.irock",
        "documentation": {}
    },
    {
        "label": "iRock",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.irock",
        "description": "dbus-serialbattery.bms.irock",
        "peekOfCode": "class iRock(Battery):\n    BATTERYTYPE = \"iRock\"\n    def __init__(self, port, baud, address):\n        \"\"\"\n        Initialize the iRock battery with port, baud, and address.\n        \"\"\"\n        super(iRock, self).__init__(port, baud, address)\n        self.poll_interval: int = 5000\n        self.address = address\n        self.type = self.BATTERYTYPE",
        "detail": "dbus-serialbattery.bms.irock",
        "documentation": {}
    },
    {
        "label": "timed_lru_cache",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.irock",
        "description": "dbus-serialbattery.bms.irock",
        "peekOfCode": "def timed_lru_cache(days: float = 0, seconds: float = 0, microseconds: float = 0, milliseconds: float = 0, minutes: float = 0, hours: float = 0, weeks: float = 0, maxsize: int = 128):\n    \"\"\"\n    Decorator that applies an LRU cache with a timed expiration to a function.\n    \"\"\"\n    def wrapper(func):\n        func = functools.lru_cache(maxsize=maxsize)(func)\n        func.lifetime = timedelta(days=days, seconds=seconds, microseconds=microseconds, milliseconds=milliseconds, minutes=minutes, hours=hours, weeks=weeks)\n        func.expiration = datetime.now() + func.lifetime\n        @functools.wraps(func)\n        def wrapped_func(*args, **kwargs):",
        "detail": "dbus-serialbattery.bms.irock",
        "documentation": {}
    },
    {
        "label": "IROCK_MODBUS_REGISTERS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.irock",
        "description": "dbus-serialbattery.bms.irock",
        "peekOfCode": "IROCK_MODBUS_REGISTERS = [\n    {'version': Version('2.0.0'), 'register': {'Manufacturer_ID': {'name': 'Manufacturer ID', 'address': 0, 'array_size': 1, 'type': 'uint16', 'description': 'Unique identifier of the manufacturer.', 'unit': None, 'hardware_support_register': None}, 'Modbus_Version': {'name': 'Modbus Version', 'address': 1, 'array_size': 16, 'type': 'char', 'description': 'Modbus protocol version, as a string in semantic versioning format. This field may not change between versions of the protocol.', 'unit': None, 'hardware_support_register': None}, 'Hardware_Name': {'name': 'Hardware Name', 'address': 9, 'array_size': 16, 'type': 'char', 'description': 'Name of the iRock hardware. Options include: `iRock 200`, `iRock 300`, `iRock 400`, `iRock 212` or `iRock 424`.', 'unit': None, 'hardware_support_register': None}, 'Hardware_Version': {'name': 'Hardware Version', 'address': 17, 'array_size': 16, 'type': 'char', 'description': 'Version identifier of the hardware, as a string in semantic versioning format.', 'unit': None, 'hardware_support_register': None}, 'Serial_Number': {'name': 'Serial Number', 'address': 25, 'array_size': 8, 'type': 'char', 'description': 'Unique serial number of the iRock control board.', 'unit': None, 'hardware_support_register': None}, 'SW_Version': {'name': 'Software Version', 'address': 29, 'array_size': 16, 'type': 'char', 'description': 'Software version currently installed, as a string in semantic versioning format.', 'unit': None, 'hardware_support_register': None}, 'Number_of_Cells': {'name': 'Number of Cells', 'address': 37, 'array_size': 1, 'type': 'uint16', 'description': 'Number of battery cells in the system. May be 4, 8 or 16.', 'unit': None, 'hardware_support_register': None}, 'Battery_Voltage': {'name': 'Battery Voltage', 'address': 38, 'array_size': 1, 'type': 'float32', 'description': 'Total voltage of the battery pack.', 'unit': 'V', 'hardware_support_register': None}, 'Battery_Current': {'name': 'Battery Current', 'address': 40, 'array_size': 1, 'type': 'float32', 'description': 'Current flowing in or out of the battery. Positive values indicate charging, negative values indicate discharging.', 'unit': 'A', 'hardware_support_register': 0}, 'Battery_SOC': {'name': 'SOC', 'address': 42, 'array_size': 1, 'type': 'float32', 'description': 'State of Charge (SOC) of the battery.', 'unit': '%', 'hardware_support_register': 1}, 'Capacity': {'name': 'Capacity', 'address': 44, 'array_size': 1, 'type': 'float32', 'description': 'Total capacity of the battery pack.', 'unit': 'Ah', 'hardware_support_register': None}, 'Remaining_Capacity': {'name': 'Remaining Capacity', 'address': 46, 'array_size': 1, 'type': 'float32', 'description': 'Remaining available capacity in the battery pack.', 'unit': 'Ah', 'hardware_support_register': 2}, 'Max_Charge_Current': {'name': 'Max Charge Current', 'address': 48, 'array_size': 1, 'type': 'float32', 'description': 'Maximum current the battery can accept.', 'unit': 'A', 'hardware_support_register': None}, 'Max_Discharge_Current': {'name': 'Max Discharge Current', 'address': 50, 'array_size': 1, 'type': 'float32', 'description': 'Maximum current the battery can deliver.', 'unit': 'A', 'hardware_support_register': None}, 'Max_Cell_Voltage': {'name': 'Max Cell Voltage', 'address': 52, 'array_size': 1, 'type': 'float32', 'description': 'Maximum voltage recorded for any single cell.', 'unit': 'V', 'hardware_support_register': None}, 'Min_Cell_Voltage': {'name': 'Min Cell Voltage', 'address': 54, 'array_size': 1, 'type': 'float32', 'description': 'Minimum voltage recorded for any single cell.', 'unit': 'V', 'hardware_support_register': None}, 'Temperature_Sensor_1': {'name': 'Temperature Sensor 1', 'address': 56, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 1.', 'unit': '°C', 'hardware_support_register': 3}, 'Temperature_Sensor_2': {'name': 'Temperature Sensor 2', 'address': 58, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 2.', 'unit': '°C', 'hardware_support_register': 4}, 'Temperature_Sensor_3': {'name': 'Temperature Sensor 3', 'address': 60, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 3.', 'unit': '°C', 'hardware_support_register': 5}, 'Temperature_Sensor_4': {'name': 'Temperature Sensor 4', 'address': 62, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 4.', 'unit': '°C', 'hardware_support_register': 6}, 'MOSFET_Temperature': {'name': 'MOSFET Temperature', 'address': 64, 'array_size': 1, 'type': 'float32', 'description': 'MOSFET temperature sensor reading.', 'unit': '°C', 'hardware_support_register': 7}, 'Feedback_Shunt_Current': {'name': 'Feedback Shunt Current', 'address': 66, 'array_size': 1, 'type': 'float32', 'description': 'Current flowing through the feedback shunt. The feedback shunt measures the current of all balancers in sum.', 'unit': 'A', 'hardware_support_register': 8}, 'Charge_FET': {'name': 'Charge FET', 'address': 68, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if the charge FET is active. `true` indicates active, `false` indicates inactive.', 'unit': None, 'hardware_support_register': 9}, 'Discharge_FET': {'name': 'Discharge FET', 'address': 69, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if the discharge FET is active. `true` indicates active, `false` indicates inactive.', 'unit': None, 'hardware_support_register': 10}, 'Allow_Charge': {'name': 'Allow Charge', 'address': 70, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if charging is allowed. `true` indicates allowed, `false` indicates disallowed.', 'unit': None, 'hardware_support_register': 11}, 'Allow_Discharge': {'name': 'Allow Discharge', 'address': 71, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if discharging is allowed. `true` indicates allowed, `false` indicates disallowed.', 'unit': None, 'hardware_support_register': 12}, 'Low_Voltage_Alarm': {'name': 'Low Voltage Alarm', 'address': 72, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for low battery voltage. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': None}, 'High_Voltage_Alarm': {'name': 'High Voltage Alarm', 'address': 73, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for high battery voltage. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': None}, 'Low_Cell_Voltage_Alarm': {'name': 'Low Cell Voltage Alarm', 'address': 74, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for low cell voltage. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': None}, 'High_Cell_Voltage_Alarm': {'name': 'High Cell Voltage Alarm', 'address': 75, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for high cell voltage. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': None}, 'Low_SOC_Alarm': {'name': 'Low SOC Alarm', 'address': 76, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for low SOC. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': 13}, 'High_Charge_Current_Alarm': {'name': 'High Charge Current Alarm', 'address': 77, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for high charge current. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': 14}, 'High_Discharge_Current_Alarm': {'name': 'High Discharge Current Alarm', 'address': 78, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for high discharge current. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': 15}, 'Temperature_Alarm': {'name': 'Temperature Alarm', 'address': 79, 'array_size': 1, 'type': 'uint16', 'description': 'Alarm Status for high temperature. No Alarm may be `0`, Warnings may be `1` and Alarms may be `2`.', 'unit': None, 'hardware_support_register': 16}}},\n    {'version': Version('1.0.0'), 'register': {'Manufacturer_ID': {'name': 'Manufacturer ID', 'address': 0, 'array_size': 1, 'type': 'uint16', 'description': 'Unique identifier of the manufacturer.', 'unit': None, 'hardware_support_register': None}, 'Modbus_Version': {'name': 'Modbus Version', 'address': 1, 'array_size': 16, 'type': 'char', 'description': 'Modbus protocol version, as a string in semantic versioning format. This field may not change between versions of the protocol.', 'unit': None, 'hardware_support_register': None}, 'Hardware_Name': {'name': 'Hardware Name', 'address': 9, 'array_size': 16, 'type': 'char', 'description': 'Name of the iRock hardware. Options include: `iRock 200`, `iRock 300`, `iRock 400`, `iRock 212` or `iRock 424`.', 'unit': None, 'hardware_support_register': None}, 'Hardware_Version': {'name': 'Hardware Version', 'address': 17, 'array_size': 8, 'type': 'char', 'description': 'Version identifier of the hardware, as a string in float format.', 'unit': None, 'hardware_support_register': None}, 'Serial_Number': {'name': 'Serial Number', 'address': 21, 'array_size': 12, 'type': 'char', 'description': 'Unique serial number of the iRock control board.', 'unit': None, 'hardware_support_register': None}, 'SW_Version': {'name': 'Software Version', 'address': 27, 'array_size': 16, 'type': 'char', 'description': 'Software version currently installed, as a string in semantic versioning format.', 'unit': None, 'hardware_support_register': None}, 'Number_of_Cells': {'name': 'Number of Cells', 'address': 35, 'array_size': 1, 'type': 'uint16', 'description': 'Number of battery cells in the system. May be any number between 2 and 24.', 'unit': None, 'hardware_support_register': None}, 'Battery_Voltage': {'name': 'Battery Voltage', 'address': 36, 'array_size': 1, 'type': 'float32', 'description': 'Total voltage of the battery pack.', 'unit': 'V', 'hardware_support_register': None}, 'Battery_Current': {'name': 'Battery Current', 'address': 38, 'array_size': 1, 'type': 'float32', 'description': 'Current flowing in or out of the battery. Positive values indicate charging, negative values indicate discharging.', 'unit': 'A', 'hardware_support_register': None}, 'Battery_SOC': {'name': 'SOC', 'address': 40, 'array_size': 1, 'type': 'float32', 'description': 'State of Charge (SOC) of the battery.', 'unit': '%', 'hardware_support_register': None}, 'Capacity': {'name': 'Capacity', 'address': 42, 'array_size': 1, 'type': 'float32', 'description': 'Total capacity of the battery pack.', 'unit': 'Ah', 'hardware_support_register': None}, 'Remaining_Capacity': {'name': 'Remaining Capacity', 'address': 44, 'array_size': 1, 'type': 'float32', 'description': 'Remaining available capacity in the battery pack.', 'unit': 'Ah', 'hardware_support_register': None}, 'Max_Charge_Current': {'name': 'Max Charge Current', 'address': 46, 'array_size': 1, 'type': 'float32', 'description': 'Maximum current the battery can accept.', 'unit': 'A', 'hardware_support_register': None}, 'Max_Discharge_Current': {'name': 'Max Discharge Current', 'address': 48, 'array_size': 1, 'type': 'float32', 'description': 'Maximum current the battery can deliver.', 'unit': 'A', 'hardware_support_register': None}, 'Max_Cell_Voltage': {'name': 'Max Cell Voltage', 'address': 50, 'array_size': 1, 'type': 'float32', 'description': 'Maximum voltage recorded for any single cell.', 'unit': 'V', 'hardware_support_register': None}, 'Min_Cell_Voltage': {'name': 'Min Cell Voltage', 'address': 52, 'array_size': 1, 'type': 'float32', 'description': 'Minimum voltage recorded for any single cell.', 'unit': 'V', 'hardware_support_register': None}, 'Temperature_Sensor_1': {'name': 'Temperature Sensor 1', 'address': 54, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 1.', 'unit': '°C', 'hardware_support_register': None}, 'Temperature_Sensor_2': {'name': 'Temperature Sensor 2', 'address': 56, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 2.', 'unit': '°C', 'hardware_support_register': None}, 'Temperature_Sensor_3': {'name': 'Temperature Sensor 3', 'address': 58, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 3.', 'unit': '°C', 'hardware_support_register': None}, 'Temperature_Sensor_4': {'name': 'Temperature Sensor 4', 'address': 60, 'array_size': 1, 'type': 'float32', 'description': 'Temperature reading from sensor 4.', 'unit': '°C', 'hardware_support_register': None}, 'MOSFET_Temperature': {'name': 'MOSFET Temperature', 'address': 62, 'array_size': 1, 'type': 'float32', 'description': 'MOSFET temperature sensor reading.', 'unit': '°C', 'hardware_support_register': None}}},\n]\nIROCK_MODBUS_CELL_REGISTERS = [\n    {'version': Version('2.0.0'), 'offset': 80, 'length': 3, 'register': {'Cell_Voltage': {'name': 'Cell Voltage', 'offset': 0, 'array_size': 1, 'type': 'float32', 'description': 'Voltage of cell.', 'unit': 'V', 'hardware_support_register': None}, 'Cell_Balance_Status': {'name': 'Cell Balance Status', 'offset': 2, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if the cells balancer is active. `true` indicates active, `false` indicates inactive.', 'unit': None, 'hardware_support_register': None}}},\n    {'version': Version('1.0.0'), 'offset': 64, 'length': 4, 'register': {'Cell_Voltage': {'name': 'Cell Voltage', 'offset': 0, 'array_size': 1, 'type': 'float32', 'description': 'Voltage of cell.', 'unit': 'V', 'hardware_support_register': None}, 'Cell_Balance_Status': {'name': 'Cell Balance Status', 'offset': 2, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if the cells balancer is active. `true` indicates active, `false` indicates inactive.', 'unit': None, 'hardware_support_register': None}, 'res': {'name': 'Reserved', 'offset': 3, 'array_size': 1, 'type': 'uint16', 'description': 'Reserved', 'unit': None, 'hardware_support_register': None}}},\n]\ndef timed_lru_cache(days: float = 0, seconds: float = 0, microseconds: float = 0, milliseconds: float = 0, minutes: float = 0, hours: float = 0, weeks: float = 0, maxsize: int = 128):\n    \"\"\"",
        "detail": "dbus-serialbattery.bms.irock",
        "documentation": {}
    },
    {
        "label": "IROCK_MODBUS_CELL_REGISTERS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.irock",
        "description": "dbus-serialbattery.bms.irock",
        "peekOfCode": "IROCK_MODBUS_CELL_REGISTERS = [\n    {'version': Version('2.0.0'), 'offset': 80, 'length': 3, 'register': {'Cell_Voltage': {'name': 'Cell Voltage', 'offset': 0, 'array_size': 1, 'type': 'float32', 'description': 'Voltage of cell.', 'unit': 'V', 'hardware_support_register': None}, 'Cell_Balance_Status': {'name': 'Cell Balance Status', 'offset': 2, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if the cells balancer is active. `true` indicates active, `false` indicates inactive.', 'unit': None, 'hardware_support_register': None}}},\n    {'version': Version('1.0.0'), 'offset': 64, 'length': 4, 'register': {'Cell_Voltage': {'name': 'Cell Voltage', 'offset': 0, 'array_size': 1, 'type': 'float32', 'description': 'Voltage of cell.', 'unit': 'V', 'hardware_support_register': None}, 'Cell_Balance_Status': {'name': 'Cell Balance Status', 'offset': 2, 'array_size': 1, 'type': 'bool', 'description': 'Boolean indicating if the cells balancer is active. `true` indicates active, `false` indicates inactive.', 'unit': None, 'hardware_support_register': None}, 'res': {'name': 'Reserved', 'offset': 3, 'array_size': 1, 'type': 'uint16', 'description': 'Reserved', 'unit': None, 'hardware_support_register': None}}},\n]\ndef timed_lru_cache(days: float = 0, seconds: float = 0, microseconds: float = 0, milliseconds: float = 0, minutes: float = 0, hours: float = 0, weeks: float = 0, maxsize: int = 128):\n    \"\"\"\n    Decorator that applies an LRU cache with a timed expiration to a function.\n    \"\"\"\n    def wrapper(func):\n        func = functools.lru_cache(maxsize=maxsize)(func)",
        "detail": "dbus-serialbattery.bms.irock",
        "documentation": {}
    },
    {
        "label": "Jkbms",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.jkbms",
        "description": "dbus-serialbattery.bms.jkbms",
        "peekOfCode": "class Jkbms(Battery):\n    def __init__(self, port, baud, address):\n        super(Jkbms, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.unique_identifier_tmp = \"\"\n        self.history.exclude_values_to_calculate = [\"charge_cycles\"]\n    BATTERYTYPE = \"JKBMS\"\n    LENGTH_CHECK = 1\n    LENGTH_POS = 2\n    LENGTH_SIZE = \"H\"",
        "detail": "dbus-serialbattery.bms.jkbms",
        "documentation": {}
    },
    {
        "label": "Jkbms_Ble",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.jkbms_ble",
        "description": "dbus-serialbattery.bms.jkbms_ble",
        "peekOfCode": "class Jkbms_Ble(Battery):\n    BATTERYTYPE = \"JKBMS BLE\"\n    resetting = False\n    def __init__(self, port, baud, address):\n        super(Jkbms_Ble, self).__init__(port, baud, address)\n        self.address = address\n        self.type = self.BATTERYTYPE\n        self.jk = Jkbms_Brn(address, lambda: self.reset_bluetooth())\n        self.unique_identifier_tmp = \"\"\n        self.history.exclude_values_to_calculate = [\"charge_cycles\"]",
        "detail": "dbus-serialbattery.bms.jkbms_ble",
        "documentation": {}
    },
    {
        "label": "Jkbms_Brn",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "class Jkbms_Brn:\n    # entries for translating the bytearray to py-object via unpack\n    # [[py dict entry as list, each entry ] ]\n    frame_buffer = bytearray()\n    bms_status = {}\n    waiting_for_response = \"\"\n    last_cell_info = 0\n    _new_data_callback = None\n    # Variables to control automatic SOC reset for BLE connected JK BMS\n    # max_cell_voltage will be updated when a SOC reset is requested",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "CELL_INFO_REFRESH_S",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "CELL_INFO_REFRESH_S = 0\nCHAR_HANDLE = \"0000ffe1-0000-1000-8000-00805f9b34fb\"\nCHAR_HANDLE_FAILOVER = 4\nMODEL_NBR_UUID = \"00002a24-0000-1000-8000-00805f9b34fb\"\nCOMMAND_CELL_INFO = 0x96\nCOMMAND_DEVICE_INFO = 0x97\nFRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "CHAR_HANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "CHAR_HANDLE = \"0000ffe1-0000-1000-8000-00805f9b34fb\"\nCHAR_HANDLE_FAILOVER = 4\nMODEL_NBR_UUID = \"00002a24-0000-1000-8000-00805f9b34fb\"\nCOMMAND_CELL_INFO = 0x96\nCOMMAND_DEVICE_INFO = 0x97\nFRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "CHAR_HANDLE_FAILOVER",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "CHAR_HANDLE_FAILOVER = 4\nMODEL_NBR_UUID = \"00002a24-0000-1000-8000-00805f9b34fb\"\nCOMMAND_CELL_INFO = 0x96\nCOMMAND_DEVICE_INFO = 0x97\nFRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "MODEL_NBR_UUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "MODEL_NBR_UUID = \"00002a24-0000-1000-8000-00805f9b34fb\"\nCOMMAND_CELL_INFO = 0x96\nCOMMAND_DEVICE_INFO = 0x97\nFRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "COMMAND_CELL_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "COMMAND_CELL_INFO = 0x96\nCOMMAND_DEVICE_INFO = 0x97\nFRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "COMMAND_DEVICE_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "COMMAND_DEVICE_INFO = 0x97\nFRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "FRAME_VERSION_JK04",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "FRAME_VERSION_JK04 = 0x01\nFRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "FRAME_VERSION_JK02",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "FRAME_VERSION_JK02 = 0x02\nFRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "FRAME_VERSION_JK02_32S",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "FRAME_VERSION_JK02_32S = 0x03\nPROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "PROTOCOL_VERSION_JK02",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "PROTOCOL_VERSION_JK02 = 0x02\nJK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "JK_REGISTER_OVPR",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "JK_REGISTER_OVPR = 0x05\nJK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],\n    [[\"device_info\", \"vendor_id\"], 6, \"16s\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "JK_REGISTER_OVP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "JK_REGISTER_OVP = 0x04\nprotocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],\n    [[\"device_info\", \"vendor_id\"], 6, \"16s\"],\n    [[\"device_info\", \"manufacturing_date\"], 78, \"8s\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "protocol_version",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "protocol_version = PROTOCOL_VERSION_JK02\nMIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],\n    [[\"device_info\", \"vendor_id\"], 6, \"16s\"],\n    [[\"device_info\", \"manufacturing_date\"], 78, \"8s\"],\n    [[\"device_info\", \"serial_number\"], 86, \"10s\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "MIN_RESPONSE_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "MIN_RESPONSE_SIZE = 300\nMAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],\n    [[\"device_info\", \"vendor_id\"], 6, \"16s\"],\n    [[\"device_info\", \"manufacturing_date\"], 78, \"8s\"],\n    [[\"device_info\", \"serial_number\"], 86, \"10s\"],\n    [[\"device_info\", \"production\"], 102, \"8s\"],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "MAX_RESPONSE_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "MAX_RESPONSE_SIZE = 320\nTRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],\n    [[\"device_info\", \"vendor_id\"], 6, \"16s\"],\n    [[\"device_info\", \"manufacturing_date\"], 78, \"8s\"],\n    [[\"device_info\", \"serial_number\"], 86, \"10s\"],\n    [[\"device_info\", \"production\"], 102, \"8s\"],\n]",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "TRANSLATE_DEVICE_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "TRANSLATE_DEVICE_INFO = [\n    [[\"device_info\", \"hw_rev\"], 22, \"8s\"],\n    [[\"device_info\", \"sw_rev\"], 30, \"8s\"],\n    [[\"device_info\", \"uptime\"], 38, \"<L\"],\n    [[\"device_info\", \"vendor_id\"], 6, \"16s\"],\n    [[\"device_info\", \"manufacturing_date\"], 78, \"8s\"],\n    [[\"device_info\", \"serial_number\"], 86, \"10s\"],\n    [[\"device_info\", \"production\"], 102, \"8s\"],\n]\nTRANSLATE_SETTINGS = [",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "TRANSLATE_SETTINGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "TRANSLATE_SETTINGS = [\n    [[\"settings\", \"cell_uvp\"], 10, \"<L\", 0.001],\n    [[\"settings\", \"cell_uvpr\"], 14, \"<L\", 0.001],\n    [[\"settings\", \"cell_ovp\"], 18, \"<L\", 0.001],\n    [[\"settings\", \"cell_ovpr\"], 22, \"<L\", 0.001],\n    [[\"settings\", \"balance_trigger_voltage\"], 26, \"<L\", 0.001],\n    [[\"settings\", \"power_off_voltage\"], 46, \"<L\", 0.001],\n    [[\"settings\", \"max_charge_current\"], 50, \"<L\", 0.001],\n    [[\"settings\", \"max_discharge_current\"], 62, \"<L\", 0.001],\n    [[\"settings\", \"max_balance_current\"], 50, \"<L\", 0.001],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "TRANSLATE_CELL_INFO_24S",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "TRANSLATE_CELL_INFO_24S = [\n    [[\"cell_info\", \"voltages\", 32], 6, \"<H\", 0.001],\n    [[\"cell_info\", \"average_cell_voltage\"], 58, \"<H\", 0.001],\n    [[\"cell_info\", \"delta_cell_voltage\"], 60, \"<H\", 0.001],\n    [[\"cell_info\", \"max_voltage_cell\"], 62, \"<B\"],\n    [[\"cell_info\", \"min_voltage_cell\"], 63, \"<B\"],\n    [[\"cell_info\", \"resistances\", 32], 64, \"<H\", 0.001],\n    [[\"cell_info\", \"total_voltage\"], 118, \"<H\", 0.001],\n    [[\"cell_info\", \"current\"], 126, \"<l\", 0.001],\n    [[\"cell_info\", \"temperature_sensor_1\"], 130, \"<H\", 0.1],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "TRANSLATE_CELL_INFO_32S",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.jkbms_brn",
        "description": "dbus-serialbattery.bms.jkbms_brn",
        "peekOfCode": "TRANSLATE_CELL_INFO_32S = [\n    [[\"cell_info\", \"voltages\", 32], 6, \"<H\", 0.001],\n    [[\"cell_info\", \"average_cell_voltage\"], 58, \"<H\", 0.001],\n    [[\"cell_info\", \"delta_cell_voltage\"], 60, \"<H\", 0.001],\n    [[\"cell_info\", \"max_voltage_cell\"], 62, \"<B\"],\n    [[\"cell_info\", \"min_voltage_cell\"], 63, \"<B\"],\n    [[\"cell_info\", \"resistances\", 32], 64, \"<H\", 0.001],\n    [[\"cell_info\", \"total_voltage\"], 118, \"<H\", 0.001],\n    [[\"cell_info\", \"current\"], 126, \"<l\", 0.001],\n    [[\"cell_info\", \"temperature_sensor_1\"], 130, \"<H\", 0.1],",
        "detail": "dbus-serialbattery.bms.jkbms_brn",
        "documentation": {}
    },
    {
        "label": "Jkbms_Can",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.jkbms_can",
        "description": "dbus-serialbattery.bms.jkbms_can",
        "peekOfCode": "class Jkbms_Can(Battery):\n    def __init__(self, port, baud, address):\n        super(Jkbms_Can, self).__init__(port, baud, address)\n        self.cell_count = 0\n        self.type = self.BATTERYTYPE\n        self.history.exclude_values_to_calculate = [\"charge_cycles\", \"total_ah_drawn\"]\n        # If multiple BMS are used simultaneously, the device address can be set via the dip switches on the BMS\n        # (default address is 0, all switches down) to change the CAN frame ID sent by the BMS\n        self.device_address = int.from_bytes(address, byteorder=\"big\") if address is not None else 0\n        self.last_error_time = 0",
        "detail": "dbus-serialbattery.bms.jkbms_can",
        "documentation": {}
    },
    {
        "label": "Jkbms_pb",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.jkbms_pb",
        "description": "dbus-serialbattery.bms.jkbms_pb",
        "peekOfCode": "class Jkbms_pb(Battery):\n    def __init__(self, port, baud, address):\n        super(Jkbms_pb, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.unique_identifier_tmp = \"\"\n        self.cell_count = 0\n        self.address = address\n        self.command_status = b\"\\x10\\x16\\x20\\x00\\x01\\x02\\x00\\x00\"\n        self.command_settings = b\"\\x10\\x16\\x1e\\x00\\x01\\x02\\x00\\x00\"\n        self.command_about = b\"\\x10\\x16\\x1c\\x00\\x01\\x02\\x00\\x00\"",
        "detail": "dbus-serialbattery.bms.jkbms_pb",
        "documentation": {}
    },
    {
        "label": "Kilovault_Ble",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.kilovault_ble",
        "description": "dbus-serialbattery.bms.kilovault_ble",
        "peekOfCode": "class Kilovault_Ble(Battery):\n    MODEL_NBR_UUID = \"2A24\"\n    KILOVAULT_BMS_SERVICE_UUID = \"FFE0\"\n    KILOVAULT_BMS_NOTIFY_CHARACTERISTIC_UUID = \"FFE4\"\n    KILOVAULT_BMS_NAME_CHARACTERISTIC_UUID = \"FFE6\"\n    KILOVAULT_START_END_BYTE = 0xB0\n    def __init__(self, port, baud, address):\n        super(Kilovault_Ble, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.history.exclude_values_to_calculate = []",
        "detail": "dbus-serialbattery.bms.kilovault_ble",
        "documentation": {}
    },
    {
        "label": "LiTime_Ble",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.litime_ble",
        "description": "dbus-serialbattery.bms.litime_ble",
        "peekOfCode": "class LiTime_Ble(Battery):\n    def __init__(self, port, baud, address):\n        super(LiTime_Ble, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.address = address\n        self.poll_interval = 2000\n        self.history.exclude_values_to_calculate = [\"charge_cycles\", \"total_ah_drawn\"]\n    BATTERYTYPE = \"LiTime\"\n    query_battery_status = bytes([0x00, 0x00, 0x04, 0x01, 0x13, 0x55, 0xAA, 0x17])\n    ble_handle = None",
        "detail": "dbus-serialbattery.bms.litime_ble",
        "documentation": {}
    },
    {
        "label": "LltJbdProtection",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "class LltJbdProtection(Protection):\n    def __init__(self):\n        super(LltJbdProtection, self).__init__()\n        self.voltage_cell_high = False\n        self.voltage_cell_low = False\n        self.short = False\n        self.IC_inspection = False\n        self.software_lock = False\n    def set_voltage_cell_high(self, value):\n        self.voltage_cell_high = value",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "LltJbd",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "class LltJbd(Battery):\n    def __init__(self, port, baud, address):\n        super(LltJbd, self).__init__(port, baud, address)\n        self.protection = LltJbdProtection()\n        self.type = self.BATTERYTYPE\n        self.address = address\n        self._product_name: str = \"\"\n        self.has_settings = False\n        self.reset_soc = 100\n        self.soc_to_set = None",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "checksum",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "def checksum(payload):\n    return (0x10000 - sum(payload)) % 0x10000\ndef cmd(op, reg, data):\n    payload = [reg, len(data)] + list(data)\n    chksum = checksum(payload)\n    data = [0xDD, op] + payload + [chksum, 0x77]\n    format = f\">BB{len(payload)}BHB\"\n    return struct.pack(format, *data)\ndef readCmd(reg, data=None):\n    if data is None:",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "def cmd(op, reg, data):\n    payload = [reg, len(data)] + list(data)\n    chksum = checksum(payload)\n    data = [0xDD, op] + payload + [chksum, 0x77]\n    format = f\">BB{len(payload)}BHB\"\n    return struct.pack(format, *data)\ndef readCmd(reg, data=None):\n    if data is None:\n        data = []\n    return cmd(0xA5, reg, data)",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "readCmd",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "def readCmd(reg, data=None):\n    if data is None:\n        data = []\n    return cmd(0xA5, reg, data)\ndef writeCmd(reg, data=None):\n    if data is None:\n        data = []\n    return cmd(0x5A, reg, data)\nclass LltJbdProtection(Protection):\n    def __init__(self):",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "writeCmd",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "def writeCmd(reg, data=None):\n    if data is None:\n        data = []\n    return cmd(0x5A, reg, data)\nclass LltJbdProtection(Protection):\n    def __init__(self):\n        super(LltJbdProtection, self).__init__()\n        self.voltage_cell_high = False\n        self.voltage_cell_low = False\n        self.short = False",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_ENTER_FACTORY",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_ENTER_FACTORY = 0x00\nREG_EXIT_FACTORY = 0x01\n# REG_UNKNOWN = 0x02\nREG_GENERAL = 0x03\nREG_CELL = 0x04\nREG_HARDWARE = 0x05\n# Firmware 0x16+\nREG_USE_PASSWORD = 0x06\nREG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_EXIT_FACTORY",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_EXIT_FACTORY = 0x01\n# REG_UNKNOWN = 0x02\nREG_GENERAL = 0x03\nREG_CELL = 0x04\nREG_HARDWARE = 0x05\n# Firmware 0x16+\nREG_USE_PASSWORD = 0x06\nREG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?\nREG_CLEAR_PASSWORD = 0x09",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_GENERAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_GENERAL = 0x03\nREG_CELL = 0x04\nREG_HARDWARE = 0x05\n# Firmware 0x16+\nREG_USE_PASSWORD = 0x06\nREG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?\nREG_CLEAR_PASSWORD = 0x09\nREG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CELL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CELL = 0x04\nREG_HARDWARE = 0x05\n# Firmware 0x16+\nREG_USE_PASSWORD = 0x06\nREG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?\nREG_CLEAR_PASSWORD = 0x09\nREG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_HARDWARE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_HARDWARE = 0x05\n# Firmware 0x16+\nREG_USE_PASSWORD = 0x06\nREG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?\nREG_CLEAR_PASSWORD = 0x09\nREG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_USE_PASSWORD",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_USE_PASSWORD = 0x06\nREG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?\nREG_CLEAR_PASSWORD = 0x09\nREG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_SET_PASSWORD",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_SET_PASSWORD = 0x07\n# REG_UNKNOWN2 = 0x08 - Maybe define master password?\nREG_CLEAR_PASSWORD = 0x09\nREG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CLEAR_PASSWORD",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CLEAR_PASSWORD = 0x09\nREG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_FRESET",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_FRESET = 0x0A\nREG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DESIGN_CAP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DESIGN_CAP = 0x10\nREG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CYCLE_CAP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CYCLE_CAP = 0x11\nREG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_100",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_100 = 0x12\nREG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_0",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_0 = 0x13\nREG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_SELF_DSG_RATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_SELF_DSG_RATE = 0x14\nREG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_MFG_DATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_MFG_DATE = 0x15\nREG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_SERIAL_NUM",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_SERIAL_NUM = 0x16\nREG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CYCLE_CNT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CYCLE_CNT = 0x17\nREG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHGOT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHGOT = 0x18\nREG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHGOT_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHGOT_REL = 0x19\nREG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHGUT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHGUT = 0x1A\nREG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHGUT_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHGUT_REL = 0x1B\nREG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSGOT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSGOT = 0x1C\nREG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSGOT_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSGOT_REL = 0x1D\nREG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSGUT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSGUT = 0x1E\nREG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSGUT_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSGUT_REL = 0x1F\nREG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_POVP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_POVP = 0x20\nREG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_POVP_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_POVP_REL = 0x21\nREG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_PUVP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_PUVP = 0x22\nREG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_PUVP_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_PUVP_REL = 0x23\nREG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_COVP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_COVP = 0x24\nREG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_COVP_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_COVP_REL = 0x25\nREG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CUVP",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CUVP = 0x26\nREG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CUVP_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CUVP_REL = 0x27\nREG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHGOC",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHGOC = 0x28\nREG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSGOC",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSGOC = 0x29\nREG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_BAL_START",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_BAL_START = 0x2A\nREG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_BAL_WINDOW",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_BAL_WINDOW = 0x2B\nREG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_SHUNT_RES",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_SHUNT_RES = 0x2C\nREG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_FUNC_CONFIG",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_FUNC_CONFIG = 0x2D\nREG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_NTC_CONFIG",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_NTC_CONFIG = 0x2E\nREG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CELL_CNT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CELL_CNT = 0x2F\nREG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_FET_TIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_FET_TIME = 0x30\nREG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_LED_TIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_LED_TIME = 0x31\nREG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_80",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_80 = 0x32\nREG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_60",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_60 = 0x33\nREG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_40",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_40 = 0x34\nREG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_20",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_20 = 0x35\nREG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_COVP_HIGH",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_COVP_HIGH = 0x36\nREG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CUVP_HIGH",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CUVP_HIGH = 0x37\nREG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_SC_DSGOC2",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_SC_DSGOC2 = 0x38\nREG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CXVP_HIGH_DELAY_SC_REL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CXVP_HIGH_DELAY_SC_REL = 0x39\nREG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHG_T_DELAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHG_T_DELAYS = 0x3A\nREG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSG_T_DELAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSG_T_DELAYS = 0x3B\nREG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_PACK_V_DELAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_PACK_V_DELAYS = 0x3C\nREG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42\nREG_CAP_70 = 0x43",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CELL_V_DELAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CELL_V_DELAYS = 0x3D\nREG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42\nREG_CAP_70 = 0x43\nREG_CAP_50 = 0x44",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CHGOC_DELAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CHGOC_DELAYS = 0x3E\nREG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42\nREG_CAP_70 = 0x43\nREG_CAP_50 = 0x44\nREG_CAP_30 = 0x45",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_DSGOC_DELAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_DSGOC_DELAYS = 0x3F\n# Cut-off voltage turns off GPS protection board\nREG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42\nREG_CAP_70 = 0x43\nREG_CAP_50 = 0x44\nREG_CAP_30 = 0x45\nREG_CAP_10 = 0x46",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_GPS_OFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_GPS_OFF = 0x40\n# Cut-off voltage delay for GPS protection board\nREG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42\nREG_CAP_70 = 0x43\nREG_CAP_50 = 0x44\nREG_CAP_30 = 0x45\nREG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_GPS_OFF_TIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_GPS_OFF_TIME = 0x41\nREG_CAP_90 = 0x42\nREG_CAP_70 = 0x43\nREG_CAP_50 = 0x44\nREG_CAP_30 = 0x45\nREG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers\nREG_MFGNAME = 0xA0\nREG_MODEL = 0xA1",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_90",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_90 = 0x42\nREG_CAP_70 = 0x43\nREG_CAP_50 = 0x44\nREG_CAP_30 = 0x45\nREG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers\nREG_MFGNAME = 0xA0\nREG_MODEL = 0xA1\nREG_BARCODE = 0xA2",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_70",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_70 = 0x43\nREG_CAP_50 = 0x44\nREG_CAP_30 = 0x45\nREG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers\nREG_MFGNAME = 0xA0\nREG_MODEL = 0xA1\nREG_BARCODE = 0xA2\nREG_ERROR = 0xAA",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_50",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_50 = 0x44\nREG_CAP_30 = 0x45\nREG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers\nREG_MFGNAME = 0xA0\nREG_MODEL = 0xA1\nREG_BARCODE = 0xA2\nREG_ERROR = 0xAA\n# 0xAB",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_30",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_30 = 0x45\nREG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers\nREG_MFGNAME = 0xA0\nREG_MODEL = 0xA1\nREG_BARCODE = 0xA2\nREG_ERROR = 0xAA\n# 0xAB\n# 0xAC",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_10",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_10 = 0x46\n# REG_CAP2_100 = 0x47\n# [0x48, 0x9F] - 87 registers\nREG_MFGNAME = 0xA0\nREG_MODEL = 0xA1\nREG_BARCODE = 0xA2\nREG_ERROR = 0xAA\n# 0xAB\n# 0xAC\nREG_CAL_CUR_IDLE = 0xAD",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_MFGNAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_MFGNAME = 0xA0\nREG_MODEL = 0xA1\nREG_BARCODE = 0xA2\nREG_ERROR = 0xAA\n# 0xAB\n# 0xAC\nREG_CAL_CUR_IDLE = 0xAD\nREG_CAL_CUR_CHG = 0xAE\nREG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_MODEL",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_MODEL = 0xA1\nREG_BARCODE = 0xA2\nREG_ERROR = 0xAA\n# 0xAB\n# 0xAC\nREG_CAL_CUR_IDLE = 0xAD\nREG_CAL_CUR_CHG = 0xAE\nREG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_BARCODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_BARCODE = 0xA2\nREG_ERROR = 0xAA\n# 0xAB\n# 0xAC\nREG_CAL_CUR_IDLE = 0xAD\nREG_CAL_CUR_CHG = 0xAE\nREG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_ERROR = 0xAA\n# 0xAB\n# 0xAC\nREG_CAL_CUR_IDLE = 0xAD\nREG_CAL_CUR_CHG = 0xAE\nREG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_CUR_IDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_CUR_IDLE = 0xAD\nREG_CAL_CUR_CHG = 0xAE\nREG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_CUR_CHG",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_CUR_CHG = 0xAE\nREG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_CUR_DSG",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_CUR_DSG = 0xAF\nREG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_01",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_01 = 0xB0\nREG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_02",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_02 = 0xB1\nREG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_03",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_03 = 0xB2\nREG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_04",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_04 = 0xB3\nREG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_05",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_05 = 0xB4\nREG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_06",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_06 = 0xB5\nREG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_07",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_07 = 0xB6\nREG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_08",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_08 = 0xB7\nREG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_09",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_09 = 0xB8\nREG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_10",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_10 = 0xB9\nREG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_11",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_11 = 0xBA\nREG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_12",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_12 = 0xBB\nREG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_13",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_13 = 0xBC\nREG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_14",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_14 = 0xBD\nREG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_15",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_15 = 0xBE\nREG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_16",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_16 = 0xBF\nREG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_17",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_17 = 0xC0\nREG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_18",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_18 = 0xC1\nREG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_19",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_19 = 0xC2\nREG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_20",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_20 = 0xC3\nREG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_21",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_21 = 0xC4\nREG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_22",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_22 = 0xC5\nREG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_23",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_23 = 0xC6\nREG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_24",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_24 = 0xC7\nREG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_25",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_25 = 0xC8\nREG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_26",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_26 = 0xC9\nREG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_27",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_27 = 0xCA\nREG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_28",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_28 = 0xCB\nREG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_29",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_29 = 0xCC\nREG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_30",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_30 = 0xCD\nREG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_31",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_31 = 0xCE\nREG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_V_CELL_32",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_V_CELL_32 = 0xCF\nREG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_0",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_0 = 0xD0\nREG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_1",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_1 = 0xD1\nREG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_2",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_2 = 0xD2\nREG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_3",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_3 = 0xD3\nREG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_4",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_4 = 0xD4\nREG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_5",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_5 = 0xD5\nREG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_6",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_6 = 0xD6\nREG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAL_T_NTC_7",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAL_T_NTC_7 = 0xD7\nREG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CAP_REMAINING",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CAP_REMAINING = 0xE0\nREG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CTRL_MOSFET",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CTRL_MOSFET = 0xE1\nREG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_CTRL_BALANCE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_CTRL_BALANCE = 0xE2\nREG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover\nFUNC_LOAD_EN = 0x0002  # bit 1",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "REG_RESET",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "REG_RESET = 0xE3\n# Protocol commands\nCMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover\nFUNC_LOAD_EN = 0x0002  # bit 1\n# Enable balancer function",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "CMD_ENTER_FACTORY_MODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "CMD_ENTER_FACTORY_MODE = b\"\\x56\\x78\"\nCMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover\nFUNC_LOAD_EN = 0x0002  # bit 1\n# Enable balancer function\nFUNC_BALANCE_EN = 0x0004  # bit 2\n# Charge balance, only turn on balance when charging",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "CMD_EXIT_FACTORY_MODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "CMD_EXIT_FACTORY_MODE = b\"\\x00\\x00\"\nCMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover\nFUNC_LOAD_EN = 0x0002  # bit 1\n# Enable balancer function\nFUNC_BALANCE_EN = 0x0004  # bit 2\n# Charge balance, only turn on balance when charging\nFUNC_BALANCE_CHARGING_ONLY = 0x0008  # bit 3",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "CMD_EXIT_AND_SAVE_FACTORY_MODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "CMD_EXIT_AND_SAVE_FACTORY_MODE = b\"\\x28\\x28\"\n# Weak current switch function\nFUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover\nFUNC_LOAD_EN = 0x0002  # bit 1\n# Enable balancer function\nFUNC_BALANCE_EN = 0x0004  # bit 2\n# Charge balance, only turn on balance when charging\nFUNC_BALANCE_CHARGING_ONLY = 0x0008  # bit 3\n# LED power indicator function",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_SW_EN",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_SW_EN = 0x0001  # bit 0\n# Load lock function used to disconnect the load when short circuit is required to recover\nFUNC_LOAD_EN = 0x0002  # bit 1\n# Enable balancer function\nFUNC_BALANCE_EN = 0x0004  # bit 2\n# Charge balance, only turn on balance when charging\nFUNC_BALANCE_CHARGING_ONLY = 0x0008  # bit 3\n# LED power indicator function\nFUNC_LED = 0x0010  # bit 4\n# Compatible with LED modes",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_LOAD_EN",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_LOAD_EN = 0x0002  # bit 1\n# Enable balancer function\nFUNC_BALANCE_EN = 0x0004  # bit 2\n# Charge balance, only turn on balance when charging\nFUNC_BALANCE_CHARGING_ONLY = 0x0008  # bit 3\n# LED power indicator function\nFUNC_LED = 0x0010  # bit 4\n# Compatible with LED modes\nFUNC_LED_NUM = 0x0020  # bit 5\n# With history recording",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_BALANCE_EN",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_BALANCE_EN = 0x0004  # bit 2\n# Charge balance, only turn on balance when charging\nFUNC_BALANCE_CHARGING_ONLY = 0x0008  # bit 3\n# LED power indicator function\nFUNC_LED = 0x0010  # bit 4\n# Compatible with LED modes\nFUNC_LED_NUM = 0x0020  # bit 5\n# With history recording\nFUNC_RTC = 0x0040  # bit 6\n# whether it is necessary to set the range when it is currently used for FCC update",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_BALANCE_CHARGING_ONLY",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_BALANCE_CHARGING_ONLY = 0x0008  # bit 3\n# LED power indicator function\nFUNC_LED = 0x0010  # bit 4\n# Compatible with LED modes\nFUNC_LED_NUM = 0x0020  # bit 5\n# With history recording\nFUNC_RTC = 0x0040  # bit 6\n# whether it is necessary to set the range when it is currently used for FCC update\nFUNC_EDV = 0x0080  # bit 7\n# Additional GPS protection board is connected",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_LED",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_LED = 0x0010  # bit 4\n# Compatible with LED modes\nFUNC_LED_NUM = 0x0020  # bit 5\n# With history recording\nFUNC_RTC = 0x0040  # bit 6\n# whether it is necessary to set the range when it is currently used for FCC update\nFUNC_EDV = 0x0080  # bit 7\n# Additional GPS protection board is connected\nFUNC_GPS_EN = 0x0100  # bit 8\n# Enable onboard buzzer / GPS protection board buzzer?",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_LED_NUM",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_LED_NUM = 0x0020  # bit 5\n# With history recording\nFUNC_RTC = 0x0040  # bit 6\n# whether it is necessary to set the range when it is currently used for FCC update\nFUNC_EDV = 0x0080  # bit 7\n# Additional GPS protection board is connected\nFUNC_GPS_EN = 0x0100  # bit 8\n# Enable onboard buzzer / GPS protection board buzzer?\nFUNC_BUZZER_EN = 0x0200  # bit 9\ndef checksum(payload):",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_RTC",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_RTC = 0x0040  # bit 6\n# whether it is necessary to set the range when it is currently used for FCC update\nFUNC_EDV = 0x0080  # bit 7\n# Additional GPS protection board is connected\nFUNC_GPS_EN = 0x0100  # bit 8\n# Enable onboard buzzer / GPS protection board buzzer?\nFUNC_BUZZER_EN = 0x0200  # bit 9\ndef checksum(payload):\n    return (0x10000 - sum(payload)) % 0x10000\ndef cmd(op, reg, data):",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_EDV",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_EDV = 0x0080  # bit 7\n# Additional GPS protection board is connected\nFUNC_GPS_EN = 0x0100  # bit 8\n# Enable onboard buzzer / GPS protection board buzzer?\nFUNC_BUZZER_EN = 0x0200  # bit 9\ndef checksum(payload):\n    return (0x10000 - sum(payload)) % 0x10000\ndef cmd(op, reg, data):\n    payload = [reg, len(data)] + list(data)\n    chksum = checksum(payload)",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_GPS_EN",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_GPS_EN = 0x0100  # bit 8\n# Enable onboard buzzer / GPS protection board buzzer?\nFUNC_BUZZER_EN = 0x0200  # bit 9\ndef checksum(payload):\n    return (0x10000 - sum(payload)) % 0x10000\ndef cmd(op, reg, data):\n    payload = [reg, len(data)] + list(data)\n    chksum = checksum(payload)\n    data = [0xDD, op] + payload + [chksum, 0x77]\n    format = f\">BB{len(payload)}BHB\"",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "FUNC_BUZZER_EN",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd",
        "description": "dbus-serialbattery.bms.lltjbd",
        "peekOfCode": "FUNC_BUZZER_EN = 0x0200  # bit 9\ndef checksum(payload):\n    return (0x10000 - sum(payload)) % 0x10000\ndef cmd(op, reg, data):\n    payload = [reg, len(data)] + list(data)\n    chksum = checksum(payload)\n    data = [0xDD, op] + payload + [chksum, 0x77]\n    format = f\">BB{len(payload)}BHB\"\n    return struct.pack(format, *data)\ndef readCmd(reg, data=None):",
        "detail": "dbus-serialbattery.bms.lltjbd",
        "documentation": {}
    },
    {
        "label": "LltJbd_Ble",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.lltjbd_ble",
        "description": "dbus-serialbattery.bms.lltjbd_ble",
        "peekOfCode": "class LltJbd_Ble(LltJbd):\n    BATTERYTYPE = \"LLT/JBD BLE\"\n    def __init__(self, port: Optional[str], baud: Optional[int], address: str):\n        super(LltJbd_Ble, self).__init__(port, -1, address)\n        self.address = address\n        self.protection = LltJbdProtection()\n        self.type = self.BATTERYTYPE\n        self.main_thread = threading.current_thread()\n        self.data: bytearray = bytearray()\n        self.run = True",
        "detail": "dbus-serialbattery.bms.lltjbd_ble",
        "documentation": {}
    },
    {
        "label": "BLE_SERVICE_UUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd_ble",
        "description": "dbus-serialbattery.bms.lltjbd_ble",
        "peekOfCode": "BLE_SERVICE_UUID = \"0000ff00-0000-1000-8000-00805f9b34fb\"\nBLE_CHARACTERISTICS_TX_UUID = \"0000ff02-0000-1000-8000-00805f9b34fb\"\nBLE_CHARACTERISTICS_RX_UUID = \"0000ff01-0000-1000-8000-00805f9b34fb\"\nMIN_RESPONSE_SIZE = 6\nMAX_RESPONSE_SIZE = 256\nclass LltJbd_Ble(LltJbd):\n    BATTERYTYPE = \"LLT/JBD BLE\"\n    def __init__(self, port: Optional[str], baud: Optional[int], address: str):\n        super(LltJbd_Ble, self).__init__(port, -1, address)\n        self.address = address",
        "detail": "dbus-serialbattery.bms.lltjbd_ble",
        "documentation": {}
    },
    {
        "label": "BLE_CHARACTERISTICS_TX_UUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd_ble",
        "description": "dbus-serialbattery.bms.lltjbd_ble",
        "peekOfCode": "BLE_CHARACTERISTICS_TX_UUID = \"0000ff02-0000-1000-8000-00805f9b34fb\"\nBLE_CHARACTERISTICS_RX_UUID = \"0000ff01-0000-1000-8000-00805f9b34fb\"\nMIN_RESPONSE_SIZE = 6\nMAX_RESPONSE_SIZE = 256\nclass LltJbd_Ble(LltJbd):\n    BATTERYTYPE = \"LLT/JBD BLE\"\n    def __init__(self, port: Optional[str], baud: Optional[int], address: str):\n        super(LltJbd_Ble, self).__init__(port, -1, address)\n        self.address = address\n        self.protection = LltJbdProtection()",
        "detail": "dbus-serialbattery.bms.lltjbd_ble",
        "documentation": {}
    },
    {
        "label": "BLE_CHARACTERISTICS_RX_UUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd_ble",
        "description": "dbus-serialbattery.bms.lltjbd_ble",
        "peekOfCode": "BLE_CHARACTERISTICS_RX_UUID = \"0000ff01-0000-1000-8000-00805f9b34fb\"\nMIN_RESPONSE_SIZE = 6\nMAX_RESPONSE_SIZE = 256\nclass LltJbd_Ble(LltJbd):\n    BATTERYTYPE = \"LLT/JBD BLE\"\n    def __init__(self, port: Optional[str], baud: Optional[int], address: str):\n        super(LltJbd_Ble, self).__init__(port, -1, address)\n        self.address = address\n        self.protection = LltJbdProtection()\n        self.type = self.BATTERYTYPE",
        "detail": "dbus-serialbattery.bms.lltjbd_ble",
        "documentation": {}
    },
    {
        "label": "MIN_RESPONSE_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd_ble",
        "description": "dbus-serialbattery.bms.lltjbd_ble",
        "peekOfCode": "MIN_RESPONSE_SIZE = 6\nMAX_RESPONSE_SIZE = 256\nclass LltJbd_Ble(LltJbd):\n    BATTERYTYPE = \"LLT/JBD BLE\"\n    def __init__(self, port: Optional[str], baud: Optional[int], address: str):\n        super(LltJbd_Ble, self).__init__(port, -1, address)\n        self.address = address\n        self.protection = LltJbdProtection()\n        self.type = self.BATTERYTYPE\n        self.main_thread = threading.current_thread()",
        "detail": "dbus-serialbattery.bms.lltjbd_ble",
        "documentation": {}
    },
    {
        "label": "MAX_RESPONSE_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.lltjbd_ble",
        "description": "dbus-serialbattery.bms.lltjbd_ble",
        "peekOfCode": "MAX_RESPONSE_SIZE = 256\nclass LltJbd_Ble(LltJbd):\n    BATTERYTYPE = \"LLT/JBD BLE\"\n    def __init__(self, port: Optional[str], baud: Optional[int], address: str):\n        super(LltJbd_Ble, self).__init__(port, -1, address)\n        self.address = address\n        self.protection = LltJbdProtection()\n        self.type = self.BATTERYTYPE\n        self.main_thread = threading.current_thread()\n        self.data: bytearray = bytearray()",
        "detail": "dbus-serialbattery.bms.lltjbd_ble",
        "documentation": {}
    },
    {
        "label": "MNBProtection",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.mnb",
        "description": "dbus-serialbattery.bms.mnb",
        "peekOfCode": "class MNBProtection(Protection):\n    def __init__(self):\n        super(MNBProtection, self).__init__()\n        self.voltage_cell_high = False\n        self.voltage_cell_low = False\n        self.short = False\n        self.IC_inspection = False\n        self.software_lock = False\n    def set_voltage_cell_high(self, value):\n        self.voltage_cell_high = value",
        "detail": "dbus-serialbattery.bms.mnb",
        "documentation": {}
    },
    {
        "label": "MNB",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.mnb",
        "description": "dbus-serialbattery.bms.mnb",
        "peekOfCode": "class MNB(Battery):\n    def __init__(self, port, baud, address=0):\n        super(MNB, self).__init__(port, baud, address)\n        self.protection = MNBProtection()\n        self.hardware_version = 1.02\n        self.voltage = 26\n        self.charger_connected = None\n        self.load_connected = None\n        self.address = address\n        self.cell_min_voltage = 3.3",
        "detail": "dbus-serialbattery.bms.mnb",
        "documentation": {}
    },
    {
        "label": "init_spi",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def init_spi():\n    global spi, Q_time, Q_Batt, Q_B_chg, kWh_dis, kWh_chg, cum_bp_kwh_in, cum_bp_kwh_out, Q_B_dis, Q_nom, SOH, R_shunt, Vt_ref, V_bat_Sum, Ai, Ai_offs, Tj, Tbat, bal_stat, bal_stat2, p_genrun, p_charging, p_loadshed, Fan_run_b, V_Cells, Ah_b_max, Ah_b_min, T_Cells, err_no, Q_Cycles, bal_count, chg_out, load_out, Genrun, Fan_run\n    # temp home for BMS constants\n    err_no = 0\n    Q_time = 0\n    Q_Batt = 1.8 * 60\n    Q_B_chg = 0\n    Q_Cycles = 0\n    kWh_dis = 0\n    kWh_chg = 0",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "CrcA_MAX17",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def CrcA_MAX17(InputWord, WORD_LEN):\n    CRC_LEN = 3\n    CRC_POLY = 0x0B\n    CRC_SEED = 0x000\n    CRCMask = CRC_POLY << (WORD_LEN - 1)\n    LeftAlignedWord = InputWord << CRC_LEN  # /* Clear the CRC bit in the data frame*/\n    TestBitMask = 1 << (WORD_LEN + 2)\n    BitCount = WORD_LEN\n    while 0 != BitCount:\n        BitCount -= 1",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "spi_xfer_MAX17",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def spi_xfer_MAX17(RW, Adr, xdata):\n    global spi\n    # *********************\n    # Python 2.7 can't cope with 32 bit numbers\n    # ****************************\n    print(\"SPI:\", RW, \"{:02x}\".format(Adr), \"{:04x}\".format(xdata))\n    return (0, 0, Adr, xdata, 0, 0)\n    txdata = [0, 0, 0, 0]\n    rxdata = [0, 0, 0, 0]\n    tdwd = RW << 8 ^ Adr",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "init_max",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def init_max(self):\n    # *************************************8\n    # need to pick up cell min and max to set cell voltage\n    # thresholds et al.\n    # ********************************************8\n    init_spi()\n    time.sleep(0.1)\n    for i in range(1, 7):\n        spi_xfer_MAX17(0, i, 0x00)  # clear por\n    spi_xfer_MAX17(0, 0x14, 0x02)  # set spi int on AL out",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "xtemperature",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def xtemperature(temp):\n    t = temp + 12.74\n    s = math.exp(0.01988 * t)\n    r = int(0x3FFF / s)\n    return r\ndef vblk_dec(xdata, ref, adr):\n    global V_bat_Sum, VBS_max, VBS_min, min_rst_en, Q_Batt\n    vblock = xdata * ref\n    if adr == 22:\n        V_bat_Sum = vblock",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "vblk_dec",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def vblk_dec(xdata, ref, adr):\n    global V_bat_Sum, VBS_max, VBS_min, min_rst_en, Q_Batt\n    vblock = xdata * ref\n    if adr == 22:\n        V_bat_Sum = vblock\n    return vblock\ndef stat_scan(self):\n    for i in range(2, 0x17):  # Read Status\n        f = spi_xfer_MAX17(1, i, 0x0)\n        if i == 2:",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "stat_scan",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def stat_scan(self):\n    for i in range(2, 0x17):  # Read Status\n        f = spi_xfer_MAX17(1, i, 0x0)\n        if i == 2:\n            st_wd1 = f[3]\n        if i == 3:\n            st_wd2 = f[3]\n        if i == 5:\n            fema1 = f[3]\n    for i in range(2, 7):  # Write stat 1:3, Fema to clear",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "err_dec",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def err_dec(st_wd1, st_wd2, fema1, self):\n    global err_no, err_msg\n    if st_wd1 & 0x04 > 0:\n        err_no = 11\n        err_msg = \"Bal Error?\"\n    if st_wd1 & 0x8 > 0:\n        err_no = 10\n        err_msg = \"Cal Error\"\n    if st_wd1 & 0x10 > 0 and st_wd2 & 0xD0 > 0:\n        err_no = 9",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "v_cell_d",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def v_cell_d(self):\n    global vc_del, vc_min, vc_max, Q_Batt, V_Cells, p_genrun, p_charging, p_loadshed\n    vc_del = 0\n    vc_max = 0\n    vc_min = 4\n    i_min = 0\n    i_max = 0\n    b_lim = False\n    for index, v in enumerate(V_Cells):\n        if v > 3.55:",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "CSA",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def CSA(xdata, self):\n    global R_shunt, Ai, Ai_offs\n    Ai = (xdata * 0.000305 - 2.5) / R_shunt + Ai_offs\n    self.current = Ai\n    calc_Ah(Ai, self)\n    return Ai\ndef calc_Ah(Ai, self):\n    global Q_Batt, Q_time, Q_B_chg, Q_B_dis, Ah_b_max, Ah_b_min, x_soc_min, x_soc_max, x_Soc, Q_nom, SOH, kWh_chg, kWh_dis, V_bat_Sum, cum_bp_kwh_in, cum_bp_kwh_out, p_genrun, Q_Cycles\n    if Q_time == 0:\n        Q_time = time.time()",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "calc_Ah",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def calc_Ah(Ai, self):\n    global Q_Batt, Q_time, Q_B_chg, Q_B_dis, Ah_b_max, Ah_b_min, x_soc_min, x_soc_max, x_Soc, Q_nom, SOH, kWh_chg, kWh_dis, V_bat_Sum, cum_bp_kwh_in, cum_bp_kwh_out, p_genrun, Q_Cycles\n    if Q_time == 0:\n        Q_time = time.time()\n    t_Q = time.time()\n    d_Qt = t_Q - Q_time\n    Q_time = t_Q\n    dQ_Batt = Ai * d_Qt / 3600\n    Q_Batt += dQ_Batt\n    if Q_Batt > Q_nom:",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "gpio_decode",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def gpio_decode(xdata, adr, self):\n    # need to add Dbus channel for device temp\n    global Vt_ref, Tbat, T_Cells\n    try:\n        s = float(0x3FFF) / float(xdata + 1)\n        t = math.log(s)\n        u = t / 0.01998\n        T_Cells[adr] = u - 12.74\n    except Exception as e:\n        print(\"gpio_dec\", e)",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "cell_balance",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def cell_balance(V_Cells, vc_min, vc_max, self):\n    global bal_count, bal_stat, bal_stat2\n    # need to add dbus channel for displaing balancing as 8 bit bianry?\n    #    f = spi_xfer_MAX17(1,0x80,0x00)\n    #   bal_stat = f[3]>>14\n    bal_stat = 0\n    if bal_stat == 3:\n        spi_xfer_MAX17(0, 0x80, 0x0)\n        spi_xfer_MAX17(0, 0x6F, 0x00)\n        print(\"bal reset\")",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "R_bal_stat",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def R_bal_stat():\n    for i in range(0x6F, 0x84):\n        f = spi_xfer_MAX17(1, i, 0x00)\n        print(\"{:02x}\".format(i), \"{:04x}\".format(f[3]), \"{:02x}\".format(f[0]))\n    return ()\ndef stat_clr():\n    for i in range(2, 7):\n        spi_xfer_MAX17(0, i, 0)\n    return ()\ndef die_temperature():",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "stat_clr",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def stat_clr():\n    for i in range(2, 7):\n        spi_xfer_MAX17(0, i, 0)\n    return ()\ndef die_temperature():\n    return 35\n    global Tj, tmaxp, Fan_run_b\n    f = spi_xfer_MAX17(1, 0x57, 0)  # read diag 1 register\n    Vptat = f[3] >> 2\n    Vptat = Vptat / 0x4000 * 2.3077",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "die_temperature",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def die_temperature():\n    return 35\n    global Tj, tmaxp, Fan_run_b\n    f = spi_xfer_MAX17(1, 0x57, 0)  # read diag 1 register\n    Vptat = f[3] >> 2\n    Vptat = Vptat / 0x4000 * 2.3077\n    Tj = Vptat / 0.0032 + 8.3 - 273\n    self.temperature_4 = Tj\n    if Tj > 45:\n        Fan_run_b = True",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "inpins",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def inpins(self):\n    global chg_in, Load_in, Genrun, Fan_run_b, chg_out, p_loadshed, p_charging, p_genrun\n    if p_charging == True:\n        self.charge_fet = True\n        chg_out.on()\n    else:\n        self.charge_fet = False\n        chg_out.off()\n    if p_loadshed == False:\n        self.discharge_fet = True",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "data_cycle",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_test_max17853",
        "description": "dbus-serialbattery.bms.mnb_test_max17853",
        "peekOfCode": "def data_cycle(self):\n    global err_no, V_Cells, T_Cells, vc_max\n    # print(\"data_cycle\")\n    spi_xfer_MAX17(0, 0x66, 0xE21)\n    # f = spi_xfer_MAX17(1,0x66,0x00)\n    # scn_dn = f[3]>>15\n    # dat_rdy = (f[3]&0x2000)>>13\n    dat_rdy = 1  # test\n    while dat_rdy == 0:\n        f = spi_xfer_MAX17(1, 0x66, 0x00)",
        "detail": "dbus-serialbattery.bms.mnb_test_max17853",
        "documentation": {}
    },
    {
        "label": "init_spi",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def init_spi(self):\n    global spi, Q_time, Q_Batt, Q_B_chg, kWh_dis, kWh_chg, cum_bp_kwh_in, cum_bp_kwh_out, Q_B_dis, Q_nom, SOH, R_shunt, Vt_ref, V_bat_Sum, Ai, Ai_offs, Tj, Tbat, bal_stat, bal_stat2, p_genrun, p_charging, p_loadshed, Fan_run_b, V_Cells, Ah_b_max, Ah_b_min, T_Cells, err_no, Q_Cycles, bal_count, chg_out, load_out, Genrun, Fan_run\n    # temp home for BMS constants\n    err_no = 0\n    Q_time = 0\n    Q_Batt = 0.5 * self.inst_capacity\n    Q_B_chg = 0\n    Q_Cycles = 0\n    kWh_dis = 0\n    kWh_chg = 0",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "CrcA_MAX17",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def CrcA_MAX17(InputWord, WORD_LEN):\n    CRC_LEN = 3\n    CRC_POLY = 0x0B\n    CRC_SEED = 0x000\n    CRCMask = CRC_POLY << (WORD_LEN - 1)\n    # /* Clear the CRC bit in the data frame*/\n    LeftAlignedWord = InputWord << CRC_LEN\n    TestBitMask = 1 << (WORD_LEN + 2)\n    BitCount = WORD_LEN\n    while 0 != BitCount:",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "spi_xfer_MAX17",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def spi_xfer_MAX17(RW, Adr, xdata):\n    global spi\n    # *********************\n    # Python 2.7 can't cope with 32 bit numbers\n    # ****************************\n    txdata = [0, 0, 0, 0]\n    rxdata = [0, 0, 0, 0]\n    tdwd = RW << 8 ^ Adr\n    crca = CrcA_MAX17(tdwd, 9)\n    crcb = CrcA_MAX17(xdata, 16)",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "init_max",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def init_max(self):\n    # *************************************8\n    # cell and battery parameters picked from get_settings()\n    # ********************************************8\n    init_spi(self)\n    time.sleep(0.1)\n    for i in range(1, 7):\n        spi_xfer_MAX17(0, i, 0x00)  # clear por\n    spi_xfer_MAX17(0, 0x14, 0x02)  # set spi int on AL out\n    spi_xfer_MAX17(0, 0x15, 0x04)  # disable spi to",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "xtemperature",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def xtemperature(temp):\n    t = temp + 12.74\n    s = math.exp(0.01988 * t)\n    r = int(0x3FFF / s)\n    return r\ndef vblk_dec(xdata, ref, adr):\n    global V_bat_Sum, VBS_max, VBS_min, min_rst_en, Q_Batt\n    vblock = xdata * ref\n    # print(adr,\"{:04x}\".format(xdata),vblock)\n    if adr == 22:",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "vblk_dec",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def vblk_dec(xdata, ref, adr):\n    global V_bat_Sum, VBS_max, VBS_min, min_rst_en, Q_Batt\n    vblock = xdata * ref\n    # print(adr,\"{:04x}\".format(xdata),vblock)\n    if adr == 22:\n        V_bat_Sum = vblock\n    return vblock\ndef stat_scan(self):\n    for i in range(2, 0x17):  # Read Status\n        f = spi_xfer_MAX17(1, i, 0x0)",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "stat_scan",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def stat_scan(self):\n    for i in range(2, 0x17):  # Read Status\n        f = spi_xfer_MAX17(1, i, 0x0)\n        if i == 2:\n            st_wd1 = f[3]\n        if i == 3:\n            st_wd2 = f[3]\n        if i == 5:\n            fema1 = f[3]\n    for i in range(2, 7):  # Write stat 1:3, Fema to clear",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "err_dec",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def err_dec(st_wd1, st_wd2, fema1, self):\n    global err_no, err_msg\n    if st_wd1 & 0x04 > 0:\n        err_no = 11\n        err_msg = \"Bal Error?\"\n    if st_wd1 & 0x8 > 0:\n        err_no = 10\n        err_msg = \"Cal Error\"\n    if st_wd1 & 0x10 > 0 and st_wd2 & 0xD0 > 0:\n        err_no = 9",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "v_cell_d",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def v_cell_d(self):\n    global vc_del, vc_min, vc_max, Q_Batt, V_Cells, p_genrun, p_charging, p_loadshed\n    vc_del = 0\n    vc_max = 0\n    vc_min = 4\n    i_min = 0\n    i_max = 0\n    b_lim = False\n    for index, v in enumerate(V_Cells):\n        if v > 3.55:",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "CSA",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def CSA(xdata, self):\n    global R_shunt, Ai, Ai_offs\n    Ai = (xdata * 0.000305 - 2.5) / R_shunt + Ai_offs\n    self.current = Ai\n    calc_Ah(Ai, self)\n    return Ai\ndef calc_Ah(Ai, self):\n    global Q_Batt, Q_time, Q_B_chg, Q_B_dis, Ah_b_max, Ah_b_min, x_soc_min, x_soc_max, x_Soc, Q_nom, SOH, kWh_chg, kWh_dis, V_bat_Sum, cum_bp_kwh_in, cum_bp_kwh_out, p_genrun, Q_Cycles\n    if Q_time == 0:\n        Q_time = time.time()",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "calc_Ah",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def calc_Ah(Ai, self):\n    global Q_Batt, Q_time, Q_B_chg, Q_B_dis, Ah_b_max, Ah_b_min, x_soc_min, x_soc_max, x_Soc, Q_nom, SOH, kWh_chg, kWh_dis, V_bat_Sum, cum_bp_kwh_in, cum_bp_kwh_out, p_genrun, Q_Cycles\n    if Q_time == 0:\n        Q_time = time.time()\n    t_Q = time.time()\n    d_Qt = t_Q - Q_time\n    Q_time = t_Q\n    dQ_Batt = Ai * d_Qt / 3600\n    Q_Batt += dQ_Batt\n    if Q_Batt > Q_nom:",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "gpio_decode",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def gpio_decode(xdata, adr, self):\n    # need to add Dbus channel for device temp\n    global Vt_ref, Tbat, T_Cells\n    try:\n        s = float(0x3FFF) / float(xdata + 1)\n        t = math.log(s)\n        u = t / 0.01998\n        T_Cells[adr] = u - 12.74\n    except Exception as e:\n        print(\"gpio_dec\", e)",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "cell_balance",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def cell_balance(V_Cells, vc_min, vc_max, self):\n    global bal_count, bal_stat, bal_stat2\n    # need to add dbus channel for displaing balancing as 8 bit bianry?\n    f = spi_xfer_MAX17(1, 0x80, 0x00)\n    bal_stat = f[3] >> 14\n    if bal_stat == 3:\n        spi_xfer_MAX17(0, 0x80, 0x0)\n        spi_xfer_MAX17(0, 0x6F, 0x00)\n        print(\"bal reset\")\n        return ()",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "R_bal_stat",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def R_bal_stat():\n    for i in range(0x6F, 0x84):\n        f = spi_xfer_MAX17(1, i, 0x00)\n        print(\"{:02x}\".format(i), \"{:04x}\".format(f[3]), \"{:02x}\".format(f[0]))\n    return ()\ndef stat_clr():\n    for i in range(2, 7):\n        spi_xfer_MAX17(0, i, 0)\n    return ()\ndef die_temperature(self):",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "stat_clr",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def stat_clr():\n    for i in range(2, 7):\n        spi_xfer_MAX17(0, i, 0)\n    return ()\ndef die_temperature(self):\n    global Tj, tmaxp, Fan_run_b\n    f = spi_xfer_MAX17(1, 0x57, 0)  # read diag 1 register\n    Vptat = f[3] >> 2\n    Vptat = Vptat / 0x4000 * 2.3077\n    Tj = Vptat / 0.0032 + 8.3 - 273",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "die_temperature",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def die_temperature(self):\n    global Tj, tmaxp, Fan_run_b\n    f = spi_xfer_MAX17(1, 0x57, 0)  # read diag 1 register\n    Vptat = f[3] >> 2\n    Vptat = Vptat / 0x4000 * 2.3077\n    Tj = Vptat / 0.0032 + 8.3 - 273\n    self.temperature_4 = Tj\n    if Tj > 45:\n        Fan_run_b = True\n    elif Tj < 40:",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "inpins",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def inpins(self):\n    global chg_in, Load_in, Genrun, Fan_run_b, chg_out, p_loadshed, p_charging, p_genrun\n    if p_charging == True:\n        self.charge_fet = True\n        chg_out.on()\n    else:\n        self.charge_fet = False\n        chg_out.off()\n    if p_loadshed == False:\n        self.discharge_fet = True",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "data_cycle",
        "kind": 2,
        "importPath": "dbus-serialbattery.bms.mnb_utils_max17853",
        "description": "dbus-serialbattery.bms.mnb_utils_max17853",
        "peekOfCode": "def data_cycle(self):\n    global err_no, T_Cells, vc_max\n    # print(\"data_cycle\")\n    spi_xfer_MAX17(0, 0x66, 0xE21)\n    f = spi_xfer_MAX17(1, 0x66, 0x00)\n    scn_dn = f[3] >> 15\n    dat_rdy = (f[3] & 0x2000) >> 13\n    while dat_rdy == 0:\n        f = spi_xfer_MAX17(1, 0x66, 0x00)\n        time.sleep(0.005)",
        "detail": "dbus-serialbattery.bms.mnb_utils_max17853",
        "documentation": {}
    },
    {
        "label": "Pace",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.pace",
        "description": "dbus-serialbattery.bms.pace",
        "peekOfCode": "class Pace(Battery):\n    def __init__(self, port, baud, address):\n        super(Pace, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.unique_identifier_tmp = \"\"\n        self.cell_count = 0\n        self.address = address\n        self.poll_interval = 5000\n        self.cell_voltage_lp = 0.9\n    BATTERYTYPE = \"PACE RS232\"",
        "detail": "dbus-serialbattery.bms.pace",
        "documentation": {}
    },
    {
        "label": "Renogy",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.renogy",
        "description": "dbus-serialbattery.bms.renogy",
        "peekOfCode": "class Renogy(Battery):\n    def __init__(self, port, baud, address):\n        super(Renogy, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        # The RBT100LFP12SH-G1 uses 0xF7, another battery uses 0x30\n        self.address = address\n    BATTERYTYPE = \"Renogy\"\n    LENGTH_CHECK = 4\n    LENGTH_POS = 2\n    # command bytes [Address field][Function code (03 = Read register)]",
        "detail": "dbus-serialbattery.bms.renogy",
        "documentation": {}
    },
    {
        "label": "Revov",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.revov",
        "description": "dbus-serialbattery.bms.revov",
        "peekOfCode": "class Revov(Battery):\n    def __init__(self, port, baud, address):\n        super(Revov, self).__init__(port, baud, address)\n        self.type = self.BATTERYTYPE\n        self.soc = 100\n        self.voltage = None\n        self.current = None\n        self.cell_min_voltage = None\n        self.cell_max_voltage = None\n        self.cell_min_no = None",
        "detail": "dbus-serialbattery.bms.revov",
        "documentation": {}
    },
    {
        "label": "Seplos",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.seplos",
        "description": "dbus-serialbattery.bms.seplos",
        "peekOfCode": "class Seplos(Battery):\n    def __init__(self, port, baud, address):\n        super(Seplos, self).__init__(port, baud, address)\n        self.address = address\n        self.type = self.BATTERYTYPE\n        self.poll_interval = 5000\n        self.history.exclude_values_to_calculate = [\"charge_cycles\"]\n    BATTERYTYPE = \"Seplos\"\n    COMMAND_STATUS = 0x42\n    COMMAND_ALARM = 0x44",
        "detail": "dbus-serialbattery.bms.seplos",
        "documentation": {}
    },
    {
        "label": "Seplosv3",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.seplosv3",
        "description": "dbus-serialbattery.bms.seplosv3",
        "peekOfCode": "class Seplosv3(Battery):\n    def __init__(self, port, baud, address):\n        super(Seplosv3, self).__init__(port, baud, address)\n        self.type = \"Seplos v3\"\n        self.serialnumber = \"\"\n        self.mbdev: Union[minimalmodbus.Instrument, None] = None\n        if address is not None and len(address) > 0:\n            self.slaveaddress: int = int(address)\n            self.slaveaddresses: list[int] = [self.slaveaddress]\n        else:",
        "detail": "dbus-serialbattery.bms.seplosv3",
        "documentation": {}
    },
    {
        "label": "RETRYCNT",
        "kind": 5,
        "importPath": "dbus-serialbattery.bms.seplosv3",
        "description": "dbus-serialbattery.bms.seplosv3",
        "peekOfCode": "RETRYCNT = 3\nclass Seplosv3(Battery):\n    def __init__(self, port, baud, address):\n        super(Seplosv3, self).__init__(port, baud, address)\n        self.type = \"Seplos v3\"\n        self.serialnumber = \"\"\n        self.mbdev: Union[minimalmodbus.Instrument, None] = None\n        if address is not None and len(address) > 0:\n            self.slaveaddress: int = int(address)\n            self.slaveaddresses: list[int] = [self.slaveaddress]",
        "detail": "dbus-serialbattery.bms.seplosv3",
        "documentation": {}
    },
    {
        "label": "Sinowealth",
        "kind": 6,
        "importPath": "dbus-serialbattery.bms.sinowealth",
        "description": "dbus-serialbattery.bms.sinowealth",
        "peekOfCode": "class Sinowealth(Battery):\n    def __init__(self, port, baud, address):\n        super(Sinowealth, self).__init__(port, baud, address)\n        self.poll_interval = 2000\n        self.type = self.BATTERYTYPE\n        self.history.exclude_values_to_calculate = [\"charge_cycles\"]\n        self.temperature_sensors = None\n    # command bytes [StartFlag=0A][Command byte][response dataLength=2 to 20 bytes][checksum]\n    command_base = b\"\\x0a\\x00\\x04\"\n    command_cell_base = b\"\\x01\"",
        "detail": "dbus-serialbattery.bms.sinowealth",
        "documentation": {}
    },
    {
        "label": "_Addendum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "class _Addendum(object):\n    def __init__(self, dict, doc, ns):\n        # dict is the dict to update with functions\n        # doc is the docstring to put in the dict\n        # ns is the namespace to remove the function names from\n        self.dict = dict\n        self.ns = ns\n        self.added = set()\n    def __call__(self, func):\n        if isinstance(func, (staticmethod, classmethod)):",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "constant",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "class constant(object):\n    '''\n    Simple constant descriptor for NamedConstant and Enum use.\n    '''\n    def __init__(self, value, doc=None):\n        self.value = value\n        self.__doc__ = doc\n    def __get__(self, *args):\n        return self.value\n    def __repr__(self):",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "NonMember",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "class NonMember(object):\n    \"\"\"\n    Protects item from becaming an Enum member during class creation.\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\n    def __get__(self, instance, ownerclass=None):\n        return self.value\nskip = nonmember = NonMember\nclass Member(object):",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "Member",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "class Member(object):\n    \"\"\"\n    Forces item to became an Enum member during class creation.\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\nmember = Member",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "is_descriptor",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def is_descriptor(obj):\n    \"\"\"Returns True if obj is a descriptor, False otherwise.\"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or\n            hasattr(obj, '__delete__'))\ndef is_dunder(name):\n    \"\"\"Returns True if a __dunder__ name, False otherwise.\"\"\"\n    return (len(name) > 4 and\n            name[:2] == name[-2:] == '__' and",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "is_dunder",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def is_dunder(name):\n    \"\"\"Returns True if a __dunder__ name, False otherwise.\"\"\"\n    return (len(name) > 4 and\n            name[:2] == name[-2:] == '__' and\n            name[2] != '_' and\n            name[-3] != '_')\ndef is_sunder(name):\n    \"\"\"Returns True if a _sunder_ name, False otherwise.\"\"\"\n    return (len(name) > 2 and\n            name[0] == name[-1] == '_' and",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "is_sunder",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def is_sunder(name):\n    \"\"\"Returns True if a _sunder_ name, False otherwise.\"\"\"\n    return (len(name) > 2 and\n            name[0] == name[-1] == '_' and\n            name[1] != '_' and\n            name[-2] != '_')\ndef is_internal_class(cls_name, obj):\n    # only 3.3 and up, always return False in 3.2 and below\n    if pyver < PY3_3:\n        return False",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "is_internal_class",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def is_internal_class(cls_name, obj):\n    # only 3.3 and up, always return False in 3.2 and below\n    if pyver < PY3_3:\n        return False\n    else:\n        qualname = getattr(obj, '__qualname__', False)\n        return not is_descriptor(obj) and qualname and re.search(r\"\\.?%s\\.\\w+$\" % cls_name, qualname)\ndef is_private_name(cls_name, name):\n    pattern = r'^_%s__\\w+[^_]_?$' % (cls_name, )\n    return re.search(pattern, name)",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "is_private_name",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def is_private_name(cls_name, name):\n    pattern = r'^_%s__\\w+[^_]_?$' % (cls_name, )\n    return re.search(pattern, name)\ndef get_attr_from_chain(cls, attr):\n    sentinel = object()\n    for basecls in cls.mro():\n        obj = basecls.__dict__.get(attr, sentinel)\n        if obj is not sentinel:\n            return obj\ndef _value(obj):",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "get_attr_from_chain",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def get_attr_from_chain(cls, attr):\n    sentinel = object()\n    for basecls in cls.mro():\n        obj = basecls.__dict__.get(attr, sentinel)\n        if obj is not sentinel:\n            return obj\ndef _value(obj):\n    if isinstance(obj, (auto, constant)):\n        return obj.value\n    else:",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "make_class_unpicklable",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "def make_class_unpicklable(obj):\n    \"\"\"\n    Make the given obj un-picklable.\n    obj should be either a dictionary, on an Enum\n    \"\"\"\n    def _break_on_call_reduce(self, proto):\n        raise TypeError('%r cannot be pickled' % self)\n    if isinstance(obj, dict):\n        obj['__reduce_ex__'] = _break_on_call_reduce\n        obj['__module__'] = '<unknown>'",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "__all__ = [\n        'pyver', 'PY2', 'PY2_6', 'PY3', 'PY3_3', 'PY3_4', 'PY3_5', 'PY3_6', 'PY3_7', 'PY3_11',\n        '_or_', '_and_', '_xor_', '_inv_', '_abs_', '_add_', '_floordiv_', '_lshift_',\n        '_rshift_', '_mod_', '_mul_', '_neg_', '_pos_', '_pow_', '_truediv_', '_sub_',\n        'unicode', 'basestring', 'baseinteger', 'long', 'NoneType', '_Addendum',\n        'is_descriptor', 'is_dunder', 'is_sunder', 'is_internal_class', 'is_private_name',\n        'get_attr_from_chain', '_value', 'constant',\n        'make_class_unpicklable', 'bltin_property',\n        'skip', 'nonmember', 'member', 'Member', 'NonMember', 'OrderedDict',\n        ]",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "pyver",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "pyver = _sys.version_info[:2]\nPY2 = pyver < (3, )\nPY3 = pyver >= (3, )\nPY2_6 = (2, 6)\nPY3_3 = (3, 3)\nPY3_4 = (3, 4)\nPY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY2 = pyver < (3, )\nPY3 = pyver >= (3, )\nPY2_6 = (2, 6)\nPY3_3 = (3, 3)\nPY3_4 = (3, 4)\nPY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3 = pyver >= (3, )\nPY2_6 = (2, 6)\nPY3_3 = (3, 3)\nPY3_4 = (3, 4)\nPY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY2_6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY2_6 = (2, 6)\nPY3_3 = (3, 3)\nPY3_4 = (3, 4)\nPY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3_3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3_3 = (3, 3)\nPY3_4 = (3, 4)\nPY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_\nfrom operator import lshift as _lshift_, rshift as _rshift_, mod as _mod_",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3_4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3_4 = (3, 4)\nPY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_\nfrom operator import lshift as _lshift_, rshift as _rshift_, mod as _mod_\nfrom operator import mul as _mul_, neg as _neg_, pos as _pos_, pow as _pow_",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3_5",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3_5 = (3, 5)\nPY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_\nfrom operator import lshift as _lshift_, rshift as _rshift_, mod as _mod_\nfrom operator import mul as _mul_, neg as _neg_, pos as _pos_, pow as _pow_\nfrom operator import truediv as _truediv_, sub as _sub_",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3_6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3_6 = (3, 6)\nPY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_\nfrom operator import lshift as _lshift_, rshift as _rshift_, mod as _mod_\nfrom operator import mul as _mul_, neg as _neg_, pos as _pos_, pow as _pow_\nfrom operator import truediv as _truediv_, sub as _sub_\nif PY2:",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3_7",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3_7 = (3, 7)\nPY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_\nfrom operator import lshift as _lshift_, rshift as _rshift_, mod as _mod_\nfrom operator import mul as _mul_, neg as _neg_, pos as _pos_, pow as _pow_\nfrom operator import truediv as _truediv_, sub as _sub_\nif PY2:\n    from . import _py2",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "PY3_11",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "PY3_11 = (3, 11)\nimport re\nfrom operator import or_ as _or_, and_ as _and_, xor as _xor_, inv as _inv_\nfrom operator import abs as _abs_, add as _add_, floordiv as _floordiv_\nfrom operator import lshift as _lshift_, rshift as _rshift_, mod as _mod_\nfrom operator import mul as _mul_, neg as _neg_, pos as _pos_, pow as _pow_\nfrom operator import truediv as _truediv_, sub as _sub_\nif PY2:\n    from . import _py2\n    from ._py2 import *",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "bltin_property",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "bltin_property = property\n# shims\ntry:\n    from collections import OrderedDict\nexcept ImportError:\n    OrderedDict = dict\ntry:\n    unicode\n    unicode = unicode\nexcept NameError:",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "baseint",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "baseint = baseinteger\ntry:\n    NoneType\nexcept NameError:\n    NoneType = type(None)\nclass _Addendum(object):\n    def __init__(self, dict, doc, ns):\n        # dict is the dict to update with functions\n        # doc is the docstring to put in the dict\n        # ns is the namespace to remove the function names from",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "skip = nonmember = NonMember\nclass Member(object):\n    \"\"\"\n    Forces item to became an Enum member during class creation.\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\nmember = Member",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "member",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._common",
        "description": "dbus-serialbattery.ext.aenum._common",
        "peekOfCode": "member = Member",
        "detail": "dbus-serialbattery.ext.aenum._common",
        "documentation": {}
    },
    {
        "label": "NamedConstantDict",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "class NamedConstantDict(dict):\n    \"\"\"Track constant order and ensure names are not reused.\n    NamedConstantMeta will use the names found in self._names as the\n    Constant names.\n    \"\"\"\n    def __init__(self):\n        super(NamedConstantDict, self).__init__()\n        self._names = []\n    def __setitem__(self, key, value):\n        \"\"\"Changes anything not dundered or not a constant descriptor.",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "NamedConstantMeta",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "class NamedConstantMeta(type):\n    \"\"\"\n    Block attempts to reassign NamedConstant attributes.\n    \"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, **kwds):\n        return NamedConstantDict()\n    def __new__(metacls, cls, bases, clsdict):\n        if type(clsdict) is dict:\n            original_dict = clsdict",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "__all__ = [\n       \t'NamedConstant', 'Constant',\n        ]\n# NamedConstant\nNamedConstant = None\nclass NamedConstantDict(dict):\n    \"\"\"Track constant order and ensure names are not reused.\n    NamedConstantMeta will use the names found in self._names as the\n    Constant names.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "NamedConstant",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "NamedConstant = None\nclass NamedConstantDict(dict):\n    \"\"\"Track constant order and ensure names are not reused.\n    NamedConstantMeta will use the names found in self._names as the\n    Constant names.\n    \"\"\"\n    def __init__(self):\n        super(NamedConstantDict, self).__init__()\n        self._names = []\n    def __setitem__(self, key, value):",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "constant_dict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "constant_dict = _Addendum(\n        dict=NamedConstantMeta.__prepare__('NamedConstant', (object, )),\n        doc=\"NamedConstants protection.\\n\\n    Derive from this class to lock NamedConstants.\\n\\n\",\n        ns=globals(),\n        )\n@constant_dict\ndef __new__(cls, name, value=None, doc=None):\n    if value is None:\n        # lookup, name is value\n        value = name",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "NamedConstant",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "NamedConstant = NamedConstantMeta('NamedConstant', (object, ), constant_dict.resolve())\nConstant = NamedConstant\ndel constant_dict",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "Constant",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._constant",
        "description": "dbus-serialbattery.ext.aenum._constant",
        "peekOfCode": "Constant = NamedConstant\ndel constant_dict",
        "detail": "dbus-serialbattery.ext.aenum._constant",
        "documentation": {}
    },
    {
        "label": "property",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class property(base):\n    \"\"\"\n    This is a descriptor, used to define attributes that act differently\n    when accessed through an enum member and through an enum class.\n    Instance access is the same as property(), but access to an attribute\n    through the enum class will look in the class' _member_map_.\n    \"\"\"\n    # inherit from DynamicClassAttribute if we can in order to get `inspect`\n    # support\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "SentinelType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class SentinelType(type):\n    def __repr__(cls):\n        return '<%s>' % cls.__name__\nSentinel = SentinelType('Sentinel', (object, ), {})\ndef _power_of_two(value):\n    if value < 1:\n        return False\n    return value == 2 ** _high_bit(value)\ndef bits(num):\n    if num in (0, 1):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "EnumConstants",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class EnumConstants(NamedConstant):\n    AddValue = constant('addvalue', 'prepends value(s) from _generate_next_value_ to each member')\n    MagicValue = constant('magicvalue', 'calls _generate_next_value_ when no arguments are given')\n    MultiValue = constant('multivalue', 'each member can have several values')\n    NoAlias = constant('noalias', 'duplicate valued members are distinct, not aliased')\n    Unique = constant('unique', 'duplicate valued members are not allowed')\n    def __repr__(self):\n        return self._name_\n    # Dummy value for Enum as EnumType explicity checks for it, but of course until\n    # EnumType finishes running the first time the Enum class doesn't exist.  This",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class enum(object):\n    \"\"\"\n    Helper class to track args, kwds.\n    \"\"\"\n    def __init__(self, *args, **kwds):\n        self._args = args\n        self._kwds = dict(kwds.items())\n        self._hash = hash(args)\n        self.name = None\n    @bltin_property",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class auto(enum):\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    enum_member = _auto_null\n    _value = _auto_null\n    _operations = []\n    def __and__(self, other):\n        new_auto = self.__class__()\n        new_auto._operations = self._operations[:]",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_EnumArgSpec",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class _EnumArgSpec(NamedTuple):\n    args = 0, 'all args except *args and **kwds'\n    varargs = 1, 'the name of the *args variable'\n    keywords = 2, 'the name of the **kwds variable'\n    defaults = 3, 'any default values'\n    required = 4, 'number of required values (no default available)'\n    def __new__(cls, _new_func):\n        argspec = getargspec(_new_func)\n        args, varargs, keywords, defaults = argspec\n        if defaults:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_proto_member",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class _proto_member:\n    \"\"\"\n    intermediate step for enum members between class execution and final creation\n    \"\"\"\n    def __init__(self, value):\n        self.value = value\n    def __set_name__(self, enum_class, member_name):\n        \"\"\"\n        convert each quasi-member into an instance of the new enum class\n        \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "EnumDict",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumType will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self, cls_name, settings, start, constructor_init, constructor_start, constructor_boundary):\n        super(EnumDict, self).__init__()\n        self._cls_name = cls_name\n        self._constructor_init = constructor_init\n        self._constructor_start = constructor_start",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "EnumType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class EnumType(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, init=None, start=None, settings=(), boundary=None, **kwds):\n        metacls._check_for_existing_members_(cls, bases)\n        if Flag is None and cls == 'Flag':\n            initial_flag = True\n        else:\n            initial_flag = False\n        # settings are a combination of current and all past settings",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class IntEnum(int, ReprEnum):\n    \"\"\"\n    Enum where members are also (and must be) ints\n    \"\"\"\n# StrEnums\nclass StrEnum(str, ReprEnum):\n    \"\"\"\n    Enum where members are also (and must already be) strings\n    default value is member name, lower-cased\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class StrEnum(str, ReprEnum):\n    \"\"\"\n    Enum where members are also (and must already be) strings\n    default value is member name, lower-cased\n    \"\"\"\n    def __new__(cls, *values, **kwds):\n        if kwds:\n            raise TypeError('%r: keyword arguments not supported' % (cls.__name__))\n        if values:\n            if not isinstance(values[0], str):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "LowerStrEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class LowerStrEnum(StrEnum):\n    \"\"\"\n    Enum where members are also (and must already be) lower-case strings\n    default value is member name, lower-cased\n    \"\"\"\n    def __new__(cls, value, *args, **kwds):\n        obj = StrEnum.__new_member__(cls, value, *args, **kwds)\n        if value != value.lower():\n            raise ValueError('%r is not lower-case' % value)\n        return obj",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "UpperStrEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class UpperStrEnum(StrEnum):\n    \"\"\"\n    Enum where members are also (and must already be) upper-case strings\n    default value is member name, upper-cased\n    \"\"\"\n    def __new__(cls, value, *args, **kwds):\n        obj = StrEnum.__new_member__(cls, value, *args, **kwds)\n        if value != value.upper():\n            raise ValueError('%r is not upper-case' % value)\n        return obj",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "AutoNumberEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class AutoNumberEnum(Enum):\n    \"\"\"\n    Automatically assign increasing values to members.\n    Py3: numbers match creation order\n    Py2: numbers are assigned alphabetically by member name\n         (unless `_order_` is specified)\n    \"\"\"\n    def __new__(cls, *args, **kwds):\n        value = len(cls.__members__) + 1\n        if cls._member_type_ is int:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "AddValueEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class AddValueEnum(Enum):\n    _settings_ = AddValue\nclass MultiValueEnum(Enum):\n    \"\"\"\n    Multiple values can map to each member.\n    \"\"\"\n    _settings_ = MultiValue\nclass NoAliasEnum(Enum):\n    \"\"\"\n    Duplicate value members are distinct, but cannot be looked up by value.",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "MultiValueEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class MultiValueEnum(Enum):\n    \"\"\"\n    Multiple values can map to each member.\n    \"\"\"\n    _settings_ = MultiValue\nclass NoAliasEnum(Enum):\n    \"\"\"\n    Duplicate value members are distinct, but cannot be looked up by value.\n    \"\"\"\n    _settings_ = NoAlias",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "NoAliasEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class NoAliasEnum(Enum):\n    \"\"\"\n    Duplicate value members are distinct, but cannot be looked up by value.\n    \"\"\"\n    _settings_ = NoAlias\nclass OrderedEnum(Enum):\n    \"\"\"\n    Add ordering based on values of Enum members.\n    \"\"\"\n    def __ge__(self, other):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "OrderedEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class OrderedEnum(Enum):\n    \"\"\"\n    Add ordering based on values of Enum members.\n    \"\"\"\n    def __ge__(self, other):\n        if self.__class__ is other.__class__:\n            return self._value_ >= other._value_\n        return NotImplemented\n    def __gt__(self, other):\n        if self.__class__ is other.__class__:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "UniqueEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class UniqueEnum(Enum):\n    \"\"\"\n    Ensure no duplicate values exist.\n    \"\"\"\n    _settings_ = Unique\ndef convert(enum, name, module, filter, source=None):\n    \"\"\"\n    Create a new Enum subclass that replaces a collection of global constants\n    enum: Enum, IntEnum, ...\n    name: name of new Enum",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class IntFlag(int, ReprEnum, Flag):\n    \"Support for integer-based Flags\"\n    _boundary_ = KEEP\n    def __contains__(self, other):\n        \"\"\"\n        Returns True if self has at least the same flags set as other.\n        \"\"\"\n        if isinstance(other, int):\n            other = self.__class__(other)\n        elif not isinstance(other, self.__class__):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "cls2module",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "class cls2module(object):\n    def __init__(self, cls, *args):\n        self.__name__ = cls.__name__\n        self._parent_module = cls.__module__\n        self.__all__ = []\n        all_objects = cls.__dict__\n        if not args:\n            args = [k for k, v in all_objects.items() if isinstance(v, (NamedConstant, Enum))]\n        for name in args:\n            self.__dict__[name] = all_objects[name]",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "export",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def export(collection, namespace=None):\n    \"\"\"\n    export([collection,] namespace) -> Export members to target namespace.\n    If collection is not given, act as a decorator.\n    \"\"\"\n    if namespace is None:\n        namespace = collection\n        def export_decorator(collection):\n            return export(collection, namespace)\n        return export_decorator",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "bit_count",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def bit_count(num):\n    \"\"\"\n    return number of set bits\n    Counting bits set, Brian Kernighan's way*\n        unsigned int v;          // count the number of bits set in v\n        unsigned int c;          // c accumulates the total bits set in v\n        for (c = 0; v; c++)\n        {   v &= v - 1;  }       //clear the least significant bit set\n    This method goes through as many iterations as there are set bits. So if we\n    have a 32-bit word with only the high bit set, then it will only go once",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "is_single_bit",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def is_single_bit(value):\n    \"\"\"\n    True if only one bit set in value (should be an int)\n    \"\"\"\n    if value == 0:\n        return False\n    value &= value - 1\n    return value == 0\ndef _iter_bits_lsb(value):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "bin",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def bin(value, max_bits=None):\n    \"\"\"\n    Like built-in bin(), except negative values are represented in\n    twos-compliment, and the leading bit always indicates sign\n    (0=positive, 1=negative).\n    >>> bin(10)\n    '0b0 1010'\n    >>> bin(~10)   # ~10 is -11\n    '0b1 0101'\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "show_flag_values",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def show_flag_values(value):\n    return list(_iter_bits_lsb(value))\ntry:\n    from types import DynamicClassAttribute\n    base = DynamicClassAttribute\nexcept ImportError:\n    base = object\n    DynamicClassAttribute = None\nclass property(base):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "bits",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def bits(num):\n    if num in (0, 1):\n        return str(num)\n    negative = False\n    if num < 0:\n        negative = True\n        num = ~num\n    result = bits(num>>1) + str(num&1)\n    if negative:\n        result = '1' + ''.join(['10'[d=='1'] for d in result])",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "bit_count",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def bit_count(num):\n    \"\"\"\n        return number of set bits\n        Counting bits set, Brian Kernighan's way*\n            unsigned int v;          // count the number of bits set in v\n            unsigned int c;          // c accumulates the total bits set in v\n            for (c = 0; v; c++)\n            {   v &= v - 1;  }       //clear the least significant bit set\n        This method goes through as many iterations as there are set bits. So if we\n        have a 32-bit word with only the high bit set, then it will only go once",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "bit_len",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def bit_len(num):\n    length = 0\n    while num:\n        length += 1\n        num >>= 1\n    return length\ndef is_single_bit(num):\n    \"\"\"\n    True if only one bit set in num (should be an int)\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "is_single_bit",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def is_single_bit(num):\n    \"\"\"\n    True if only one bit set in num (should be an int)\n    \"\"\"\n    return (num != 0) and (num & (num - 1)) == 0\ndef _check_auto_args(method):\n    \"\"\"check if new generate method supports *args and **kwds\"\"\"\n    if isinstance(method, staticmethod):\n        method = method.__get__(type)\n    method = getattr(method, 'im_func', method)",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "enumsort",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def enumsort(things):\n    \"\"\"\n    sorts things by value if all same type; otherwise by name\n    \"\"\"\n    if not things:\n        return things\n    sort_type = type(things[0])\n    if not issubclass(sort_type, tuple):\n        # direct sort or type error\n        if not all((type(v) is sort_type) for v in things[1:]):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def name(self):\n    return self._name_\n@enum_dict\n@property\ndef value(self):\n    return self._value_\n@enum_dict\n@property\ndef values(self):\n    return self._values_",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def value(self):\n    return self._value_\n@enum_dict\n@property\ndef values(self):\n    return self._values_\n_enum_base = StdlibEnum or object\nEnum = EnumType('Enum', (_enum_base, ), enum_dict.resolve())\ndel enum_dict\n    # Enum has now been created",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def values(self):\n    return self._values_\n_enum_base = StdlibEnum or object\nEnum = EnumType('Enum', (_enum_base, ), enum_dict.resolve())\ndel enum_dict\n    # Enum has now been created\ndef pickle_by_global_name(self, proto):\n    # should not be used with Flag-type enums\n    return self.name\n_reduce_ex_by_name = pickle_by_global_name",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "pickle_by_global_name",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def pickle_by_global_name(self, proto):\n    # should not be used with Flag-type enums\n    return self.name\n_reduce_ex_by_name = pickle_by_global_name\ndef pickle_by_enum_name(self, proto):\n    # should not be used with Flag-type enums\n    return getattr, (self.__class__, self._name_)\ndef _dataclass_repr(self):\n    dcf = self.__dataclass_fields__\n    return ', '.join(",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "pickle_by_enum_name",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def pickle_by_enum_name(self, proto):\n    # should not be used with Flag-type enums\n    return getattr, (self.__class__, self._name_)\ndef _dataclass_repr(self):\n    dcf = self.__dataclass_fields__\n    return ', '.join(\n            '%s=%r' % (k, getattr(self, k))\n            for k in dcf.keys()\n            if dcf[k].repr\n            )",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def convert(enum, name, module, filter, source=None):\n    \"\"\"\n    Create a new Enum subclass that replaces a collection of global constants\n    enum: Enum, IntEnum, ...\n    name: name of new Enum\n    module: name of module (__name__ in global context)\n    filter: function that returns True if name should be converted to Enum member\n    source: namespace to check (defaults to 'module')\n    \"\"\"\n    # convert all constants from source (or module) that pass filter() to",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "extend_enum",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def extend_enum(enumeration, name, *args, **kwds):\n    \"\"\"\n    Add a new member to an existing Enum.\n    \"\"\"\n    # there are four possibilities:\n    # - extending an aenum Enum or 3.11+ enum Enum\n    # - extending an aenum Flag or 3.11+ enum Flag\n    # - extending a pre-3.11 stdlib Enum Flag\n    # - extending a 3.11+ stdlib Flag\n    #",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def unique(enumeration):\n    \"\"\"\n    Class decorator that ensures only unique members exist in an enumeration.\n    \"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        duplicate_names = ', '.join(",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "global_enum_repr",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def global_enum_repr(self):\n    \"\"\"\n    use module.enum_name instead of class.enum_name\n    the module is the last module in case of a multi-module name\n    \"\"\"\n    module = self.__class__.__module__.split('.')[-1]\n    return '%s.%s' % (module, self._name_)\ndef global_flag_repr(self):\n    \"\"\"\n    use module.flag_name instead of class.flag_name",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "global_flag_repr",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def global_flag_repr(self):\n    \"\"\"\n    use module.flag_name instead of class.flag_name\n    the module is the last module in case of a multi-module name\n    \"\"\"\n    module = self.__class__.__module__.split('.')[-1]\n    cls_name = self.__class__.__name__\n    if self._name_ is None:\n        return \"%s.%s(%r)\" % (module, cls_name, self._value_)\n    if is_single_bit(self):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "global_str",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def global_str(self):\n    \"\"\"\n    use enum_name instead of class.enum_name\n    \"\"\"\n    if self._name_ is None:\n        cls_name = self.__class__.__name__\n        return \"%s(%r)\" % (cls_name, self._value_)\n    else:\n        return self._name_\ndef global_enum(cls, update_str=False):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "global_enum",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def global_enum(cls, update_str=False):\n    \"\"\"\n    decorator that makes the repr() of an enum member reference its module\n    instead of its class; also exports all members to the enum's module's\n    global namespace\n    \"\"\"\n    if issubclass(cls, Flag):\n        cls.__repr__ = global_flag_repr\n    else:\n        cls.__repr__ = global_enum_repr",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "add_stdlib_integration",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def add_stdlib_integration():\n    if StdlibEnum:\n        StdlibEnumMeta.__subclasscheck__ = __subclasscheck__\n        StdlibEnumMeta.__instancecheck__ = __instancecheck__\ndef remove_stdlib_integration():\n    \"\"\"\n    Remove the __instancecheck__ and __subclasscheck__ overrides from the stdlib Enum.\n    Those overrides are in place so that code detecting stdlib enums will also detect\n    aenum enums.  If a buggy __getattribute__, __instancecheck__, or __subclasscheck__\n    is defined on a custom EnumMeta then RecursionErrors can result; using this",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "remove_stdlib_integration",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "def remove_stdlib_integration():\n    \"\"\"\n    Remove the __instancecheck__ and __subclasscheck__ overrides from the stdlib Enum.\n    Those overrides are in place so that code detecting stdlib enums will also detect\n    aenum enums.  If a buggy __getattribute__, __instancecheck__, or __subclasscheck__\n    is defined on a custom EnumMeta then RecursionErrors can result; using this\n    function after importing aenum will solve that problem, but the better solution is\n    to fix the buggy method.\n    \"\"\"\n    if StdlibEnum:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "__all__ = [\n        'bit_count', 'is_single_bit', 'bin', 'property', 'bits',\n        'AddValue', 'MagicValue', 'MultiValue', 'NoAlias', 'Unique', 'enum', 'auto',\n        'AddValueEnum', 'MultiValueEnum', 'NoAliasEnum', 'UniqueEnum', 'AutoNumberEnum',\n        'OrderedEnum', 'unique', 'no_arg', 'extend_enum', 'enum_property',\n        'EnumType', 'EnumMeta', 'EnumDict', 'Enum', 'IntEnum', 'StrEnum', 'Flag', 'IntFlag',\n        'LowerStrEnum', 'UpperStrEnum', 'ReprEnum', 'SqliteEnum', 'sqlite3',\n        'FlagBoundary', 'STRICT', 'CONFORM', 'EJECT', 'KEEP',\n        'add_stdlib_integration', 'remove_stdlib_integration',\n        'export', 'cls2module', '_reduce_ex_by_name', 'show_flag_values',",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_bltin_bin",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_bltin_bin = bin\ntry:\n    import sqlite3\nexcept ImportError:\n    sqlite3 = None\n    __all__.remove('SqliteEnum')\ntry:\n    RecursionError\nexcept NameError:\n    # python3.4",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "stdlib_enums",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "stdlib_enums = ()\ntry:\n    import enum\n    if hasattr(enum, 'version'):\n        raise ImportError('wrong version')\n    else:\n        from enum import EnumMeta as StdlibEnumMeta, Enum as StdlibEnum, IntEnum as StdlibIntEnum\n        StdlibFlag = StdlibIntFlag = StdlibStrEnum = StdlibReprEnum = None\n        stdlib_enums = StdlibEnum, StdlibIntEnum\nexcept ImportError:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "MagicValue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "MagicValue = AddValue = MultiValue = NoAlias = Unique = None\ndef export(collection, namespace=None):\n    \"\"\"\n    export([collection,] namespace) -> Export members to target namespace.\n    If collection is not given, act as a decorator.\n    \"\"\"\n    if namespace is None:\n        namespace = collection\n        def export_decorator(collection):\n            return export(collection, namespace)",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_RouteClassAttributeToGetattr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_RouteClassAttributeToGetattr = property\nif DynamicClassAttribute is None:\n    DynamicClassAttribute = property\n# deprecated\nenum_property = property\n# more helpers\nclass SentinelType(type):\n    def __repr__(cls):\n        return '<%s>' % cls.__name__\nSentinel = SentinelType('Sentinel', (object, ), {})",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "enum_property",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "enum_property = property\n# more helpers\nclass SentinelType(type):\n    def __repr__(cls):\n        return '<%s>' % cls.__name__\nSentinel = SentinelType('Sentinel', (object, ), {})\ndef _power_of_two(value):\n    if value < 1:\n        return False\n    return value == 2 ** _high_bit(value)",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "Sentinel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "Sentinel = SentinelType('Sentinel', (object, ), {})\ndef _power_of_two(value):\n    if value < 1:\n        return False\n    return value == 2 ** _high_bit(value)\ndef bits(num):\n    if num in (0, 1):\n        return str(num)\n    negative = False\n    if num < 0:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "Enum = ReprEnum = IntEnum = StrEnum = Flag = IntFlag = EJECT = KEEP = None\nclass enum(object):\n    \"\"\"\n    Helper class to track args, kwds.\n    \"\"\"\n    def __init__(self, *args, **kwds):\n        self._args = args\n        self._kwds = dict(kwds.items())\n        self._hash = hash(args)\n        self.name = None",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_auto_null",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_auto_null = SentinelType('no_value', (object, ), {})\nclass auto(enum):\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    enum_member = _auto_null\n    _value = _auto_null\n    _operations = []\n    def __and__(self, other):\n        new_auto = self.__class__()",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_common.property",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_common.property = property\n_common.auto = auto\ndel _common\nclass _EnumArgSpec(NamedTuple):\n    args = 0, 'all args except *args and **kwds'\n    varargs = 1, 'the name of the *args variable'\n    keywords = 2, 'the name of the **kwds variable'\n    defaults = 3, 'any default values'\n    required = 4, 'number of required values (no default available)'\n    def __new__(cls, _new_func):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_common.auto",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_common.auto = auto\ndel _common\nclass _EnumArgSpec(NamedTuple):\n    args = 0, 'all args except *args and **kwds'\n    varargs = 1, 'the name of the *args variable'\n    keywords = 2, 'the name of the **kwds variable'\n    defaults = 3, 'any default values'\n    required = 4, 'number of required values (no default available)'\n    def __new__(cls, _new_func):\n        argspec = getargspec(_new_func)",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "no_arg",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "no_arg = SentinelType('no_arg', (type, ), {})\nclass EnumType(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, init=None, start=None, settings=(), boundary=None, **kwds):\n        metacls._check_for_existing_members_(cls, bases)\n        if Flag is None and cls == 'Flag':\n            initial_flag = True\n        else:\n            initial_flag = False",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "EnumMeta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "EnumMeta = EnumType\nenum_dict = _Addendum(\n        dict=EnumType.__prepare__('Enum', (object, )),\n        doc=\"Generic enumeration.\\n\\n    Derive from this class to define new enumerations.\\n\\n\",\n        ns=globals(),\n        )\n@enum_dict\n@classmethod\ndef __signature__(cls):\n    if cls._member_names_:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "enum_dict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "enum_dict = _Addendum(\n        dict=EnumType.__prepare__('Enum', (object, )),\n        doc=\"Generic enumeration.\\n\\n    Derive from this class to define new enumerations.\\n\\n\",\n        ns=globals(),\n        )\n@enum_dict\n@classmethod\ndef __signature__(cls):\n    if cls._member_names_:\n        return '(*values)'",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_enum_base",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_enum_base = StdlibEnum or object\nEnum = EnumType('Enum', (_enum_base, ), enum_dict.resolve())\ndel enum_dict\n    # Enum has now been created\ndef pickle_by_global_name(self, proto):\n    # should not be used with Flag-type enums\n    return self.name\n_reduce_ex_by_name = pickle_by_global_name\ndef pickle_by_enum_name(self, proto):\n    # should not be used with Flag-type enums",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "Enum = EnumType('Enum', (_enum_base, ), enum_dict.resolve())\ndel enum_dict\n    # Enum has now been created\ndef pickle_by_global_name(self, proto):\n    # should not be used with Flag-type enums\n    return self.name\n_reduce_ex_by_name = pickle_by_global_name\ndef pickle_by_enum_name(self, proto):\n    # should not be used with Flag-type enums\n    return getattr, (self.__class__, self._name_)",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "_reduce_ex_by_name",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "_reduce_ex_by_name = pickle_by_global_name\ndef pickle_by_enum_name(self, proto):\n    # should not be used with Flag-type enums\n    return getattr, (self.__class__, self._name_)\ndef _dataclass_repr(self):\n    dcf = self.__dataclass_fields__\n    return ', '.join(\n            '%s=%r' % (k, getattr(self, k))\n            for k in dcf.keys()\n            if dcf[k].repr",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "ReprEnum",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "ReprEnum = EnumType('ReprEnum', _repr_bases, {\n        '__doc__': \"Only changes the repr(), leaving str() and format() to the mixed-in type.\"\n        })\n# IntEnum\nclass IntEnum(int, ReprEnum):\n    \"\"\"\n    Enum where members are also (and must be) ints\n    \"\"\"\n# StrEnums\nclass StrEnum(str, ReprEnum):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict = _Addendum(\n        dict=EnumType.__prepare__('Flag', _flag_bases),\n        doc=\"Generic flag enumeration.\\n\\nDerive from this class to define new flag enumerations.\",\n        ns=globals(),\n        )\nflag_dict['_boundary_'] = STRICT\nflag_dict['_numeric_repr_'] = repr\n@flag_dict\ndef _generate_next_value_(name, start, count, last_values, *args, **kwds):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict['_boundary_']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict['_boundary_'] = STRICT\nflag_dict['_numeric_repr_'] = repr\n@flag_dict\ndef _generate_next_value_(name, start, count, last_values, *args, **kwds):\n    \"\"\"\n    Generate the next value when not given.\n    name: the name of the member\n    start: the initital start value or None\n    count: the number of existing members\n    last_value: the last value assigned or None",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict['_numeric_repr_']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict['_numeric_repr_'] = repr\n@flag_dict\ndef _generate_next_value_(name, start, count, last_values, *args, **kwds):\n    \"\"\"\n    Generate the next value when not given.\n    name: the name of the member\n    start: the initital start value or None\n    count: the number of existing members\n    last_value: the last value assigned or None\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict['_iter_member_']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict['_iter_member_'] = _iter_member_by_value_\n@flag_dict\n@classmethod\ndef _iter_member_by_def_(cls, value):\n    \"\"\"\n    Extract all members from the value in definition order.\n    \"\"\"\n    members = list(cls._iter_member_by_value_(value))\n    members.sort(key=lambda m: m._sort_order_)\n    for member in members:",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict['__ror__']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict['__ror__'] = __or__\nflag_dict['__rand__'] = __and__\nflag_dict['__rxor__'] = __xor__\nFlag = EnumType('Flag', _flag_bases, flag_dict.resolve())\ndel(flag_dict)\n# IntFlag\nclass IntFlag(int, ReprEnum, Flag):\n    \"Support for integer-based Flags\"\n    _boundary_ = KEEP\n    def __contains__(self, other):",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict['__rand__']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict['__rand__'] = __and__\nflag_dict['__rxor__'] = __xor__\nFlag = EnumType('Flag', _flag_bases, flag_dict.resolve())\ndel(flag_dict)\n# IntFlag\nclass IntFlag(int, ReprEnum, Flag):\n    \"Support for integer-based Flags\"\n    _boundary_ = KEEP\n    def __contains__(self, other):\n        \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "flag_dict['__rxor__']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "flag_dict['__rxor__'] = __xor__\nFlag = EnumType('Flag', _flag_bases, flag_dict.resolve())\ndel(flag_dict)\n# IntFlag\nclass IntFlag(int, ReprEnum, Flag):\n    \"Support for integer-based Flags\"\n    _boundary_ = KEEP\n    def __contains__(self, other):\n        \"\"\"\n        Returns True if self has at least the same flags set as other.",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "Flag",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._enum",
        "description": "dbus-serialbattery.ext.aenum._enum",
        "peekOfCode": "Flag = EnumType('Flag', _flag_bases, flag_dict.resolve())\ndel(flag_dict)\n# IntFlag\nclass IntFlag(int, ReprEnum, Flag):\n    \"Support for integer-based Flags\"\n    _boundary_ = KEEP\n    def __contains__(self, other):\n        \"\"\"\n        Returns True if self has at least the same flags set as other.\n        \"\"\"",
        "detail": "dbus-serialbattery.ext.aenum._enum",
        "documentation": {}
    },
    {
        "label": "raise_with_traceback",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._py2",
        "description": "dbus-serialbattery.ext.aenum._py2",
        "peekOfCode": "def raise_with_traceback(exc, tb):\n    raise exc, None, tb\n__all__ = ['_div_', 'getargspec', 'raise_with_traceback']",
        "detail": "dbus-serialbattery.ext.aenum._py2",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._py2",
        "description": "dbus-serialbattery.ext.aenum._py2",
        "peekOfCode": "__all__ = ['_div_', 'getargspec', 'raise_with_traceback']",
        "detail": "dbus-serialbattery.ext.aenum._py2",
        "documentation": {}
    },
    {
        "label": "getargspec",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._py3",
        "description": "dbus-serialbattery.ext.aenum._py3",
        "peekOfCode": "def getargspec(method):\n    args, varargs, keywords, defaults, _, _, _ = _getfullargspec(method)\n    return args, varargs, keywords, defaults\ndef raise_with_traceback(exc, tb):\n    raise exc.with_traceback(tb)\ndef raise_from_none(exc):\n    raise exc from None",
        "detail": "dbus-serialbattery.ext.aenum._py3",
        "documentation": {}
    },
    {
        "label": "raise_with_traceback",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._py3",
        "description": "dbus-serialbattery.ext.aenum._py3",
        "peekOfCode": "def raise_with_traceback(exc, tb):\n    raise exc.with_traceback(tb)\ndef raise_from_none(exc):\n    raise exc from None",
        "detail": "dbus-serialbattery.ext.aenum._py3",
        "documentation": {}
    },
    {
        "label": "raise_from_none",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum._py3",
        "description": "dbus-serialbattery.ext.aenum._py3",
        "peekOfCode": "def raise_from_none(exc):\n    raise exc from None",
        "detail": "dbus-serialbattery.ext.aenum._py3",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._py3",
        "description": "dbus-serialbattery.ext.aenum._py3",
        "peekOfCode": "__all__ = [\n        'getargspec', 'raise_with_traceback', 'raise_from_none',\n        ]\ndef getargspec(method):\n    args, varargs, keywords, defaults, _, _, _ = _getfullargspec(method)\n    return args, varargs, keywords, defaults\ndef raise_with_traceback(exc, tb):\n    raise exc.with_traceback(tb)\ndef raise_from_none(exc):\n    raise exc from None",
        "detail": "dbus-serialbattery.ext.aenum._py3",
        "documentation": {}
    },
    {
        "label": "NamedTupleDict",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "class NamedTupleDict(OrderedDict):\n    \"\"\"Track field order and ensure field names are not reused.\n    NamedTupleMeta will use the names found in self._field_names to translate\n    to indices.\n    \"\"\"\n    def __init__(self, *args, **kwds):\n        self._field_names = []\n        super(NamedTupleDict, self).__init__(*args, **kwds)\n    def __setitem__(self, key, value):\n        \"\"\"Records anything not dundered or not a descriptor.",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "_TupleAttributeAtIndex",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "class _TupleAttributeAtIndex(object):\n    def __init__(self, name, index, doc, default):\n        self.name = name\n        self.index = index\n        if doc is undefined:\n            doc = None\n        self.__doc__ = doc\n        self.default = default\n    def __get__(self, instance, owner):\n        if instance is None:",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "undefined",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "class undefined(object):\n    def __repr__(self):\n        return 'undefined'\n    def __bool__(self):\n        return False\n    __nonzero__ = __bool__\nundefined = undefined()\nclass TupleSize(NamedConstant):\n    fixed = constant('fixed', 'tuple length is static')\n    minimum = constant('minimum', 'tuple must be at least x long (x is calculated during creation')",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "TupleSize",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "class TupleSize(NamedConstant):\n    fixed = constant('fixed', 'tuple length is static')\n    minimum = constant('minimum', 'tuple must be at least x long (x is calculated during creation')\n    variable = constant('variable', 'tuple length can be anything')\nclass NamedTupleMeta(type):\n    \"\"\"Metaclass for NamedTuple\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, size=undefined, **kwds):\n        return NamedTupleDict()\n    def __init__(cls, *args , **kwds):",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "NamedTupleMeta",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "class NamedTupleMeta(type):\n    \"\"\"Metaclass for NamedTuple\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, size=undefined, **kwds):\n        return NamedTupleDict()\n    def __init__(cls, *args , **kwds):\n        super(NamedTupleMeta, cls).__init__(*args)\n    def __new__(metacls, cls, bases, clsdict, size=undefined, **kwds):\n        if bases == (object, ):\n            bases = (tuple, object)",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "__all__ = [\n        'TupleSize', 'NamedTuple',\n        ]\n# NamedTuple\nclass NamedTupleDict(OrderedDict):\n    \"\"\"Track field order and ensure field names are not reused.\n    NamedTupleMeta will use the names found in self._field_names to translate\n    to indices.\n    \"\"\"\n    def __init__(self, *args, **kwds):",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "undefined",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "undefined = undefined()\nclass TupleSize(NamedConstant):\n    fixed = constant('fixed', 'tuple length is static')\n    minimum = constant('minimum', 'tuple must be at least x long (x is calculated during creation')\n    variable = constant('variable', 'tuple length can be anything')\nclass NamedTupleMeta(type):\n    \"\"\"Metaclass for NamedTuple\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases, size=undefined, **kwds):\n        return NamedTupleDict()",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "namedtuple_dict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "namedtuple_dict = _Addendum(\n        dict=NamedTupleMeta.__prepare__('NamedTuple', (object, )),\n        doc=\"NamedTuple base class.\\n\\n    Derive from this class to define new NamedTuples.\\n\\n\",\n        ns=globals(),\n        )\n@namedtuple_dict\ndef __new__(cls, *args, **kwds):\n    if cls._size_ is TupleSize.fixed and len(args) > cls._defined_len_:\n        raise TypeError('%d fields expected, %d received' % (cls._defined_len_, len(args)))\n    unknown = set(kwds) - set(cls._fields_) - set(cls._aliases_)",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum._tuple",
        "description": "dbus-serialbattery.ext.aenum._tuple",
        "peekOfCode": "NamedTuple = NamedTupleMeta('NamedTuple', (object, ), namedtuple_dict.resolve())\ndel namedtuple_dict",
        "detail": "dbus-serialbattery.ext.aenum._tuple",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestCase(unittest.TestCase):\n    def __init__(self, *args, **kwds):\n        regex = getattr(self, 'assertRaisesRegex', None)\n        if regex is None:\n            self.assertRaisesRegex = getattr(self, 'assertRaisesRegexp')\n        super(TestCase, self).__init__(*args, **kwds)\n# for pickle tests\ntry:\n    class Stooges(Enum):\n        LARRY = 1",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "classproperty",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class classproperty(object):\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n        self.fget = fget\n        self.fset = fset\n        self.fdel = fdel\n        if doc is None and fget is not None:\n            doc = fget.__doc__\n        self.__doc__ = doc\n    def __get__(self, instance, ownerclass):\n        return self.fget(ownerclass)",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestOrder",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestOrder(TestCase):\n    \"\"\"\n    Test _order_ extra/missing members.\n    \"\"\"\n    def test_same_members(self):\n        class Color(Enum):\n            _order_ = 'red green blue'\n            red = 1\n            green = 2\n            blue = 3",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestAutoValue",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestAutoValue(TestCase):\n    def test_bare(self):\n        #\n        class BareEnum(Enum):\n            _order_ = 'ONE TWO THREE'\n            ONE = auto()\n            TWO = auto()\n            THREE = auto()\n        self.assertEqual(BareEnum.THREE.value, 3)\n        #",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestHelpers",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestHelpers(TestCase):\n    # is_descriptor, is_sunder, is_dunder\n    def test_is_descriptor(self):\n        class foo:\n            pass\n        for attr in ('__get__','__set__','__delete__'):\n            obj = foo()\n            self.assertFalse(aenum.is_descriptor(obj))\n            setattr(obj, attr, 1)\n            self.assertTrue(aenum.is_descriptor(obj))",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestEnumType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestEnumType(TestCase):\n    def test_immutability(self):\n        class Hah(object):\n            @classproperty\n            def all_values(cls):\n                return [m.value for m in cls]\n        class Huh(Hah, Enum):\n            one = 1\n            two = 2\n        self.assertRaisesRegex(AttributeError, 'cannot rebind property', setattr, Huh, 'value', 'boom')",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestEnum(TestCase):\n    def setUp(self):\n        class Season(Enum):\n            SPRING = 1\n            SUMMER = 2\n            AUTUMN = 3\n            WINTER = 4\n        self.Season = Season\n        class ReprKonstants(float, ReprEnum):\n            E = 2.7182818",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestStrEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestStrEnum(TestCase):\n    def test_set_name(self):\n        class Descriptor(object):\n            name = None\n            def __get__(self, instance, owner_class=None):\n                if instance is None:\n                    return self\n                else:\n                    return instance.__dict__[self.name]\n            def __set__(self, instance, value):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestFlag",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestFlag(TestCase):\n    \"\"\"Tests of the Flags.\"\"\"\n    def setUp(self):\n        class Perm(Flag):\n            _order_ = 'R W X'\n            R, W, X = 4, 2, 1\n        self.Perm = Perm\n        #\n        class Color(Flag):\n            BLACK = 0",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestIntFlag",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestIntFlag(TestCase):\n    \"\"\"Tests of the IntFlags.\"\"\"\n    def setUp(self):\n        #\n        class Perm(IntFlag):\n            _order_ = 'R W X'\n            R = 1 << 2\n            W = 1 << 1\n            X = 1 << 0\n        #",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestEmptyAndNonLatinStrings",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestEmptyAndNonLatinStrings(unittest.TestCase):\n    def test_empty_string(self):\n        with self.assertRaises(ValueError):\n            empty_abc = Enum('empty_abc', ('', 'B', 'C'))\n    def test_non_latin_character_string(self):\n        greek_abc = Enum('greek_abc', ('\\u03B1', 'B', 'C'))\n        item = getattr(greek_abc, '\\u03B1')\n        self.assertEqual(item.value, 1)\n    def test_non_latin_number_string(self):\n        hebrew_123 = Enum('hebrew_123', ('\\u05D0', '2', '3'))",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestUnique",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestUnique(TestCase):\n    \"\"\"2.4 doesn't allow class decorators, use function syntax.\"\"\"\n    def test_unique_clean(self):\n        class Clean(Enum):\n            one = 1\n            two = 'dos'\n            tres = 4.0\n        unique(Clean)\n        class Cleaner(IntEnum):\n            single = 1",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestNamedTuple",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestNamedTuple(TestCase):\n    def test_explicit_indexing(self):\n        class Person(NamedTuple):\n            age = 0\n            first = 1\n            last = 2\n        p1 = Person(17, 'John', 'Doe')\n        p2 = Person(21, 'Jane', 'Doe')\n        self.assertEqual(p1[0], 17)\n        self.assertEqual(p1[1], 'John')",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestNamedConstant",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestNamedConstant(TestCase):\n    def test_constantness(self):\n        class K(NamedConstant):\n            PI = 3.141596\n            TAU = 2 * PI\n        self.assertEqual(K.PI, 3.141596)\n        self.assertEqual(K.TAU, 2 * K.PI)\n        with self.assertRaisesRegex(AttributeError, r'cannot rebind constant'):\n            K.PI = 9\n        with self.assertRaisesRegex(AttributeError, r'cannot delete constant'):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestStarImport",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestStarImport(TestCase):\n    def test_all_exports_names(self):\n        scope = {}\n        exec('from aenum import *', scope, scope)\n        self.assertIn('Enum', scope)\nclass TestStackoverflowAnswers(TestCase):\n    def test_self_referential_directions(self):\n        # https://stackoverflow.com/a/64000706/208880\n        class Directions(Enum):\n            _order_ = 'NORTH WEST SOUTH EAST'",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestStackoverflowAnswers",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestStackoverflowAnswers(TestCase):\n    def test_self_referential_directions(self):\n        # https://stackoverflow.com/a/64000706/208880\n        class Directions(Enum):\n            _order_ = 'NORTH WEST SOUTH EAST'\n            #\n            NORTH = 1, 0\n            WEST = 0, 1\n            SOUTH = -1, 0\n            EAST = 0, -1",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestExtendEnum",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestExtendEnum(TestCase):\n    def test_extend_enum_plain(self):\n        class Color(Enum):\n            red = 1\n            green = 2\n            blue = 3\n        self.assertRaisesRegex(TypeError, 'already in use as', extend_enum, Color, 'blue', 5)\n        #\n        extend_enum(Color, 'brown', 4)\n        self.assertEqual(Color.brown.name, 'brown')",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestIssues",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestIssues(TestCase):\n    def test_auto_multi_int(self):\n        class Measurement(int, MultiValueEnum, AddValueEnum):\n            _order_ = 'one two three'\n            _start_ = 0\n            one = \"20110721\"\n            two = \"20120911\"\n            three = \"20110518\"\n        self.assertEqual([m.value for m in Measurement], [0, 1, 2])\n        self.assertEqual([m.name for m in Measurement], ['one', 'two', 'three'])",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestConvert",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "class TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted\n        # instead.\n        g = globals()\n        for suffix in ['A', 'B', 'C', 'D', 'E', 'F']:\n            g['CONVERT_TEST_NAME_%s' % suffix] = 5\n            g['CONVERT_STRING_TEST_NAME_%s' % suffix] = 5\n        for suffix, value in (('A', 5), ('B', (9, 1)), ('C', 'value')):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "load_tests",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "def load_tests(loader, tests, ignore):\n    tests.addTests(doctest.DocTestSuite(aenum))\n    tests.addTests(doctest.DocFileSuite(\n        'doc/aenum.rst',\n        package=aenum,\n        optionflags=doctest.ELLIPSIS|doctest.NORMALIZE_WHITESPACE,\n        ))\n    return tests\nclass TestCase(unittest.TestCase):\n    def __init__(self, *args, **kwds):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "test_pickle_dump_load",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "def test_pickle_dump_load(assertion, source, target=None, protocol=(0, HIGHEST_PROTOCOL)):\n    start, stop = protocol\n    failures = []\n    for protocol in range(start, stop+1):\n        try:\n            if target is None:\n                assertion(loads(dumps(source, protocol=protocol)), source)\n            else:\n                assertion(loads(dumps(source, protocol=protocol)), target)\n        except Exception:",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "test_pickle_exception",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "def test_pickle_exception(assertion, exception, obj,\n        protocol=(0, HIGHEST_PROTOCOL)):\n    start, stop = protocol\n    failures = []\n    for protocol in range(start, stop+1):\n        try:\n            assertion(exception, dumps, obj, protocol=protocol)\n        except Exception:\n            exc = sys.exc_info()[1]\n            failures.append('%d: %s %s' % (protocol, exc.__class__.__name__, exc))",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "enum_dir",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "def enum_dir(cls):\n        interesting = set(cls._member_names_ + [\n                    '__class__', '__contains__', '__doc__', '__getitem__',\n                    '__iter__', '__len__', '__members__', '__module__',\n                    '__name__',\n                    ])\n        if cls._new_member_ is not object.__new__:\n            interesting.add('__new__')\n        if cls.__init_subclass__ is not Enum.__init_subclass__:\n            interesting.add('__init_subclass__')",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "member_dir",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "def member_dir(member):\n    if member.__class__._member_type_ is object:\n        allowed = set(['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'value'])\n    else:\n        allowed = set(dir(member))\n    for cls in member.__class__.mro():\n        for name, obj in cls.__dict__.items():\n            if name[0] == '_':\n                continue\n            if isinstance(obj, enum.property):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "MODULE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "MODULE = __name__\nSHORT_MODULE = MODULE.split('.')[-1]\ndef load_tests(loader, tests, ignore):\n    tests.addTests(doctest.DocTestSuite(aenum))\n    tests.addTests(doctest.DocFileSuite(\n        'doc/aenum.rst',\n        package=aenum,\n        optionflags=doctest.ELLIPSIS|doctest.NORMALIZE_WHITESPACE,\n        ))\n    return tests",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "SHORT_MODULE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "SHORT_MODULE = MODULE.split('.')[-1]\ndef load_tests(loader, tests, ignore):\n    tests.addTests(doctest.DocTestSuite(aenum))\n    tests.addTests(doctest.DocFileSuite(\n        'doc/aenum.rst',\n        package=aenum,\n        optionflags=doctest.ELLIPSIS|doctest.NORMALIZE_WHITESPACE,\n        ))\n    return tests\nclass TestCase(unittest.TestCase):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_NAME_D",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_NAME_D = 5\nCONVERT_TEST_NAME_C = 5\nCONVERT_TEST_NAME_B = 5\nCONVERT_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_TEST_NAME_E = 5\nCONVERT_TEST_NAME_F = 5\nCONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_NAME_C",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_NAME_C = 5\nCONVERT_TEST_NAME_B = 5\nCONVERT_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_TEST_NAME_E = 5\nCONVERT_TEST_NAME_F = 5\nCONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_NAME_B",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_NAME_B = 5\nCONVERT_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_TEST_NAME_E = 5\nCONVERT_TEST_NAME_F = 5\nCONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_NAME_A",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_TEST_NAME_E = 5\nCONVERT_TEST_NAME_F = 5\nCONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_NAME_E",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_NAME_E = 5\nCONVERT_TEST_NAME_F = 5\nCONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_NAME_F",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_NAME_F = 5\nCONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_SIGABRT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_SIGABRT = 4 # and this one\nCONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_SIGIOT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_SIGIOT = 4\nCONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_EIO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_EIO = 7\nCONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_TEST_EBUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_TEST_EBUS = 7    # and this one\nCONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STRING_TEST_NAME_D",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STRING_TEST_NAME_D = 5\nCONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STRING_TEST_NAME_C",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STRING_TEST_NAME_C = 5\nCONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STRING_TEST_NAME_B",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STRING_TEST_NAME_B = 5\nCONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STRING_TEST_NAME_A",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STRING_TEST_NAME_A = 5  # This one should sort first.\nCONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STRING_TEST_NAME_E",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STRING_TEST_NAME_E = 5\nCONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STRING_TEST_NAME_F",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STRING_TEST_NAME_F = 5\n# global names for StrEnum._convert_ test\nCONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j\nCOMPLEX_A = 2j",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STR_TEST_2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STR_TEST_2 = 'goodbye'\nCONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j\nCOMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "CONVERT_STR_TEST_1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "CONVERT_STR_TEST_1 = 'hello'\n# We also need values that cannot be compared:\nUNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j\nCOMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "UNCOMPARABLE_A",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "UNCOMPARABLE_A = 5\nUNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j\nCOMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "UNCOMPARABLE_C",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "UNCOMPARABLE_C = (9, 1)  # naming order is broken on purpose\nUNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j\nCOMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted\n        # instead.",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "UNCOMPARABLE_B",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "UNCOMPARABLE_B = 'value'\nCOMPLEX_C = 1j\nCOMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted\n        # instead.\n        g = globals()",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "COMPLEX_C",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "COMPLEX_C = 1j\nCOMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted\n        # instead.\n        g = globals()\n        for suffix in ['A', 'B', 'C', 'D', 'E', 'F']:",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "COMPLEX_A",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "COMPLEX_A = 2j\nCOMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted\n        # instead.\n        g = globals()\n        for suffix in ['A', 'B', 'C', 'D', 'E', 'F']:\n            g['CONVERT_TEST_NAME_%s' % suffix] = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "COMPLEX_B",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.aenum.test",
        "description": "dbus-serialbattery.ext.aenum.test",
        "peekOfCode": "COMPLEX_B = 3j\nclass TestConvert(TestCase):\n    def tearDown(self):\n        # Reset the module-level test variables to their original integer\n        # values, otherwise the already created enum values get converted\n        # instead.\n        g = globals()\n        for suffix in ['A', 'B', 'C', 'D', 'E', 'F']:\n            g['CONVERT_TEST_NAME_%s' % suffix] = 5\n            g['CONVERT_STRING_TEST_NAME_%s' % suffix] = 5",
        "detail": "dbus-serialbattery.ext.aenum.test",
        "documentation": {}
    },
    {
        "label": "TestEnumV3",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v3",
        "description": "dbus-serialbattery.ext.aenum.test_v3",
        "peekOfCode": "class TestEnumV3(TestCase):\n    def setUp(self):\n        class Season(Enum):\n            SPRING = 1\n            SUMMER = 2\n            AUTUMN = 3\n            WINTER = 4\n        self.Season = Season\n        class Konstants(float, Enum):\n            E = 2.7182818",
        "detail": "dbus-serialbattery.ext.aenum.test_v3",
        "documentation": {}
    },
    {
        "label": "TestOrderV3",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v3",
        "description": "dbus-serialbattery.ext.aenum.test_v3",
        "peekOfCode": "class TestOrderV3(TestCase):\n    \"\"\"\n    Test definition order versus _order_ order.\n    \"\"\"\n    def test_same_members(self):\n        class Color(Enum):\n            _order_ = 'red green blue'\n            red = 1\n            green = 2\n            blue = 3",
        "detail": "dbus-serialbattery.ext.aenum.test_v3",
        "documentation": {}
    },
    {
        "label": "TestNamedTupleV3",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v3",
        "description": "dbus-serialbattery.ext.aenum.test_v3",
        "peekOfCode": "class TestNamedTupleV3(TestCase):\n    def test_fixed_size(self):\n        class Book(NamedTuple, size=TupleSize.fixed):\n            title = 0\n            author = 1\n            genre = 2\n        b = Book('Teckla', 'Steven Brust', 'fantasy')\n        self.assertTrue('Teckla' in b)\n        self.assertTrue('Steven Brust' in b)\n        self.assertTrue('fantasy' in b)",
        "detail": "dbus-serialbattery.ext.aenum.test_v3",
        "documentation": {}
    },
    {
        "label": "TestStackoverflowAnswersV3",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v3",
        "description": "dbus-serialbattery.ext.aenum.test_v3",
        "peekOfCode": "class TestStackoverflowAnswersV3(TestCase):\n    def test_self_referential_directions(self):\n        # https://stackoverflow.com/a/64000706/208880\n        class Directions(Enum):\n            #\n            NORTH = 1, 0\n            WEST = 0, 1\n            SOUTH = -1, 0\n            EAST = 0, -1\n            #",
        "detail": "dbus-serialbattery.ext.aenum.test_v3",
        "documentation": {}
    },
    {
        "label": "TestIssuesV3",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v3",
        "description": "dbus-serialbattery.ext.aenum.test_v3",
        "peekOfCode": "class TestIssuesV3(TestCase):\n    \"\"\"\n    Problems that were stated in issues.\n    \"\"\"\n    def test_auto_multi_int_1(self):\n        class Measurement(int, AddValueEnum, MultiValueEnum, start=0):\n            one = \"20110721\"\n            two = \"20120911\"\n            three = \"20110518\"\n        self.assertEqual([m.value for m in Measurement], [0, 1, 2])",
        "detail": "dbus-serialbattery.ext.aenum.test_v3",
        "documentation": {}
    },
    {
        "label": "TestExtendEnumV3",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v3",
        "description": "dbus-serialbattery.ext.aenum.test_v3",
        "peekOfCode": "class TestExtendEnumV3(TestCase):\n    def test_extend_enum_plain(self):\n        class Color(Enum):\n            red = 1\n            green = 2\n            blue = 3\n        self.assertRaisesRegex(TypeError, '.blue. already in use as .Color.blue: 3.', extend_enum, Color, 'blue', 5)\n        #\n        extend_enum(Color, 'brown', 4)\n        self.assertEqual(Color.brown.name, 'brown')",
        "detail": "dbus-serialbattery.ext.aenum.test_v3",
        "documentation": {}
    },
    {
        "label": "TestEnumV37",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.aenum.test_v37",
        "description": "dbus-serialbattery.ext.aenum.test_v37",
        "peekOfCode": "class TestEnumV37(TestCase):\n        def test_repr_with_dataclass(self):\n            \"ensure dataclass-mixin has correct repr()\"\n            #\n            # check overridden dataclass __repr__ is used\n            #\n            from dataclasses import dataclass, field\n            @dataclass(repr=False)\n            class Foo:\n                __qualname__ = 'Foo'",
        "detail": "dbus-serialbattery.ext.aenum.test_v37",
        "documentation": {}
    },
    {
        "label": "OrPattern",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "peekOfCode": "class OrPattern(NamedTuple):\n    \"\"\"\n    BlueZ advertisement monitor or-pattern.\n    https://github.com/bluez/bluez/blob/master/doc/org.bluez.AdvertisementMonitor.rst#arrayuint8-uint8-arraybyte-patterns-read-only-optional\n    \"\"\"\n    start_position: int\n    ad_data_type: AdvertisementDataType\n    content_of_pattern: bytes\n# Windows has a similar structure, so we allow generic tuple for cross-platform compatibility\nOrPatternLike = Union[OrPattern, Tuple[int, AdvertisementDataType, bytes]]",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "documentation": {}
    },
    {
        "label": "AdvertisementMonitor",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "peekOfCode": "class AdvertisementMonitor(ServiceInterface):\n    \"\"\"\n    Implementation of the org.bluez.AdvertisementMonitor1 D-Bus interface.\n    The BlueZ advertisement monitor API design seems to be just for device\n    presence (is it in range or out of range), but this isn't really what\n    we want in Bleak, we want to monitor changes in advertisement data, just\n    like in active scanning.\n    So the only thing we are using here is the \"or_patterns\" since it is\n    currently required, but really we don't need that either. Hopefully an\n    \"all\" \"Type\" could be added to BlueZ in the future.",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass OrPattern(NamedTuple):\n    \"\"\"\n    BlueZ advertisement monitor or-pattern.\n    https://github.com/bluez/bluez/blob/master/doc/org.bluez.AdvertisementMonitor.rst#arrayuint8-uint8-arraybyte-patterns-read-only-optional\n    \"\"\"\n    start_position: int\n    ad_data_type: AdvertisementDataType\n    content_of_pattern: bytes\n# Windows has a similar structure, so we allow generic tuple for cross-platform compatibility",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "documentation": {}
    },
    {
        "label": "OrPatternLike",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "peekOfCode": "OrPatternLike = Union[OrPattern, Tuple[int, AdvertisementDataType, bytes]]\nclass AdvertisementMonitor(ServiceInterface):\n    \"\"\"\n    Implementation of the org.bluez.AdvertisementMonitor1 D-Bus interface.\n    The BlueZ advertisement monitor API design seems to be just for device\n    presence (is it in range or out of range), but this isn't really what\n    we want in Bleak, we want to monitor changes in advertisement data, just\n    like in active scanning.\n    So the only thing we are using here is the \"or_patterns\" since it is\n    currently required, but really we don't need that either. Hopefully an",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.advertisement_monitor",
        "documentation": {}
    },
    {
        "label": "BleakGATTCharacteristicBlueZDBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.characteristic",
        "peekOfCode": "class BleakGATTCharacteristicBlueZDBus(BleakGATTCharacteristic):\n    \"\"\"GATT Characteristic implementation for the BlueZ DBus backend\"\"\"\n    def __init__(\n        self,\n        obj: GattCharacteristic1,\n        object_path: str,\n        service_uuid: str,\n        service_handle: int,\n        max_write_without_response_size: Callable[[], int],\n    ):",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.characteristic",
        "documentation": {}
    },
    {
        "label": "_GattCharacteristicsFlagsEnum",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.characteristic",
        "peekOfCode": "_GattCharacteristicsFlagsEnum = {\n    0x0001: \"broadcast\",\n    0x0002: \"read\",\n    0x0004: \"write-without-response\",\n    0x0008: \"write\",\n    0x0010: \"notify\",\n    0x0020: \"indicate\",\n    0x0040: \"authenticated-signed-writes\",\n    0x0080: \"extended-properties\",\n    0x0100: \"reliable-write\",",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.characteristic",
        "documentation": {}
    },
    {
        "label": "BleakClientBlueZDBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.client",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.client",
        "peekOfCode": "class BleakClientBlueZDBus(BaseBleakClient):\n    \"\"\"A native Linux Bleak Client\n    Implemented by using the `BlueZ DBUS API <https://docs.ubuntu.com/core/en/stacks/bluetooth/bluez/docs/reference/dbus-api>`_.\n    Args:\n        address_or_ble_device (`BLEDevice` or str): The Bluetooth address of the BLE peripheral to connect to or the `BLEDevice` object representing it.\n        services: Optional list of service UUIDs that will be used.\n    Keyword Args:\n        timeout (float): Timeout for required ``BleakScanner.find_device_by_address`` call. Defaults to 10.0.\n        disconnected_callback (callable): Callback that will be scheduled in the\n            event loop when the client is disconnected. The callable must take one",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.client",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.client",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# prevent tasks from being garbage collected\n_background_tasks: Set[asyncio.Task] = set()\nclass BleakClientBlueZDBus(BaseBleakClient):\n    \"\"\"A native Linux Bleak Client\n    Implemented by using the `BlueZ DBUS API <https://docs.ubuntu.com/core/en/stacks/bluetooth/bluez/docs/reference/dbus-api>`_.\n    Args:\n        address_or_ble_device (`BLEDevice` or str): The Bluetooth address of the BLE peripheral to connect to or the `BLEDevice` object representing it.\n        services: Optional list of service UUIDs that will be used.\n    Keyword Args:",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.client",
        "documentation": {}
    },
    {
        "label": "Adapter1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class Adapter1(TypedDict):\n    Address: str\n    Name: str\n    Alias: str\n    Class: int\n    Powered: bool\n    Discoverable: bool\n    Pairable: bool\n    PairableTimeout: int\n    DiscoverableTimeout: int",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "AdvertisementMonitor1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class AdvertisementMonitor1(TypedDict):\n    Type: str\n    RSSILowThreshold: int\n    RSSIHighThreshold: int\n    RSSILowTimeout: int\n    RSSIHighTimeout: int\n    RSSISamplingPeriod: int\n    Patterns: List[Tuple[int, int, bytes]]\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.AdvertisementMonitorManager.rst\nclass AdvertisementMonitorManager1(TypedDict):",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "AdvertisementMonitorManager1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class AdvertisementMonitorManager1(TypedDict):\n    SupportedMonitorTypes: List[str]\n    SupportedFeatures: List[str]\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Battery.rst\nclass Battery1(TypedDict):\n    SupportedMonitorTypes: List[str]\n    SupportedFeatures: List[str]\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Device.rst\nclass Device1(TypedDict):\n    Address: str",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "Battery1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class Battery1(TypedDict):\n    SupportedMonitorTypes: List[str]\n    SupportedFeatures: List[str]\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Device.rst\nclass Device1(TypedDict):\n    Address: str\n    AddressType: str\n    Name: str\n    Icon: str\n    Class: int",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "Device1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class Device1(TypedDict):\n    Address: str\n    AddressType: str\n    Name: str\n    Icon: str\n    Class: int\n    Appearance: int\n    UUIDs: List[str]\n    Paired: bool\n    Bonded: bool",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GattService1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class GattService1(TypedDict):\n    UUID: str\n    Primary: bool\n    Device: str\n    Includes: List[str]\n    # Handle is server-only and not available in Bleak\nclass GattCharacteristic1(TypedDict):\n    UUID: str\n    Service: str\n    Value: bytes",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GattCharacteristic1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class GattCharacteristic1(TypedDict):\n    UUID: str\n    Service: str\n    Value: bytes\n    WriteAcquired: bool\n    NotifyAcquired: bool\n    Notifying: bool\n    Flags: List[\n        Literal[\n            \"broadcast\",",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GattDescriptor1",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "class GattDescriptor1(TypedDict):\n    UUID: str\n    Characteristic: str\n    Value: bytes\n    Flags: List[\n        Literal[\n            \"read\",\n            \"write\",\n            \"encrypt-read\",\n            \"encrypt-write\",",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "OBJECT_MANAGER_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "OBJECT_MANAGER_INTERFACE = \"org.freedesktop.DBus.ObjectManager\"\nPROPERTIES_INTERFACE = \"org.freedesktop.DBus.Properties\"\n# Bluez specific DBUS\nBLUEZ_SERVICE = \"org.bluez\"\nADAPTER_INTERFACE = \"org.bluez.Adapter1\"\nADVERTISEMENT_MONITOR_INTERFACE = \"org.bluez.AdvertisementMonitor1\"\nADVERTISEMENT_MONITOR_MANAGER_INTERFACE = \"org.bluez.AdvertisementMonitorManager1\"\nDEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "PROPERTIES_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "PROPERTIES_INTERFACE = \"org.freedesktop.DBus.Properties\"\n# Bluez specific DBUS\nBLUEZ_SERVICE = \"org.bluez\"\nADAPTER_INTERFACE = \"org.bluez.Adapter1\"\nADVERTISEMENT_MONITOR_INTERFACE = \"org.bluez.AdvertisementMonitor1\"\nADVERTISEMENT_MONITOR_MANAGER_INTERFACE = \"org.bluez.AdvertisementMonitorManager1\"\nDEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "BLUEZ_SERVICE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "BLUEZ_SERVICE = \"org.bluez\"\nADAPTER_INTERFACE = \"org.bluez.Adapter1\"\nADVERTISEMENT_MONITOR_INTERFACE = \"org.bluez.AdvertisementMonitor1\"\nADVERTISEMENT_MONITOR_MANAGER_INTERFACE = \"org.bluez.AdvertisementMonitorManager1\"\nDEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "ADAPTER_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "ADAPTER_INTERFACE = \"org.bluez.Adapter1\"\nADVERTISEMENT_MONITOR_INTERFACE = \"org.bluez.AdvertisementMonitor1\"\nADVERTISEMENT_MONITOR_MANAGER_INTERFACE = \"org.bluez.AdvertisementMonitorManager1\"\nDEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "ADVERTISEMENT_MONITOR_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "ADVERTISEMENT_MONITOR_INTERFACE = \"org.bluez.AdvertisementMonitor1\"\nADVERTISEMENT_MONITOR_MANAGER_INTERFACE = \"org.bluez.AdvertisementMonitorManager1\"\nDEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "ADVERTISEMENT_MONITOR_MANAGER_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "ADVERTISEMENT_MONITOR_MANAGER_INTERFACE = \"org.bluez.AdvertisementMonitorManager1\"\nDEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "DEVICE_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "DEVICE_INTERFACE = \"org.bluez.Device1\"\nBATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "BATTERY_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "BATTERY_INTERFACE = \"org.bluez.Battery1\"\n# GATT interfaces\nGATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst\nclass Adapter1(TypedDict):",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GATT_MANAGER_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "GATT_MANAGER_INTERFACE = \"org.bluez.GattManager1\"\nGATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst\nclass Adapter1(TypedDict):\n    Address: str\n    Name: str",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GATT_PROFILE_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "GATT_PROFILE_INTERFACE = \"org.bluez.GattProfile1\"\nGATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst\nclass Adapter1(TypedDict):\n    Address: str\n    Name: str\n    Alias: str",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GATT_SERVICE_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "GATT_SERVICE_INTERFACE = \"org.bluez.GattService1\"\nGATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst\nclass Adapter1(TypedDict):\n    Address: str\n    Name: str\n    Alias: str\n    Class: int",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GATT_CHARACTERISTIC_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "GATT_CHARACTERISTIC_INTERFACE = \"org.bluez.GattCharacteristic1\"\nGATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst\nclass Adapter1(TypedDict):\n    Address: str\n    Name: str\n    Alias: str\n    Class: int\n    Powered: bool",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "GATT_DESCRIPTOR_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "peekOfCode": "GATT_DESCRIPTOR_INTERFACE = \"org.bluez.GattDescriptor1\"\n# D-Bus properties for interfaces\n# https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst\nclass Adapter1(TypedDict):\n    Address: str\n    Name: str\n    Alias: str\n    Class: int\n    Powered: bool\n    Discoverable: bool",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.defs",
        "documentation": {}
    },
    {
        "label": "BleakGATTDescriptorBlueZDBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.descriptor",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.descriptor",
        "peekOfCode": "class BleakGATTDescriptorBlueZDBus(BleakGATTDescriptor):\n    \"\"\"GATT Descriptor implementation for BlueZ DBus backend\"\"\"\n    def __init__(\n        self,\n        obj: GattDescriptor1,\n        object_path: str,\n        characteristic_uuid: str,\n        characteristic_handle: int,\n    ):\n        super(BleakGATTDescriptorBlueZDBus, self).__init__(obj)",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.descriptor",
        "documentation": {}
    },
    {
        "label": "DeviceConditionCallback",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "class DeviceConditionCallback(NamedTuple):\n    \"\"\"\n    Encapsulates a :data:`DevicePropertiesChangedCallback` and the property name being watched.\n    \"\"\"\n    callback: DevicePropertiesChangedCallback\n    \"\"\"\n    The callback.\n    \"\"\"\n    property_name: str\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "DeviceRemovedCallbackAndState",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "class DeviceRemovedCallbackAndState(NamedTuple):\n    \"\"\"\n    Encapsulates an :data:`DeviceRemovedCallback` and some state.\n    \"\"\"\n    callback: DeviceRemovedCallback\n    \"\"\"\n    The callback.\n    \"\"\"\n    adapter_path: str\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "DeviceWatcher",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "class DeviceWatcher(NamedTuple):\n    device_path: str\n    \"\"\"\n    The D-Bus object path of the device.\n    \"\"\"\n    on_connected_changed: DeviceConnectedChangedCallback\n    \"\"\"\n    A callback that is called when a device's \"Connected\" property changes.\n    \"\"\"\n    on_characteristic_value_changed: CharacteristicValueChangedCallback",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "BlueZManager",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "class BlueZManager:\n    \"\"\"\n    BlueZ D-Bus object manager.\n    Use :func:`bleak.backends.bluezdbus.get_global_bluez_manager` to get the global instance.\n    \"\"\"\n    def __init__(self):\n        self._bus: Optional[MessageBus] = None\n        self._bus_lock = asyncio.Lock()\n        # dict of object path: dict of interface name: dict of property name: property value\n        self._properties: Dict[str, Dict[str, Dict[str, Any]]] = {}",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nAdvertisementCallback = Callable[[str, Device1], None]\n\"\"\"\nA callback that is called when advertisement data is received.\nArgs:\n    arg0: The D-Bus object path of the device.\n    arg1: The D-Bus properties of the device object.\n\"\"\"\nDevicePropertiesChangedCallback = Callable[[Optional[Any]], None]\n\"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "AdvertisementCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "AdvertisementCallback = Callable[[str, Device1], None]\n\"\"\"\nA callback that is called when advertisement data is received.\nArgs:\n    arg0: The D-Bus object path of the device.\n    arg1: The D-Bus properties of the device object.\n\"\"\"\nDevicePropertiesChangedCallback = Callable[[Optional[Any]], None]\n\"\"\"\nA callback that is called when the properties of a device change in BlueZ.",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "DevicePropertiesChangedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "DevicePropertiesChangedCallback = Callable[[Optional[Any]], None]\n\"\"\"\nA callback that is called when the properties of a device change in BlueZ.\nArgs:\n    arg0: The new property value.\n\"\"\"\nclass DeviceConditionCallback(NamedTuple):\n    \"\"\"\n    Encapsulates a :data:`DevicePropertiesChangedCallback` and the property name being watched.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "DeviceRemovedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "DeviceRemovedCallback = Callable[[str], None]\n\"\"\"\nA callback that is called when a device is removed from BlueZ.\nArgs:\n    arg0: The D-Bus object path of the device.\n\"\"\"\nclass DeviceRemovedCallbackAndState(NamedTuple):\n    \"\"\"\n    Encapsulates an :data:`DeviceRemovedCallback` and some state.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "DeviceConnectedChangedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "DeviceConnectedChangedCallback = Callable[[bool], None]\n\"\"\"\nA callback that is called when a device's \"Connected\" property changes.\nArgs:\n    arg0: The current value of the \"Connected\" property.\n\"\"\"\nCharacteristicValueChangedCallback = Callable[[str, bytes], None]\n\"\"\"\nA callback that is called when a characteristics's \"Value\" property changes.\nArgs:",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "CharacteristicValueChangedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "CharacteristicValueChangedCallback = Callable[[str, bytes], None]\n\"\"\"\nA callback that is called when a characteristics's \"Value\" property changes.\nArgs:\n    arg0: The D-Bus object path of the characteristic.\n    arg1: The current value of the \"Value\" property.\n\"\"\"\nclass DeviceWatcher(NamedTuple):\n    device_path: str\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "_ADVERTISING_DATA_PROPERTIES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "peekOfCode": "_ADVERTISING_DATA_PROPERTIES = {\n    \"AdvertisingData\",\n    \"AdvertisingFlags\",\n    \"ManufacturerData\",\n    \"Name\",\n    \"ServiceData\",\n    \"UUIDs\",\n}\nclass BlueZManager:\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.manager",
        "documentation": {}
    },
    {
        "label": "BlueZDiscoveryFilters",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "peekOfCode": "class BlueZDiscoveryFilters(TypedDict, total=False):\n    \"\"\"\n    Dictionary of arguments for the ``org.bluez.Adapter1.SetDiscoveryFilter``\n    D-Bus method.\n    https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst#void-setdiscoveryfilterdict-filter\n    \"\"\"\n    UUIDs: List[str]\n    \"\"\"\n    Filter by service UUIDs, empty means match _any_ UUID.\n    Normally, the ``service_uuids`` argument of :class:`bleak.BleakScanner`",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "documentation": {}
    },
    {
        "label": "BlueZScannerArgs",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "peekOfCode": "class BlueZScannerArgs(TypedDict, total=False):\n    \"\"\"\n    :class:`BleakScanner` args that are specific to the BlueZ backend.\n    \"\"\"\n    filters: BlueZDiscoveryFilters\n    \"\"\"\n    Filters to pass to the adapter SetDiscoveryFilter D-Bus method.\n    Only used for active scanning.\n    \"\"\"\n    or_patterns: List[OrPatternLike]",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "documentation": {}
    },
    {
        "label": "BleakScannerBlueZDBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "peekOfCode": "class BleakScannerBlueZDBus(BaseBleakScanner):\n    \"\"\"The native Linux Bleak BLE Scanner.\n    For possible values for `filters`, see the parameters to the\n    ``SetDiscoveryFilter`` method in the `BlueZ docs\n    <https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst#void-setdiscoveryfilterdict-filter>`_\n    Args:\n        detection_callback:\n            Optional function that will be called each time a device is\n            discovered or advertising data has changed.\n        service_uuids:",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BlueZDiscoveryFilters(TypedDict, total=False):\n    \"\"\"\n    Dictionary of arguments for the ``org.bluez.Adapter1.SetDiscoveryFilter``\n    D-Bus method.\n    https://github.com/bluez/bluez/blob/master/doc/org.bluez.Adapter.rst#void-setdiscoveryfilterdict-filter\n    \"\"\"\n    UUIDs: List[str]\n    \"\"\"\n    Filter by service UUIDs, empty means match _any_ UUID.",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.scanner",
        "documentation": {}
    },
    {
        "label": "BleakGATTServiceBlueZDBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.service",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.service",
        "peekOfCode": "class BleakGATTServiceBlueZDBus(BleakGATTService):\n    \"\"\"GATT Service implementation for the BlueZ DBus backend\"\"\"\n    def __init__(self, obj: Any, path: str):\n        super().__init__(obj)\n        self.__characteristics = []\n        self.__path = path\n        self.__handle = extract_service_handle_from_path(path)\n    @property\n    def uuid(self) -> str:\n        \"\"\"The UUID to this service\"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.service",
        "documentation": {}
    },
    {
        "label": "InvalidMessageTypeError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "class InvalidMessageTypeError(TypeError):\n    def __init__(self, type: str):\n        super().__init__(f\"invalid message type: {type}\")\ndef is_message_type_valid(type: str) -> bool:\n    \"\"\"Whether this is a valid message type.\n    .. seealso:: https://dbus.freedesktop.org/doc/dbus-specification.html#message-bus-routing-match-rules\n    :param type: The message type to validate.\n    :type name: str\n    :returns: Whether the name is a valid message type.\n    :rtype: bool",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "MatchRules",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "class MatchRules:\n    \"\"\"D-Bus signal match rules.\n    .. seealso:: https://dbus.freedesktop.org/doc/dbus-specification.html#message-bus-routing-match-rules\n    \"\"\"\n    def __init__(\n        self,\n        type: str = \"signal\",\n        sender: Optional[str] = None,\n        interface: Optional[str] = None,\n        member: Optional[str] = None,",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "is_message_type_valid",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "def is_message_type_valid(type: str) -> bool:\n    \"\"\"Whether this is a valid message type.\n    .. seealso:: https://dbus.freedesktop.org/doc/dbus-specification.html#message-bus-routing-match-rules\n    :param type: The message type to validate.\n    :type name: str\n    :returns: Whether the name is a valid message type.\n    :rtype: bool\n    \"\"\"\n    return type in _message_types\ndef assert_bus_name_valid(type: str) -> None:",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "assert_bus_name_valid",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "def assert_bus_name_valid(type: str) -> None:\n    \"\"\"Raise an error if this is not a valid message type.\n    .. seealso:: https://dbus.freedesktop.org/doc/dbus-specification.html#message-bus-routing-match-rules\n    :param type: The message type to validate.\n    :type name: str\n    :raises:\n        - :class:`InvalidMessageTypeError` - If this is not a valid message type.\n    \"\"\"\n    if not is_message_type_valid(type):\n        raise InvalidMessageTypeError(type)",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "add_match",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "def add_match(bus: MessageBus, rules: MatchRules) -> Coroutine[Any, Any, Message]:\n    \"\"\"Calls org.freedesktop.DBus.AddMatch using ``rules``.\"\"\"\n    return bus.call(\n        Message(\n            destination=\"org.freedesktop.DBus\",\n            interface=\"org.freedesktop.DBus\",\n            path=\"/org/freedesktop/DBus\",\n            member=\"AddMatch\",\n            signature=\"s\",\n            body=[str(rules)],",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "remove_match",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "def remove_match(bus: MessageBus, rules: MatchRules) -> Coroutine[Any, Any, Message]:\n    \"\"\"Calls org.freedesktop.DBus.RemoveMatch using ``rules``.\"\"\"\n    return bus.call(\n        Message(\n            destination=\"org.freedesktop.DBus\",\n            interface=\"org.freedesktop.DBus\",\n            path=\"/org/freedesktop/DBus\",\n            member=\"RemoveMatch\",\n            signature=\"s\",\n            body=[str(rules)],",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "_message_types",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "peekOfCode": "_message_types = [\"signal\", \"method_call\", \"method_return\", \"error\"]\nclass InvalidMessageTypeError(TypeError):\n    def __init__(self, type: str):\n        super().__init__(f\"invalid message type: {type}\")\ndef is_message_type_valid(type: str) -> bool:\n    \"\"\"Whether this is a valid message type.\n    .. seealso:: https://dbus.freedesktop.org/doc/dbus-specification.html#message-bus-routing-match-rules\n    :param type: The message type to validate.\n    :type name: str\n    :returns: Whether the name is a valid message type.",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.signals",
        "documentation": {}
    },
    {
        "label": "assert_reply",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "peekOfCode": "def assert_reply(reply: Message) -> None:\n    \"\"\"Checks that a D-Bus message is a valid reply.\n    Raises:\n        BleakDBusError: if the message type is ``MessageType.ERROR``\n        AssertionError: if the message type is not ``MessageType.METHOD_RETURN``\n    \"\"\"\n    if reply.message_type == MessageType.ERROR:\n        raise BleakDBusError(reply.error_name, reply.body)\n    assert reply.message_type == MessageType.METHOD_RETURN\ndef extract_service_handle_from_path(path: str) -> int:",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "documentation": {}
    },
    {
        "label": "extract_service_handle_from_path",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "peekOfCode": "def extract_service_handle_from_path(path: str) -> int:\n    try:\n        return int(path[-4:], 16)\n    except Exception as e:\n        raise BleakError(f\"Could not parse service handle from path: {path}\") from e\ndef bdaddr_from_device_path(device_path: str) -> str:\n    \"\"\"\n    Scrape the Bluetooth address from a D-Bus device path.\n    Args:\n        device_path: The D-Bus object path of the device.",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "documentation": {}
    },
    {
        "label": "bdaddr_from_device_path",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "peekOfCode": "def bdaddr_from_device_path(device_path: str) -> str:\n    \"\"\"\n    Scrape the Bluetooth address from a D-Bus device path.\n    Args:\n        device_path: The D-Bus object path of the device.\n    Returns:\n        A Bluetooth address as a string.\n    \"\"\"\n    return \":\".join(device_path[-17:].split(\"_\"))\ndef device_path_from_characteristic_path(characteristic_path: str) -> str:",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "documentation": {}
    },
    {
        "label": "device_path_from_characteristic_path",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "peekOfCode": "def device_path_from_characteristic_path(characteristic_path: str) -> str:\n    \"\"\"\n    Scrape the device path from a D-Bus characteristic path.\n    Args:\n        characteristic_path: The D-Bus object path of the characteristic.\n    Returns:\n        A D-Bus object path of the device.\n    \"\"\"\n    # /org/bluez/hci1/dev_FA_23_9D_AA_45_46/service000c/char000d\n    return characteristic_path[:37]",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "documentation": {}
    },
    {
        "label": "get_dbus_authenticator",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "peekOfCode": "def get_dbus_authenticator() -> Optional[AuthExternal]:\n    uid = None\n    try:\n        uid = int(os.environ.get(\"BLEAK_DBUS_AUTH_UID\", \"\"))\n    except ValueError:\n        pass\n    auth = None\n    if uid is not None:\n        auth = AuthExternal(uid=uid)\n    return auth",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.utils",
        "documentation": {}
    },
    {
        "label": "BlueZFeatures",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.version",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.version",
        "peekOfCode": "class BlueZFeatures:\n    \"\"\"Check which features are supported by the BlueZ backend.\"\"\"\n    checked_bluez_version = False\n    supported_version = True\n    can_write_without_response = True\n    write_without_response_workaround_needed = False\n    hides_battery_characteristic = True\n    hides_device_name_characteristic = True\n    _check_bluez_event: Optional[asyncio.Event] = None\n    @classmethod",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.version",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.bluezdbus.version",
        "description": "dbus-serialbattery.ext.bleak.backends.bluezdbus.version",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def _get_bluetoothctl_version() -> Optional[re.Match]:\n    \"\"\"Get the version of bluetoothctl.\"\"\"\n    with contextlib.suppress(Exception):\n        proc = await asyncio.create_subprocess_exec(\n            \"bluetoothctl\", \"--version\", stdout=asyncio.subprocess.PIPE\n        )\n        out = await proc.stdout.read()\n        version = re.search(b\"(\\\\d+).(\\\\d+)\", out.strip(b\"'\"))\n        await proc.wait()",
        "detail": "dbus-serialbattery.ext.bleak.backends.bluezdbus.version",
        "documentation": {}
    },
    {
        "label": "CentralManagerDelegate",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "peekOfCode": "class CentralManagerDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the CentralManger for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBCentralManagerDelegate]\n    def init(self) -> Optional[\"CentralManagerDelegate\"]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(CentralManagerDelegate, self).init()\n        if self is None:\n            return None\n        self.event_loop = asyncio.get_running_loop()\n        self._connect_futures: Dict[NSUUID, asyncio.Future] = {}",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "peekOfCode": "logger = logging.getLogger(__name__)\nCBCentralManagerDelegate = objc.protocolNamed(\"CBCentralManagerDelegate\")\nDisconnectCallback = Callable[[], None]\nclass CentralManagerDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the CentralManger for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBCentralManagerDelegate]\n    def init(self) -> Optional[\"CentralManagerDelegate\"]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(CentralManagerDelegate, self).init()\n        if self is None:",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "documentation": {}
    },
    {
        "label": "CBCentralManagerDelegate",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "peekOfCode": "CBCentralManagerDelegate = objc.protocolNamed(\"CBCentralManagerDelegate\")\nDisconnectCallback = Callable[[], None]\nclass CentralManagerDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the CentralManger for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBCentralManagerDelegate]\n    def init(self) -> Optional[\"CentralManagerDelegate\"]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(CentralManagerDelegate, self).init()\n        if self is None:\n            return None",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "documentation": {}
    },
    {
        "label": "DisconnectCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "peekOfCode": "DisconnectCallback = Callable[[], None]\nclass CentralManagerDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the CentralManger for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBCentralManagerDelegate]\n    def init(self) -> Optional[\"CentralManagerDelegate\"]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(CentralManagerDelegate, self).init()\n        if self is None:\n            return None\n        self.event_loop = asyncio.get_running_loop()",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.CentralManagerDelegate",
        "documentation": {}
    },
    {
        "label": "PeripheralDelegate",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "peekOfCode": "class PeripheralDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the PeripheralDelegate for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBPeripheralDelegate]\n    def initWithPeripheral_(\n        self, peripheral: CBPeripheral\n    ) -> Optional[PeripheralDelegate]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(PeripheralDelegate, self).init()\n        if self is None:\n            return None",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "peekOfCode": "logger = logging.getLogger(__name__)\nCBPeripheralDelegate = objc.protocolNamed(\"CBPeripheralDelegate\")\nCBCharacteristicWriteType = NewType(\"CBCharacteristicWriteType\", int)\nclass PeripheralDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the PeripheralDelegate for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBPeripheralDelegate]\n    def initWithPeripheral_(\n        self, peripheral: CBPeripheral\n    ) -> Optional[PeripheralDelegate]:\n        \"\"\"macOS init function for NSObject\"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "documentation": {}
    },
    {
        "label": "CBPeripheralDelegate",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "peekOfCode": "CBPeripheralDelegate = objc.protocolNamed(\"CBPeripheralDelegate\")\nCBCharacteristicWriteType = NewType(\"CBCharacteristicWriteType\", int)\nclass PeripheralDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the PeripheralDelegate for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBPeripheralDelegate]\n    def initWithPeripheral_(\n        self, peripheral: CBPeripheral\n    ) -> Optional[PeripheralDelegate]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(PeripheralDelegate, self).init()",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "documentation": {}
    },
    {
        "label": "CBCharacteristicWriteType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "peekOfCode": "CBCharacteristicWriteType = NewType(\"CBCharacteristicWriteType\", int)\nclass PeripheralDelegate(NSObject):\n    \"\"\"macOS conforming python class for managing the PeripheralDelegate for BLE\"\"\"\n    ___pyobjc_protocols__ = [CBPeripheralDelegate]\n    def initWithPeripheral_(\n        self, peripheral: CBPeripheral\n    ) -> Optional[PeripheralDelegate]:\n        \"\"\"macOS init function for NSObject\"\"\"\n        self = objc.super(PeripheralDelegate, self).init()\n        if self is None:",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.PeripheralDelegate",
        "documentation": {}
    },
    {
        "label": "CBCharacteristicProperties",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.characteristic",
        "peekOfCode": "class CBCharacteristicProperties(Enum):\n    BROADCAST = 0x1\n    READ = 0x2\n    WRITE_WITHOUT_RESPONSE = 0x4\n    WRITE = 0x8\n    NOTIFY = 0x10\n    INDICATE = 0x20\n    AUTHENTICATED_SIGNED_WRITES = 0x40\n    EXTENDED_PROPERTIES = 0x80\n    NOTIFY_ENCRYPTION_REQUIRED = 0x100",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.characteristic",
        "documentation": {}
    },
    {
        "label": "BleakGATTCharacteristicCoreBluetooth",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.characteristic",
        "peekOfCode": "class BleakGATTCharacteristicCoreBluetooth(BleakGATTCharacteristic):\n    \"\"\"GATT Characteristic implementation for the CoreBluetooth backend\"\"\"\n    def __init__(\n        self, obj: CBCharacteristic, max_write_without_response_size: Callable[[], int]\n    ):\n        super().__init__(obj, max_write_without_response_size)\n        self.__descriptors: List[BleakGATTDescriptorCoreBluetooth] = []\n        # self.__props = obj.properties()\n        self.__props: List[str] = [\n            _GattCharacteristicsPropertiesEnum[v][0]",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.characteristic",
        "documentation": {}
    },
    {
        "label": "BleakClientCoreBluetooth",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.client",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.client",
        "peekOfCode": "class BleakClientCoreBluetooth(BaseBleakClient):\n    \"\"\"CoreBluetooth class interface for BleakClient\n    Args:\n        address_or_ble_device (`BLEDevice` or str): The Bluetooth address of the BLE peripheral to connect to or the `BLEDevice` object representing it.\n        services: Optional set of service UUIDs that will be used.\n    Keyword Args:\n        timeout (float): Timeout for required ``BleakScanner.find_device_by_address`` call. Defaults to 10.0.\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.client",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BleakClientCoreBluetooth(BaseBleakClient):\n    \"\"\"CoreBluetooth class interface for BleakClient\n    Args:\n        address_or_ble_device (`BLEDevice` or str): The Bluetooth address of the BLE peripheral to connect to or the `BLEDevice` object representing it.\n        services: Optional set of service UUIDs that will be used.\n    Keyword Args:\n        timeout (float): Timeout for required ``BleakScanner.find_device_by_address`` call. Defaults to 10.0.\n    \"\"\"\n    def __init__(",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.client",
        "documentation": {}
    },
    {
        "label": "BleakGATTDescriptorCoreBluetooth",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.descriptor",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.descriptor",
        "peekOfCode": "class BleakGATTDescriptorCoreBluetooth(BleakGATTDescriptor):\n    \"\"\"GATT Descriptor implementation for CoreBluetooth backend\"\"\"\n    def __init__(\n        self, obj: CBDescriptor, characteristic_uuid: str, characteristic_handle: int\n    ):\n        super(BleakGATTDescriptorCoreBluetooth, self).__init__(obj)\n        self.obj: CBDescriptor = obj\n        self.__characteristic_uuid: str = characteristic_uuid\n        self.__characteristic_handle: int = characteristic_handle\n    @property",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.descriptor",
        "documentation": {}
    },
    {
        "label": "CBScannerArgs",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "peekOfCode": "class CBScannerArgs(TypedDict, total=False):\n    \"\"\"\n    Platform-specific :class:`BleakScanner` args for the CoreBluetooth backend.\n    \"\"\"\n    use_bdaddr: bool\n    \"\"\"\n    If true, use Bluetooth address instead of UUID.\n    .. warning:: This uses an undocumented IOBluetooth API to get the Bluetooth\n        address and may break in the future macOS releases. `It is known to not\n        work on macOS 10.15 <https://github.com/hbldh/bleak/issues/1286>`_.",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "documentation": {}
    },
    {
        "label": "BleakScannerCoreBluetooth",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "peekOfCode": "class BleakScannerCoreBluetooth(BaseBleakScanner):\n    \"\"\"The native macOS Bleak BLE Scanner.\n    Documentation:\n    https://developer.apple.com/documentation/corebluetooth/cbcentralmanager\n    CoreBluetooth doesn't explicitly use Bluetooth addresses to identify peripheral\n    devices because private devices may obscure their Bluetooth addresses. To cope\n    with this, CoreBluetooth utilizes UUIDs for each peripheral. Bleak uses\n    this for the BLEDevice address on macOS.\n    Args:\n        detection_callback:",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CBScannerArgs(TypedDict, total=False):\n    \"\"\"\n    Platform-specific :class:`BleakScanner` args for the CoreBluetooth backend.\n    \"\"\"\n    use_bdaddr: bool\n    \"\"\"\n    If true, use Bluetooth address instead of UUID.\n    .. warning:: This uses an undocumented IOBluetooth API to get the Bluetooth\n        address and may break in the future macOS releases. `It is known to not",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.scanner",
        "documentation": {}
    },
    {
        "label": "BleakGATTServiceCoreBluetooth",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.service",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.service",
        "peekOfCode": "class BleakGATTServiceCoreBluetooth(BleakGATTService):\n    \"\"\"GATT Characteristic implementation for the CoreBluetooth backend\"\"\"\n    def __init__(self, obj: CBService):\n        super().__init__(obj)\n        self.__characteristics: List[BleakGATTCharacteristicCoreBluetooth] = []\n        # N.B. the `startHandle` method of the CBService is an undocumented Core Bluetooth feature,\n        # which Bleak takes advantage of in order to have a service handle to use.\n        self.__handle: int = int(self.obj.startHandle())\n    @property\n    def handle(self) -> int:",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.service",
        "documentation": {}
    },
    {
        "label": "cb_uuid_to_str",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.corebluetooth.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.corebluetooth.utils",
        "peekOfCode": "def cb_uuid_to_str(uuid: CBUUID) -> str:\n    \"\"\"Converts a CoreBluetooth UUID to a Python string.\n    If ``uuid`` is a 16-bit UUID, it is assumed to be a Bluetooth GATT UUID\n    (``0000xxxx-0000-1000-8000-00805f9b34fb``).\n    Args\n        uuid: The UUID.\n    Returns:\n        The UUID as a lower case Python string (``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx``)\n    \"\"\"\n    return normalize_uuid_str(uuid.UUIDString())",
        "detail": "dbus-serialbattery.ext.bleak.backends.corebluetooth.utils",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.recipes.bleak.fix_setup",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.recipes.bleak.fix_setup",
        "peekOfCode": "VERSION = \"[VERSION]\"  # Version will be filled in by the bleak recipe\nNAME = \"bleak\"\nsetup(\n    name=NAME,\n    version=VERSION,\n    packages=find_packages(exclude=(\"tests\", \"examples\", \"docs\")),\n)",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.recipes.bleak.fix_setup",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.recipes.bleak.fix_setup",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.recipes.bleak.fix_setup",
        "peekOfCode": "NAME = \"bleak\"\nsetup(\n    name=NAME,\n    version=VERSION,\n    packages=find_packages(exclude=(\"tests\", \"examples\", \"docs\")),\n)",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.recipes.bleak.fix_setup",
        "documentation": {}
    },
    {
        "label": "BleakGATTCharacteristicP4Android",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.characteristic",
        "peekOfCode": "class BleakGATTCharacteristicP4Android(BleakGATTCharacteristic):\n    \"\"\"GATT Characteristic implementation for the python-for-android backend\"\"\"\n    def __init__(\n        self,\n        java,\n        service_uuid: str,\n        service_handle: int,\n        max_write_without_response_size: Callable[[], int],\n    ):\n        super(BleakGATTCharacteristicP4Android, self).__init__(",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.characteristic",
        "documentation": {}
    },
    {
        "label": "BleakClientP4Android",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "peekOfCode": "class BleakClientP4Android(BaseBleakClient):\n    \"\"\"A python-for-android Bleak Client\n    Args:\n        address_or_ble_device:\n            The Bluetooth address of the BLE peripheral to connect to or the\n            :class:`BLEDevice` object representing it.\n        services:\n            Optional set of services UUIDs to filter.\n    \"\"\"\n    def __init__(",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "documentation": {}
    },
    {
        "label": "_PythonBluetoothGattCallback",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "peekOfCode": "class _PythonBluetoothGattCallback(utils.AsyncJavaCallbacks):\n    __javainterfaces__ = [\n        \"com.github.hbldh.bleak.PythonBluetoothGattCallback$Interface\"\n    ]\n    def __init__(self, client, loop):\n        super().__init__(loop)\n        self._client = client\n        self.java = defs.PythonBluetoothGattCallback(self)\n    def result_state(self, status, resultApi, *data):\n        if status == defs.BluetoothGatt.GATT_SUCCESS:",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BleakClientP4Android(BaseBleakClient):\n    \"\"\"A python-for-android Bleak Client\n    Args:\n        address_or_ble_device:\n            The Bluetooth address of the BLE peripheral to connect to or the\n            :class:`BLEDevice` object representing it.\n        services:\n            Optional set of services UUIDs to filter.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.client",
        "documentation": {}
    },
    {
        "label": "ScanFailed",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "class ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED\n    APPLICATION_REGISTRATION_FAILED = (\n        ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED\n    )\n    FEATURE_UNSUPPORTED = ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED\n    INTERNAL_ERROR = ScanCallback.SCAN_FAILED_INTERNAL_ERROR\nGATT_SUCCESS = 0x0000\n# TODO: we may need different lookups, e.g. one for bleak.exc.CONTROLLER_ERROR_CODES\nGATT_STATUS_STRINGS = {",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "List",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "List = autoclass(\"java.util.ArrayList\")\nUUID = autoclass(\"java.util.UUID\")\nBluetoothAdapter = autoclass(\"android.bluetooth.BluetoothAdapter\")\nScanCallback = autoclass(\"android.bluetooth.le.ScanCallback\")\nScanFilter = autoclass(\"android.bluetooth.le.ScanFilter\")\nScanFilterBuilder = autoclass(\"android.bluetooth.le.ScanFilter$Builder\")\nScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "UUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "UUID = autoclass(\"java.util.UUID\")\nBluetoothAdapter = autoclass(\"android.bluetooth.BluetoothAdapter\")\nScanCallback = autoclass(\"android.bluetooth.le.ScanCallback\")\nScanFilter = autoclass(\"android.bluetooth.le.ScanFilter\")\nScanFilterBuilder = autoclass(\"android.bluetooth.le.ScanFilter$Builder\")\nScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BluetoothAdapter",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BluetoothAdapter = autoclass(\"android.bluetooth.BluetoothAdapter\")\nScanCallback = autoclass(\"android.bluetooth.le.ScanCallback\")\nScanFilter = autoclass(\"android.bluetooth.le.ScanFilter\")\nScanFilterBuilder = autoclass(\"android.bluetooth.le.ScanFilter$Builder\")\nScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ScanCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ScanCallback = autoclass(\"android.bluetooth.le.ScanCallback\")\nScanFilter = autoclass(\"android.bluetooth.le.ScanFilter\")\nScanFilterBuilder = autoclass(\"android.bluetooth.le.ScanFilter$Builder\")\nScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ScanFilter",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ScanFilter = autoclass(\"android.bluetooth.le.ScanFilter\")\nScanFilterBuilder = autoclass(\"android.bluetooth.le.ScanFilter$Builder\")\nScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ScanFilterBuilder",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ScanFilterBuilder = autoclass(\"android.bluetooth.le.ScanFilter$Builder\")\nScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ScanSettings",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ScanSettings = autoclass(\"android.bluetooth.le.ScanSettings\")\nScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ScanSettingsBuilder",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ScanSettingsBuilder = autoclass(\"android.bluetooth.le.ScanSettings$Builder\")\nBluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BluetoothDevice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BluetoothDevice = autoclass(\"android.bluetooth.BluetoothDevice\")\nBluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BluetoothGatt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BluetoothGatt = autoclass(\"android.bluetooth.BluetoothGatt\")\nBluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BluetoothGattCharacteristic",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BluetoothGattCharacteristic = autoclass(\"android.bluetooth.BluetoothGattCharacteristic\")\nBluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BluetoothGattDescriptor",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BluetoothGattDescriptor = autoclass(\"android.bluetooth.BluetoothGattDescriptor\")\nBluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BluetoothProfile",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BluetoothProfile = autoclass(\"android.bluetooth.BluetoothProfile\")\nPythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "PythonActivity",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "PythonActivity = autoclass(\"org.kivy.android.PythonActivity\")\nParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ParcelUuid",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ParcelUuid = autoclass(\"android.os.ParcelUuid\")\nactivity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "activity",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "activity = cast(\"android.app.Activity\", PythonActivity.mActivity)\ncontext = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "context = cast(\"android.content.Context\", activity.getApplicationContext())\nScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED\n    APPLICATION_REGISTRATION_FAILED = (",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "ScanResult",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "ScanResult = autoclass(\"android.bluetooth.le.ScanResult\")\nBLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED\n    APPLICATION_REGISTRATION_FAILED = (\n        ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BLEAK_JNI_NAMESPACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "BLEAK_JNI_NAMESPACE = \"com.github.hbldh.bleak\"\nPythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED\n    APPLICATION_REGISTRATION_FAILED = (\n        ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED\n    )",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "PythonScanCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "PythonScanCallback = autoclass(BLEAK_JNI_NAMESPACE + \".PythonScanCallback\")\nPythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED\n    APPLICATION_REGISTRATION_FAILED = (\n        ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED\n    )\n    FEATURE_UNSUPPORTED = ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "PythonBluetoothGattCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "PythonBluetoothGattCallback = autoclass(\n    BLEAK_JNI_NAMESPACE + \".PythonBluetoothGattCallback\"\n)\nclass ScanFailed(enum.IntEnum):\n    ALREADY_STARTED = ScanCallback.SCAN_FAILED_ALREADY_STARTED\n    APPLICATION_REGISTRATION_FAILED = (\n        ScanCallback.SCAN_FAILED_APPLICATION_REGISTRATION_FAILED\n    )\n    FEATURE_UNSUPPORTED = ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED\n    INTERNAL_ERROR = ScanCallback.SCAN_FAILED_INTERNAL_ERROR",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "GATT_SUCCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "GATT_SUCCESS = 0x0000\n# TODO: we may need different lookups, e.g. one for bleak.exc.CONTROLLER_ERROR_CODES\nGATT_STATUS_STRINGS = {\n    # https://developer.android.com/reference/android/bluetooth/BluetoothGatt\n    # https://android.googlesource.com/platform/external/bluetooth/bluedroid/+/5738f83aeb59361a0a2eda2460113f6dc9194271/stack/include/gatt_api.h\n    # https://android.googlesource.com/platform/system/bt/+/master/stack/include/gatt_api.h\n    # https://www.bluetooth.com/specifications/bluetooth-core-specification/\n    **bleak.exc.PROTOCOL_ERROR_CODES,\n    0x007F: \"Too Short\",\n    0x0080: \"No Resources\",",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "GATT_STATUS_STRINGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "GATT_STATUS_STRINGS = {\n    # https://developer.android.com/reference/android/bluetooth/BluetoothGatt\n    # https://android.googlesource.com/platform/external/bluetooth/bluedroid/+/5738f83aeb59361a0a2eda2460113f6dc9194271/stack/include/gatt_api.h\n    # https://android.googlesource.com/platform/system/bt/+/master/stack/include/gatt_api.h\n    # https://www.bluetooth.com/specifications/bluetooth-core-specification/\n    **bleak.exc.PROTOCOL_ERROR_CODES,\n    0x007F: \"Too Short\",\n    0x0080: \"No Resources\",\n    0x0081: \"Internal Error\",\n    0x0082: \"Wrong State\",",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "CHARACTERISTIC_PROPERTY_DBUS_NAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "CHARACTERISTIC_PROPERTY_DBUS_NAMES = {\n    BluetoothGattCharacteristic.PROPERTY_BROADCAST: \"broadcast\",\n    BluetoothGattCharacteristic.PROPERTY_EXTENDED_PROPS: \"extended-properties\",\n    BluetoothGattCharacteristic.PROPERTY_INDICATE: \"indicate\",\n    BluetoothGattCharacteristic.PROPERTY_NOTIFY: \"notify\",\n    BluetoothGattCharacteristic.PROPERTY_READ: \"read\",\n    BluetoothGattCharacteristic.PROPERTY_SIGNED_WRITE: \"authenticated-signed-writes\",\n    BluetoothGattCharacteristic.PROPERTY_WRITE: \"write\",\n    BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE: \"write-without-response\",\n}",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "CLIENT_CHARACTERISTIC_CONFIGURATION_UUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "peekOfCode": "CLIENT_CHARACTERISTIC_CONFIGURATION_UUID = normalize_uuid_16(0x2902)",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.defs",
        "documentation": {}
    },
    {
        "label": "BleakGATTDescriptorP4Android",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.descriptor",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.descriptor",
        "peekOfCode": "class BleakGATTDescriptorP4Android(BleakGATTDescriptor):\n    \"\"\"GATT Descriptor implementation for python-for-android backend\"\"\"\n    def __init__(\n        self, java, characteristic_uuid: str, characteristic_handle: int, index: int\n    ):\n        super(BleakGATTDescriptorP4Android, self).__init__(java)\n        self.__uuid = self.obj.getUuid().toString()\n        self.__characteristic_uuid = characteristic_uuid\n        self.__characteristic_handle = characteristic_handle\n        # many devices have sequential handles and this formula will mysteriously work for them",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.descriptor",
        "documentation": {}
    },
    {
        "label": "BleakScannerP4Android",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "peekOfCode": "class BleakScannerP4Android(BaseBleakScanner):\n    \"\"\"\n    The python-for-android Bleak BLE Scanner.\n    Args:\n        detection_callback:\n            Optional function that will be called each time a device is\n            discovered or advertising data has changed.\n        service_uuids:\n            Optional list of service UUIDs to filter on. Only advertisements\n            containing this advertising data will be received. Specifying this",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "documentation": {}
    },
    {
        "label": "_PythonScanCallback",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "peekOfCode": "class _PythonScanCallback(utils.AsyncJavaCallbacks):\n    __javainterfaces__ = [\"com.github.hbldh.bleak.PythonScanCallback$Interface\"]\n    def __init__(self, scanner: BleakScannerP4Android, loop: asyncio.AbstractEventLoop):\n        super().__init__(loop)\n        self._scanner = scanner\n        self.java = defs.PythonScanCallback(self)\n    def result_state(self, status_str, name, *data):\n        self._loop.call_soon_threadsafe(\n            self._result_state_unthreadsafe, status_str, name, data\n        )",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BleakScannerP4Android(BaseBleakScanner):\n    \"\"\"\n    The python-for-android Bleak BLE Scanner.\n    Args:\n        detection_callback:\n            Optional function that will be called each time a device is\n            discovered or advertising data has changed.\n        service_uuids:\n            Optional list of service UUIDs to filter on. Only advertisements",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.scanner",
        "documentation": {}
    },
    {
        "label": "BleakGATTServiceP4Android",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.service",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.service",
        "peekOfCode": "class BleakGATTServiceP4Android(BleakGATTService):\n    \"\"\"GATT Service implementation for the python-for-android backend\"\"\"\n    def __init__(self, java):\n        super().__init__(java)\n        self.__uuid = self.obj.getUuid().toString()\n        self.__handle = self.obj.getInstanceId()\n        self.__characteristics = []\n    @property\n    def uuid(self) -> str:\n        \"\"\"The UUID to this service\"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.service",
        "documentation": {}
    },
    {
        "label": "AsyncJavaCallbacks",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.utils",
        "peekOfCode": "class AsyncJavaCallbacks(PythonJavaClass):\n    __javacontext__ = \"app\"\n    def __init__(self, loop: asyncio.AbstractEventLoop):\n        self._loop = loop\n        self.states = {}\n        self.futures = {}\n    @staticmethod\n    def _if_expected(result, expected):\n        if result[: len(expected)] == expected[:]:\n            return result[len(expected) :]",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.p4android.utils",
        "description": "dbus-serialbattery.ext.bleak.backends.p4android.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AsyncJavaCallbacks(PythonJavaClass):\n    __javacontext__ = \"app\"\n    def __init__(self, loop: asyncio.AbstractEventLoop):\n        self._loop = loop\n        self.states = {}\n        self.futures = {}\n    @staticmethod\n    def _if_expected(result, expected):\n        if result[: len(expected)] == expected[:]:",
        "detail": "dbus-serialbattery.ext.bleak.backends.p4android.utils",
        "documentation": {}
    },
    {
        "label": "BleakGATTCharacteristicWinRT",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.characteristic",
        "peekOfCode": "class BleakGATTCharacteristicWinRT(BleakGATTCharacteristic):\n    \"\"\"GATT Characteristic implementation for the .NET backend, implemented with WinRT\"\"\"\n    def __init__(\n        self,\n        obj: GattCharacteristic,\n        max_write_without_response_size: Callable[[], int],\n    ):\n        super().__init__(obj, max_write_without_response_size)\n        self.__descriptors = []\n        self.__props = [",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.characteristic",
        "documentation": {}
    },
    {
        "label": "_GattCharacteristicsPropertiesMap",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.characteristic",
        "peekOfCode": "_GattCharacteristicsPropertiesMap = {\n    GattCharacteristicProperties.NONE: (\n        \"None\",\n        \"The characteristic doesn’t have any properties that apply\",\n    ),\n    GattCharacteristicProperties.BROADCAST: (\n        \"Broadcast\".lower(),\n        \"The characteristic supports broadcasting\",\n    ),\n    GattCharacteristicProperties.READ: (",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.characteristic",
        "documentation": {}
    },
    {
        "label": "_Result",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "peekOfCode": "class _Result(Protocol):\n    status: GattCommunicationStatus\n    protocol_error: int\ndef _address_to_int(address: str) -> int:\n    \"\"\"Converts the Bluetooth device address string to its representing integer\n    Args:\n        address (str): Bluetooth device address to convert\n    Returns:\n        int: integer representation of the given Bluetooth device address\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "documentation": {}
    },
    {
        "label": "WinRTClientArgs",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "peekOfCode": "class WinRTClientArgs(TypedDict, total=False):\n    \"\"\"\n    Windows-specific arguments for :class:`BleakClient`.\n    \"\"\"\n    address_type: Literal[\"public\", \"random\"]\n    \"\"\"\n    Can either be ``\"public\"`` or ``\"random\"``, depending on the required address\n    type needed to connect to your device.\n    \"\"\"\n    use_cached_services: bool",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "documentation": {}
    },
    {
        "label": "BleakClientWinRT",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "peekOfCode": "class BleakClientWinRT(BaseBleakClient):\n    \"\"\"Native Windows Bleak Client.\n    Args:\n        address_or_ble_device (str or BLEDevice): The Bluetooth address of the BLE peripheral\n            to connect to or the ``BLEDevice`` object representing it.\n        services: Optional set of service UUIDs that will be used.\n        winrt (dict): A dictionary of Windows-specific configuration values.\n        **timeout (float): Timeout for required ``BleakScanner.find_device_by_address`` call. Defaults to 10.0.\n    \"\"\"\n    def __init__(",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "documentation": {}
    },
    {
        "label": "FutureLike",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "peekOfCode": "class FutureLike:\n    \"\"\"\n    Wraps a WinRT IAsyncOperation in a \"future-like\" object so that it can\n    be passed to Python APIs.\n    Needed until https://github.com/pywinrt/pywinrt/issues/14\n    \"\"\"\n    _asyncio_future_blocking = False\n    def __init__(self, op: IAsyncOperation) -> None:\n        self._op = op\n        self._callbacks = []",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass _Result(Protocol):\n    status: GattCommunicationStatus\n    protocol_error: int\ndef _address_to_int(address: str) -> int:\n    \"\"\"Converts the Bluetooth device address string to its representing integer\n    Args:\n        address (str): Bluetooth device address to convert\n    Returns:\n        int: integer representation of the given Bluetooth device address",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.client",
        "documentation": {}
    },
    {
        "label": "BleakGATTDescriptorWinRT",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.descriptor",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.descriptor",
        "peekOfCode": "class BleakGATTDescriptorWinRT(BleakGATTDescriptor):\n    \"\"\"GATT Descriptor implementation for .NET backend, implemented with WinRT\"\"\"\n    def __init__(\n        self, obj: GattDescriptor, characteristic_uuid: str, characteristic_handle: int\n    ):\n        super(BleakGATTDescriptorWinRT, self).__init__(obj)\n        self.obj = obj\n        self.__characteristic_uuid = characteristic_uuid\n        self.__characteristic_handle = characteristic_handle\n    @property",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.descriptor",
        "documentation": {}
    },
    {
        "label": "_RawAdvData",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "peekOfCode": "class _RawAdvData(NamedTuple):\n    \"\"\"\n    Platform-specific advertisement data.\n    Windows does not combine advertising data with type SCAN_RSP with other\n    advertising data like other platforms, so se have to do it ourselves.\n    \"\"\"\n    adv: Optional[BluetoothLEAdvertisementReceivedEventArgs]\n    \"\"\"\n    The advertisement data received from the BluetoothLEAdvertisementWatcher.Received event.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "documentation": {}
    },
    {
        "label": "BleakScannerWinRT",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "peekOfCode": "class BleakScannerWinRT(BaseBleakScanner):\n    \"\"\"The native Windows Bleak BLE Scanner.\n    Implemented using `Python/WinRT <https://github.com/Microsoft/xlang/tree/master/src/package/pywinrt/projection/>`_.\n    Args:\n        detection_callback:\n            Optional function that will be called each time a device is\n            discovered or advertising data has changed.\n        service_uuids:\n            Optional list of service UUIDs to filter on. Only advertisements\n            containing this advertising data will be received.",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _format_bdaddr(a: int) -> str:\n    return \":\".join(f\"{x:02X}\" for x in a.to_bytes(6, byteorder=\"big\"))\ndef _format_event_args(e: BluetoothLEAdvertisementReceivedEventArgs) -> str:\n    try:\n        return f\"{_format_bdaddr(e.bluetooth_address)}: {e.advertisement.local_name}\"\n    except Exception:\n        return _format_bdaddr(e.bluetooth_address)\nclass _RawAdvData(NamedTuple):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.scanner",
        "documentation": {}
    },
    {
        "label": "BleakGATTServiceWinRT",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.service",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.service",
        "peekOfCode": "class BleakGATTServiceWinRT(BleakGATTService):\n    \"\"\"GATT Characteristic implementation for the .NET backend, implemented with WinRT\"\"\"\n    def __init__(self, obj: GattDeviceService):\n        super().__init__(obj)\n        self.__characteristics = []\n    @property\n    def uuid(self) -> str:\n        return str(self.obj.uuid)\n    @property\n    def handle(self) -> int:",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.service",
        "documentation": {}
    },
    {
        "label": "_AptType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "class _AptType(IntEnum):\n    CURRENT = -1\n    STA = 0\n    MTA = 1\n    NA = 2\n    MAIN_STA = 3\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttypequalifier\nclass _AptQualifierType(IntEnum):\n    NONE = 0\n    IMPLICIT_MTA = 1",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_AptQualifierType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "class _AptQualifierType(IntEnum):\n    NONE = 0\n    IMPLICIT_MTA = 1\n    NA_ON_MTA = 2\n    NA_ON_STA = 3\n    NA_ON_IMPLICIT_STA = 4\n    NA_ON_MAIN_STA = 5\n    APPLICATION_STA = 6\n    RESERVED_1 = 7\ndef _get_apartment_type() -> Tuple[_AptType, _AptQualifierType]:",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "allow_sta",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "def allow_sta():\n    \"\"\"\n    Suppress check for MTA thread type and allow STA.\n    Bleak will hang forever if the current thread is not MTA - unless there is\n    a Windows event loop running that is properly integrated with asyncio in\n    Python.\n    If your program meets that condition, you must call this function do disable\n    the check for MTA. If your program doesn't have a graphical user interface\n    you probably shouldn't call this function. and use ``uninitialize_sta()``\n    instead.",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "uninitialize_sta",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "def uninitialize_sta():\n    \"\"\"\n    Uninitialize the COM library on the current thread if it was not initialized\n    as MTA.\n    This is intended to undo the implicit initialization of the COM library as STA\n    by packages like pywin32.\n    It should be called as early as possible in your application after the\n    offending package has been imported.\n    .. versionadded:: 0.22\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_UINT_PTR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_UINT_PTR = wintypes.WPARAM\n# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-timerproc\n_TIMERPROC = ctypes.WINFUNCTYPE(\n    None, wintypes.HWND, _UINT_PTR, wintypes.UINT, wintypes.DWORD\n)\n# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-settimer\n_SET_TIMER_PROTOTYPE = ctypes.WINFUNCTYPE(\n    _UINT_PTR, wintypes.HWND, _UINT_PTR, wintypes.UINT, _TIMERPROC\n)\n_SET_TIMER_PARAM_FLAGS = (",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_TIMERPROC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_TIMERPROC = ctypes.WINFUNCTYPE(\n    None, wintypes.HWND, _UINT_PTR, wintypes.UINT, wintypes.DWORD\n)\n# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-settimer\n_SET_TIMER_PROTOTYPE = ctypes.WINFUNCTYPE(\n    _UINT_PTR, wintypes.HWND, _UINT_PTR, wintypes.UINT, _TIMERPROC\n)\n_SET_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"nidevent\"),",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_SET_TIMER_PROTOTYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_SET_TIMER_PROTOTYPE = ctypes.WINFUNCTYPE(\n    _UINT_PTR, wintypes.HWND, _UINT_PTR, wintypes.UINT, _TIMERPROC\n)\n_SET_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"nidevent\"),\n    (1, \"uelapse\"),\n    (1, \"lptimerfunc\", None),\n)\n_SetTimer = _SET_TIMER_PROTOTYPE(",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_SET_TIMER_PARAM_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_SET_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"nidevent\"),\n    (1, \"uelapse\"),\n    (1, \"lptimerfunc\", None),\n)\n_SetTimer = _SET_TIMER_PROTOTYPE(\n    (\"SetTimer\", ctypes.windll.user32), _SET_TIMER_PARAM_FLAGS\n)\n_SetTimer.errcheck = _check_result",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_SetTimer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_SetTimer = _SET_TIMER_PROTOTYPE(\n    (\"SetTimer\", ctypes.windll.user32), _SET_TIMER_PARAM_FLAGS\n)\n_SetTimer.errcheck = _check_result\n# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-killtimer\n_KILL_TIMER_PROTOTYPE = ctypes.WINFUNCTYPE(wintypes.BOOL, wintypes.HWND, _UINT_PTR)\n_KILL_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"uidevent\"),\n)",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_SetTimer.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_SetTimer.errcheck = _check_result\n# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-killtimer\n_KILL_TIMER_PROTOTYPE = ctypes.WINFUNCTYPE(wintypes.BOOL, wintypes.HWND, _UINT_PTR)\n_KILL_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"uidevent\"),\n)\n_KillTimer = _KILL_TIMER_PROTOTYPE(\n    (\"KillTimer\", ctypes.windll.user32), _KILL_TIMER_PARAM_FLAGS\n)",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_KILL_TIMER_PROTOTYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_KILL_TIMER_PROTOTYPE = ctypes.WINFUNCTYPE(wintypes.BOOL, wintypes.HWND, _UINT_PTR)\n_KILL_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"uidevent\"),\n)\n_KillTimer = _KILL_TIMER_PROTOTYPE(\n    (\"KillTimer\", ctypes.windll.user32), _KILL_TIMER_PARAM_FLAGS\n)\n# https://learn.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cogetapartmenttype\n_CO_GET_APARTMENT_TYPE_PROTOTYPE = ctypes.WINFUNCTYPE(",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_KILL_TIMER_PARAM_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_KILL_TIMER_PARAM_FLAGS = (\n    (1, \"hwnd\", None),\n    (1, \"uidevent\"),\n)\n_KillTimer = _KILL_TIMER_PROTOTYPE(\n    (\"KillTimer\", ctypes.windll.user32), _KILL_TIMER_PARAM_FLAGS\n)\n# https://learn.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cogetapartmenttype\n_CO_GET_APARTMENT_TYPE_PROTOTYPE = ctypes.WINFUNCTYPE(\n    ctypes.c_int,",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_KillTimer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_KillTimer = _KILL_TIMER_PROTOTYPE(\n    (\"KillTimer\", ctypes.windll.user32), _KILL_TIMER_PARAM_FLAGS\n)\n# https://learn.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cogetapartmenttype\n_CO_GET_APARTMENT_TYPE_PROTOTYPE = ctypes.WINFUNCTYPE(\n    ctypes.c_int,\n    ctypes.POINTER(ctypes.c_int),\n    ctypes.POINTER(ctypes.c_int),\n)\n_CO_GET_APARTMENT_TYPE_PARAM_FLAGS = (",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_CO_GET_APARTMENT_TYPE_PROTOTYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_CO_GET_APARTMENT_TYPE_PROTOTYPE = ctypes.WINFUNCTYPE(\n    ctypes.c_int,\n    ctypes.POINTER(ctypes.c_int),\n    ctypes.POINTER(ctypes.c_int),\n)\n_CO_GET_APARTMENT_TYPE_PARAM_FLAGS = (\n    (1, \"papttype\", None),\n    (1, \"paptqualifier\", None),\n)\n_CoGetApartmentType = _CO_GET_APARTMENT_TYPE_PROTOTYPE(",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_CO_GET_APARTMENT_TYPE_PARAM_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_CO_GET_APARTMENT_TYPE_PARAM_FLAGS = (\n    (1, \"papttype\", None),\n    (1, \"paptqualifier\", None),\n)\n_CoGetApartmentType = _CO_GET_APARTMENT_TYPE_PROTOTYPE(\n    (\"CoGetApartmentType\", ctypes.windll.ole32), _CO_GET_APARTMENT_TYPE_PARAM_FLAGS\n)\n_CoGetApartmentType.errcheck = _check_hresult\n_CO_E_NOTINITIALIZED = -2147221008\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttype",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_CoGetApartmentType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_CoGetApartmentType = _CO_GET_APARTMENT_TYPE_PROTOTYPE(\n    (\"CoGetApartmentType\", ctypes.windll.ole32), _CO_GET_APARTMENT_TYPE_PARAM_FLAGS\n)\n_CoGetApartmentType.errcheck = _check_hresult\n_CO_E_NOTINITIALIZED = -2147221008\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttype\nclass _AptType(IntEnum):\n    CURRENT = -1\n    STA = 0\n    MTA = 1",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_CoGetApartmentType.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_CoGetApartmentType.errcheck = _check_hresult\n_CO_E_NOTINITIALIZED = -2147221008\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttype\nclass _AptType(IntEnum):\n    CURRENT = -1\n    STA = 0\n    MTA = 1\n    NA = 2\n    MAIN_STA = 3\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttypequalifier",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "_CO_E_NOTINITIALIZED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "description": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "peekOfCode": "_CO_E_NOTINITIALIZED = -2147221008\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttype\nclass _AptType(IntEnum):\n    CURRENT = -1\n    STA = 0\n    MTA = 1\n    NA = 2\n    MAIN_STA = 3\n# https://learn.microsoft.com/en-us/windows/win32/api/objidl/ne-objidl-apttypequalifier\nclass _AptQualifierType(IntEnum):",
        "detail": "dbus-serialbattery.ext.bleak.backends.winrt.util",
        "documentation": {}
    },
    {
        "label": "MANUFACTURERS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends._manufacturers",
        "description": "dbus-serialbattery.ext.bleak.backends._manufacturers",
        "peekOfCode": "MANUFACTURERS = {\n    0x0000: \"Ericsson Technology Licensing\",\n    0x0001: \"Nokia Mobile Phones\",\n    0x0002: \"Intel Corp.\",\n    0x0003: \"IBM Corp.\",\n    0x0004: \"Toshiba Corp.\",\n    0x0005: \"3Com\",\n    0x0006: \"Microsoft\",\n    0x0007: \"Lucent\",\n    0x0008: \"Motorola\",",
        "detail": "dbus-serialbattery.ext.bleak.backends._manufacturers",
        "documentation": {}
    },
    {
        "label": "GattCharacteristicsFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.characteristic",
        "peekOfCode": "class GattCharacteristicsFlags(enum.Enum):\n    broadcast = 0x0001\n    read = 0x0002\n    write_without_response = 0x0004\n    write = 0x0008\n    notify = 0x0010\n    indicate = 0x0020\n    authenticated_signed_writes = 0x0040\n    extended_properties = 0x0080\n    reliable_write = 0x0100",
        "detail": "dbus-serialbattery.ext.bleak.backends.characteristic",
        "documentation": {}
    },
    {
        "label": "BleakGATTCharacteristic",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.characteristic",
        "description": "dbus-serialbattery.ext.bleak.backends.characteristic",
        "peekOfCode": "class BleakGATTCharacteristic(abc.ABC):\n    \"\"\"Interface for the Bleak representation of a GATT Characteristic\"\"\"\n    def __init__(self, obj: Any, max_write_without_response_size: Callable[[], int]):\n        \"\"\"\n        Args:\n            obj:\n                A platform-specific object for this characteristic.\n            max_write_without_response_size:\n                The maximum size in bytes that can be written to the\n                characteristic in a single write without response command.",
        "detail": "dbus-serialbattery.ext.bleak.backends.characteristic",
        "documentation": {}
    },
    {
        "label": "BaseBleakClient",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.client",
        "description": "dbus-serialbattery.ext.bleak.backends.client",
        "peekOfCode": "class BaseBleakClient(abc.ABC):\n    \"\"\"The Client Interface for Bleak Backend implementations to implement.\n    The documentation of this interface should thus be safe to use as a reference for your implementation.\n    Args:\n        address_or_ble_device (`BLEDevice` or str): The Bluetooth address of the BLE peripheral to connect to or the `BLEDevice` object representing it.\n    Keyword Args:\n        timeout (float): Timeout for required ``discover`` call. Defaults to 10.0.\n        disconnected_callback (callable): Callback that will be scheduled in the\n            event loop when the client is disconnected. The callable must take one\n            argument, which will be this client object.",
        "detail": "dbus-serialbattery.ext.bleak.backends.client",
        "documentation": {}
    },
    {
        "label": "get_platform_client_backend_type",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.client",
        "description": "dbus-serialbattery.ext.bleak.backends.client",
        "peekOfCode": "def get_platform_client_backend_type() -> Type[BaseBleakClient]:\n    \"\"\"\n    Gets the platform-specific :class:`BaseBleakClient` type.\n    \"\"\"\n    if os.environ.get(\"P4A_BOOTSTRAP\") is not None:\n        from bleak.backends.p4android.client import BleakClientP4Android\n        return BleakClientP4Android\n    if platform.system() == \"Linux\":\n        from bleak.backends.bluezdbus.client import BleakClientBlueZDBus\n        return BleakClientBlueZDBus",
        "detail": "dbus-serialbattery.ext.bleak.backends.client",
        "documentation": {}
    },
    {
        "label": "NotifyCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.client",
        "description": "dbus-serialbattery.ext.bleak.backends.client",
        "peekOfCode": "NotifyCallback = Callable[[bytearray], None]\nclass BaseBleakClient(abc.ABC):\n    \"\"\"The Client Interface for Bleak Backend implementations to implement.\n    The documentation of this interface should thus be safe to use as a reference for your implementation.\n    Args:\n        address_or_ble_device (`BLEDevice` or str): The Bluetooth address of the BLE peripheral to connect to or the `BLEDevice` object representing it.\n    Keyword Args:\n        timeout (float): Timeout for required ``discover`` call. Defaults to 10.0.\n        disconnected_callback (callable): Callback that will be scheduled in the\n            event loop when the client is disconnected. The callable must take one",
        "detail": "dbus-serialbattery.ext.bleak.backends.client",
        "documentation": {}
    },
    {
        "label": "BleakGATTDescriptor",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.descriptor",
        "description": "dbus-serialbattery.ext.bleak.backends.descriptor",
        "peekOfCode": "class BleakGATTDescriptor(abc.ABC):\n    \"\"\"Interface for the Bleak representation of a GATT Descriptor\"\"\"\n    def __init__(self, obj: Any):\n        self.obj = obj\n    def __str__(self):\n        return f\"{self.uuid} (Handle: {self.handle}): {self.description}\"\n    @property\n    @abc.abstractmethod\n    def characteristic_uuid(self) -> str:\n        \"\"\"UUID for the characteristic that this descriptor belongs to\"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.descriptor",
        "documentation": {}
    },
    {
        "label": "_descriptor_descriptions",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.descriptor",
        "description": "dbus-serialbattery.ext.bleak.backends.descriptor",
        "peekOfCode": "_descriptor_descriptions = {\n    normalize_uuid_16(0x2905): [\n        \"Characteristic Aggregate Format\",\n        \"org.bluetooth.descriptor.gatt.characteristic_aggregate_format\",\n        \"0x2905\",\n        \"GSS\",\n    ],\n    normalize_uuid_16(0x2900): [\n        \"Characteristic Extended Properties\",\n        \"org.bluetooth.descriptor.gatt.characteristic_extended_properties\",",
        "detail": "dbus-serialbattery.ext.bleak.backends.descriptor",
        "documentation": {}
    },
    {
        "label": "BLEDevice",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.device",
        "description": "dbus-serialbattery.ext.bleak.backends.device",
        "peekOfCode": "class BLEDevice:\n    \"\"\"\n    A simple wrapper class representing a BLE server detected during scanning.\n    \"\"\"\n    __slots__ = (\"address\", \"name\", \"details\", \"_rssi\", \"_metadata\")\n    def __init__(\n        self, address: str, name: Optional[str], details: Any, rssi: int, **kwargs\n    ):\n        #: The Bluetooth address of the device on this machine (UUID on macOS).\n        self.address = address",
        "detail": "dbus-serialbattery.ext.bleak.backends.device",
        "documentation": {}
    },
    {
        "label": "AdvertisementData",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.scanner",
        "peekOfCode": "class AdvertisementData(NamedTuple):\n    \"\"\"\n    Wrapper around the advertisement data that each platform returns upon discovery\n    \"\"\"\n    local_name: Optional[str]\n    \"\"\"\n    The local name of the device or ``None`` if not included in advertising data.\n    \"\"\"\n    manufacturer_data: Dict[int, bytes]\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.scanner",
        "documentation": {}
    },
    {
        "label": "BaseBleakScanner",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.scanner",
        "peekOfCode": "class BaseBleakScanner(abc.ABC):\n    \"\"\"\n    Interface for Bleak Bluetooth LE Scanners\n    Args:\n        detection_callback:\n            Optional function that will be called each time a device is\n            discovered or advertising data has changed.\n        service_uuids:\n            Optional list of service UUIDs to filter on. Only advertisements\n            containing this advertising data will be received.",
        "detail": "dbus-serialbattery.ext.bleak.backends.scanner",
        "documentation": {}
    },
    {
        "label": "get_platform_scanner_backend_type",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.backends.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.scanner",
        "peekOfCode": "def get_platform_scanner_backend_type() -> Type[BaseBleakScanner]:\n    \"\"\"\n    Gets the platform-specific :class:`BaseBleakScanner` type.\n    \"\"\"\n    if os.environ.get(\"P4A_BOOTSTRAP\") is not None:\n        from bleak.backends.p4android.scanner import BleakScannerP4Android\n        return BleakScannerP4Android\n    if platform.system() == \"Linux\":\n        from bleak.backends.bluezdbus.scanner import BleakScannerBlueZDBus\n        return BleakScannerBlueZDBus",
        "detail": "dbus-serialbattery.ext.bleak.backends.scanner",
        "documentation": {}
    },
    {
        "label": "AdvertisementDataCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.scanner",
        "peekOfCode": "AdvertisementDataCallback = Callable[\n    [BLEDevice, AdvertisementData],\n    Optional[Coroutine[Any, Any, None]],\n]\n\"\"\"\nType alias for callback called when advertisement data is received.\n\"\"\"\nAdvertisementDataFilter = Callable[\n    [BLEDevice, AdvertisementData],\n    bool,",
        "detail": "dbus-serialbattery.ext.bleak.backends.scanner",
        "documentation": {}
    },
    {
        "label": "AdvertisementDataFilter",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.scanner",
        "description": "dbus-serialbattery.ext.bleak.backends.scanner",
        "peekOfCode": "AdvertisementDataFilter = Callable[\n    [BLEDevice, AdvertisementData],\n    bool,\n]\n\"\"\"\nType alias for an advertisement data filter function.\nImplementations should return ``True`` for matches, otherwise ``False``.\n\"\"\"\nclass BaseBleakScanner(abc.ABC):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.scanner",
        "documentation": {}
    },
    {
        "label": "BleakGATTService",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.service",
        "description": "dbus-serialbattery.ext.bleak.backends.service",
        "peekOfCode": "class BleakGATTService(abc.ABC):\n    \"\"\"Interface for the Bleak representation of a GATT Service.\"\"\"\n    def __init__(self, obj: Any) -> None:\n        self.obj = obj\n    def __str__(self) -> str:\n        return f\"{self.uuid} (Handle: {self.handle}): {self.description}\"\n    @property\n    @abc.abstractmethod\n    def handle(self) -> int:\n        \"\"\"The handle of this service\"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.backends.service",
        "documentation": {}
    },
    {
        "label": "BleakGATTServiceCollection",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.backends.service",
        "description": "dbus-serialbattery.ext.bleak.backends.service",
        "peekOfCode": "class BleakGATTServiceCollection:\n    \"\"\"Simple data container for storing the peripheral's service complement.\"\"\"\n    def __init__(self) -> None:\n        self.__services = {}\n        self.__characteristics = {}\n        self.__descriptors = {}\n    def __getitem__(\n        self, item: Union[str, int, UUID]\n    ) -> Optional[\n        Union[BleakGATTService, BleakGATTCharacteristic, BleakGATTDescriptor]",
        "detail": "dbus-serialbattery.ext.bleak.backends.service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.backends.service",
        "description": "dbus-serialbattery.ext.bleak.backends.service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BleakGATTService(abc.ABC):\n    \"\"\"Interface for the Bleak representation of a GATT Service.\"\"\"\n    def __init__(self, obj: Any) -> None:\n        self.obj = obj\n    def __str__(self) -> str:\n        return f\"{self.uuid} (Handle: {self.handle}): {self.description}\"\n    @property\n    @abc.abstractmethod\n    def handle(self) -> int:",
        "detail": "dbus-serialbattery.ext.bleak.backends.service",
        "documentation": {}
    },
    {
        "label": "AdvertisementDataType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.assigned_numbers",
        "description": "dbus-serialbattery.ext.bleak.assigned_numbers",
        "peekOfCode": "class AdvertisementDataType(IntEnum):\n    \"\"\"\n    Generic Access Profile advertisement data types.\n    `Source <https://btprodspecificationrefs.blob.core.windows.net/assigned-numbers/Assigned%20Number%20Types/Generic%20Access%20Profile.pdf>`.\n    .. versionadded:: 0.15\n    \"\"\"\n    FLAGS = 0x01\n    INCOMPLETE_LIST_SERVICE_UUID16 = 0x02\n    COMPLETE_LIST_SERVICE_UUID16 = 0x03\n    INCOMPLETE_LIST_SERVICE_UUID32 = 0x04",
        "detail": "dbus-serialbattery.ext.bleak.assigned_numbers",
        "documentation": {}
    },
    {
        "label": "BleakError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.exc",
        "description": "dbus-serialbattery.ext.bleak.exc",
        "peekOfCode": "class BleakError(Exception):\n    \"\"\"Base Exception for bleak.\"\"\"\n    pass\nclass BleakCharacteristicNotFoundError(BleakError):\n    \"\"\"\n    Exception which is raised if a device does not support a characteristic.\n    .. versionadded: 0.22\n    \"\"\"\n    char_specifier: Union[int, str, uuid.UUID]\n    def __init__(self, char_specifier: Union[int, str, uuid.UUID]) -> None:",
        "detail": "dbus-serialbattery.ext.bleak.exc",
        "documentation": {}
    },
    {
        "label": "BleakCharacteristicNotFoundError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.exc",
        "description": "dbus-serialbattery.ext.bleak.exc",
        "peekOfCode": "class BleakCharacteristicNotFoundError(BleakError):\n    \"\"\"\n    Exception which is raised if a device does not support a characteristic.\n    .. versionadded: 0.22\n    \"\"\"\n    char_specifier: Union[int, str, uuid.UUID]\n    def __init__(self, char_specifier: Union[int, str, uuid.UUID]) -> None:\n        \"\"\"\n        Args:\n            characteristic (str): handle or UUID of the characteristic which was not found",
        "detail": "dbus-serialbattery.ext.bleak.exc",
        "documentation": {}
    },
    {
        "label": "BleakDeviceNotFoundError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.exc",
        "description": "dbus-serialbattery.ext.bleak.exc",
        "peekOfCode": "class BleakDeviceNotFoundError(BleakError):\n    \"\"\"\n    Exception which is raised if a device can not be found by ``connect``, ``pair`` and ``unpair``.\n    This is the case if the OS Bluetooth stack has never seen this device or it was removed and forgotten.\n    .. versionadded: 0.19\n    \"\"\"\n    identifier: str\n    def __init__(self, identifier: str, *args: object) -> None:\n        \"\"\"\n        Args:",
        "detail": "dbus-serialbattery.ext.bleak.exc",
        "documentation": {}
    },
    {
        "label": "BleakDBusError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.bleak.exc",
        "description": "dbus-serialbattery.ext.bleak.exc",
        "peekOfCode": "class BleakDBusError(BleakError):\n    \"\"\"Specialized exception type for D-Bus errors.\"\"\"\n    def __init__(self, dbus_error: str, error_body: list):\n        \"\"\"\n        Args:\n            dbus_error (str): The D-Bus error, e.g. ``org.freedesktop.DBus.Error.UnknownObject``.\n            error_body (list): Body of the D-Bus error, sometimes containing error description or details.\n        \"\"\"\n        super().__init__(dbus_error, *error_body)\n    @property",
        "detail": "dbus-serialbattery.ext.bleak.exc",
        "documentation": {}
    },
    {
        "label": "CONTROLLER_ERROR_CODES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.exc",
        "description": "dbus-serialbattery.ext.bleak.exc",
        "peekOfCode": "CONTROLLER_ERROR_CODES = {\n    0x00: \"Success\",\n    0x01: \"Unknown HCI Command\",\n    0x02: \"Unknown Connection Identifier\",\n    0x03: \"Hardware Failure\",\n    0x04: \"Page Timeout\",\n    0x05: \"Authentication Failure\",\n    0x06: \"PIN or Key Missing\",\n    0x07: \"Memory Capacity Exceeded\",\n    0x08: \"Connection Timeout\",",
        "detail": "dbus-serialbattery.ext.bleak.exc",
        "documentation": {}
    },
    {
        "label": "PROTOCOL_ERROR_CODES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.bleak.exc",
        "description": "dbus-serialbattery.ext.bleak.exc",
        "peekOfCode": "PROTOCOL_ERROR_CODES = {\n    0x01: \"Invalid Handle\",\n    0x02: \"Read Not Permitted\",\n    0x03: \"Write Not Permitted\",\n    0x04: \"Invalid PDU\",\n    0x05: \"Insufficient Authentication\",\n    0x06: \"Request Not Supported\",\n    0x07: \"Invalid Offset\",\n    0x08: \"Insufficient Authorization\",\n    0x09: \"Prepare Queue Full\",",
        "detail": "dbus-serialbattery.ext.bleak.exc",
        "documentation": {}
    },
    {
        "label": "uuidstr_to_str",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.uuids",
        "description": "dbus-serialbattery.ext.bleak.uuids",
        "peekOfCode": "def uuidstr_to_str(uuid_: str) -> str:\n    uuid_ = uuid_.lower()\n    s = uuid128_dict.get(uuid_)\n    if s:\n        return s\n    if not s and uuid_.endswith(\"-0000-1000-8000-00805f9b34fb\"):\n        s = \"Vendor specific\"\n    v = int(uuid_[:8], 16)\n    if (v & 0xFFFF0000) == 0x0000:\n        s = uuid16_dict.get(v & 0x0000FFFF, s)",
        "detail": "dbus-serialbattery.ext.bleak.uuids",
        "documentation": {}
    },
    {
        "label": "register_uuids",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.uuids",
        "description": "dbus-serialbattery.ext.bleak.uuids",
        "peekOfCode": "def register_uuids(uuids_to_descriptions: Dict[str, str]) -> None:\n    \"\"\"Add or modify the mapping of 128-bit UUIDs for services and characteristics to descriptions.\n    Args:\n        uuids_to_descriptions: A dictionary of new mappings\n    \"\"\"\n    uuid128_dict.update(uuids_to_descriptions)\ndef normalize_uuid_str(uuid: str) -> str:\n    \"\"\"\n    Normaizes a UUID to the format used by Bleak.\n    - Converted to lower case.",
        "detail": "dbus-serialbattery.ext.bleak.uuids",
        "documentation": {}
    },
    {
        "label": "normalize_uuid_str",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.uuids",
        "description": "dbus-serialbattery.ext.bleak.uuids",
        "peekOfCode": "def normalize_uuid_str(uuid: str) -> str:\n    \"\"\"\n    Normaizes a UUID to the format used by Bleak.\n    - Converted to lower case.\n    - 16-bit and 32-bit UUIDs are expanded to 128-bit.\n    Example::\n        # 16-bit\n        uuid1 = normalize_uuid_str(\"1234\")\n        # uuid1 == \"00001234-0000-1000-8000-00805f9b34fb\"\n        # 32-bit",
        "detail": "dbus-serialbattery.ext.bleak.uuids",
        "documentation": {}
    },
    {
        "label": "normalize_uuid_16",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.uuids",
        "description": "dbus-serialbattery.ext.bleak.uuids",
        "peekOfCode": "def normalize_uuid_16(uuid: int) -> str:\n    \"\"\"\n    Normaizes a 16-bit integer UUID to the format used by Bleak.\n    Returns:\n        128-bit UUID as string with the format ``\"0000xxxx-0000-1000-8000-00805f9b34fb\"``.\n    Example::\n        uuid = normalize_uuid_16(0x1234)\n        # uuid == \"00001234-0000-1000-8000-00805f9b34fb\"\n    .. versionadded:: 0.21\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.uuids",
        "documentation": {}
    },
    {
        "label": "normalize_uuid_32",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.bleak.uuids",
        "description": "dbus-serialbattery.ext.bleak.uuids",
        "peekOfCode": "def normalize_uuid_32(uuid: int) -> str:\n    \"\"\"\n    Normaizes a 32-bit integer UUID to the format used by Bleak.\n    Returns:\n        128-bit UUID as string with the format ``\"xxxxxxxx-0000-1000-8000-00805f9b34fb\"``.\n    Example::\n        uuid = normalize_uuid_32(0x12345678)\n        # uuid == \"12345678-0000-1000-8000-00805f9b34fb\"\n    .. versionadded:: 0.21\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.bleak.uuids",
        "documentation": {}
    },
    {
        "label": "BOA_UuidBin",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),\n        (\"minorVersion\", ctypes.c_uint8),\n        (\"bugfix\", ctypes.c_uint8),\n        (\"build\", ctypes.c_uint8),\n    ]\nclass BOA_UuidVersion(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_Version",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),\n        (\"minorVersion\", ctypes.c_uint8),\n        (\"bugfix\", ctypes.c_uint8),\n        (\"build\", ctypes.c_uint8),\n    ]\nclass BOA_UuidVersion(ctypes.Structure):\n    _fields_ = [(\"uuid\", BOA_UuidBin), (\"version\", BOA_Version)]\nclass BOA_ServiceId(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_UuidVersion",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class BOA_UuidVersion(ctypes.Structure):\n    _fields_ = [(\"uuid\", BOA_UuidBin), (\"version\", BOA_Version)]\nclass BOA_ServiceId(ctypes.Structure):\n    _fields_ = [(\"api\", BOA_UuidVersion), (\"access\", BOA_UuidVersion)]\nclass BOA_ServiceIdParam(ctypes.Structure):\n    _fields_ = [\n        (\"id\", BOA_ServiceId),\n        (\"count\", ctypes.c_uint32),\n        (\"accessParam\", ctypes.c_char * 128),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_ServiceId",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class BOA_ServiceId(ctypes.Structure):\n    _fields_ = [(\"api\", BOA_UuidVersion), (\"access\", BOA_UuidVersion)]\nclass BOA_ServiceIdParam(ctypes.Structure):\n    _fields_ = [\n        (\"id\", BOA_ServiceId),\n        (\"count\", ctypes.c_uint32),\n        (\"accessParam\", ctypes.c_char * 128),\n    ]\n# Connection Service Interface (CSI)\n# CSI - Search For Service (SFS)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_ServiceIdParam",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class BOA_ServiceIdParam(ctypes.Structure):\n    _fields_ = [\n        (\"id\", BOA_ServiceId),\n        (\"count\", ctypes.c_uint32),\n        (\"accessParam\", ctypes.c_char * 128),\n    ]\n# Connection Service Interface (CSI)\n# CSI - Search For Service (SFS)\nCSI_NodeType = ctypes.c_uint32\nCSI_NODE_MIN = CSI_NodeType(0)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_NodeRange",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class CSI_NodeRange(ctypes.Structure):\n    _fields_ = [(\"min\", CSI_NodeType), (\"max\", CSI_NodeType)]\nclass CSI_SubItem(ctypes.Structure):\n    _fields_ = [\n        (\"server\", BOA_ServiceIdParam),\n        (\"nodeType\", CSI_NodeType),\n        (\"uriName\", ctypes.c_char * 128),\n        (\"visibleName\", ctypes.c_char * 4),\n        (\"version\", BOA_Version),\n        (\"reserved2\", ctypes.c_char * 88),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_SubItem",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class CSI_SubItem(ctypes.Structure):\n    _fields_ = [\n        (\"server\", BOA_ServiceIdParam),\n        (\"nodeType\", CSI_NodeType),\n        (\"uriName\", ctypes.c_char * 128),\n        (\"visibleName\", ctypes.c_char * 4),\n        (\"version\", BOA_Version),\n        (\"reserved2\", ctypes.c_char * 88),\n        (\"serverAffinity\", BOA_UuidBin),\n        (\"requiredAffinity0\", BOA_UuidBin),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_Tree",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class CSI_Tree(ctypes.Structure):\n    pass\nCSI_Tree._fields_ = [\n    (\"item\", CSI_SubItem),\n    (\"sibling\", ctypes.POINTER(CSI_Tree)),\n    (\"child\", ctypes.POINTER(CSI_Tree)),\n    (\"childrenProbed\", ctypes.c_int),\n]\nCSI_CreateProtocolTree = _csi.CSI_CreateProtocolTree\nCSI_CreateProtocolTree.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_InternalErrorEventMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_InternalErrorEvent),\n        (\"errorCode\", OCI_ErrorCode),\n    ]\nOCI_GetError = _oci.OCI_GetError\nOCI_GetError.argtypes = [\n    OCI_Handle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QueueEventMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_QueueEvent),\n        (\"destination\", ctypes.c_uint32),\n    ]\nOCI_ResetQueue = _oci.OCI_ResetQueue\nOCI_ResetQueue.argtypes = [OCI_QueueHandle]\nOCI_ResetQueue.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimerCapabilities",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),\n        (\"tickFrequency\", ctypes.c_uint32),\n        (\"ticksPerIncrement\", ctypes.c_uint32),\n        (\"localStratumLevel\", ctypes.c_uint32),\n        (\"localReferenceScale\", OCI_TimeReferenceScale),\n        (\"localTimeOriginIso8601\", ctypes.c_char * 40),\n        (\"syncSlave\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimerEventMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_TimerEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_TimerEvent),\n        (\"destination\", ctypes.c_uint32),\n    ]\nOCI_GetTimerCapabilities = _oci.OCI_GetTimerCapabilities\nOCI_GetTimerCapabilities.argtypes = [\n    OCI_ControllerHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRxConfig",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),\n    ]\nclass OCI_CANFDConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"dataBitRate\", ctypes.c_uint32),\n        (\"dataSamplePoint\", ctypes.c_uint32),\n        (\"dataBTL_Cycles\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDConfiguration",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANFDConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"dataBitRate\", ctypes.c_uint32),\n        (\"dataSamplePoint\", ctypes.c_uint32),\n        (\"dataBTL_Cycles\", ctypes.c_uint32),\n        (\"dataSJW\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint32),\n        (\"txSecondarySamplePointOffset\", ctypes.c_uint32),\n        (\"canFdRxConfig\", OCI_CANFDRxConfig),\n        (\"canFdTxConfig\", OCI_CANFDTxConfig),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRxMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANFDRxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"size\", ctypes.c_uint8),\n        (\"res1\", ctypes.c_uint8 * 4),\n        (\"data\", ctypes.c_uint8 * 64),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDTxMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANFDTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"size\", ctypes.c_uint8),\n        (\"data\", ctypes.c_uint8 * 64),\n    ]\n# OCI CAN - Initialization\nOCI_CAN_THREE_SAMPLES_PER_BIT = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANConfiguration",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"BTL_Cycles\", ctypes.c_uint32),\n        (\"SJW\", ctypes.c_uint32),\n        (\"syncEdge\", ctypes.c_uint32),\n        (\"physicalMedia\", ctypes.c_uint32),\n        (\"selfReceptionMode\", OCI_SelfReceptionMode),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANControllerProperties",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANControllerProperties(ctypes.Structure):\n    _fields_ = [\n        (\"mode\", OCI_ControllerPropertiesMode),\n    ]\nclass OCI_CANControllerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"syncEdge\", ctypes.c_uint32),\n        (\"physicalMedia\", ctypes.c_uint32),\n        (\"reserved\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANControllerCapabilities",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANControllerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"syncEdge\", ctypes.c_uint32),\n        (\"physicalMedia\", ctypes.c_uint32),\n        (\"reserved\", ctypes.c_uint32),\n        (\"busEvents\", ctypes.c_uint32),\n        (\"errorFrames\", ctypes.c_uint32),\n        (\"messageFlags\", ctypes.c_uint32),\n        (\"canFDSupport\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANControllerStatus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANControllerStatus(ctypes.Structure):\n    _fields_ = [\n        (\"reserved\", ctypes.c_uint32),\n        (\"stateCode\", ctypes.c_uint32),\n    ]\nOCI_CreateCANControllerNoSearch = _oci.OCI_CreateCANControllerNoSearch\nOCI_CreateCANControllerNoSearch.argtypes = [\n    ctypes.c_char_p,\n    ctypes.POINTER(BOA_Version),\n    ctypes.POINTER(CSI_Tree),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxFilter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANRxFilter(ctypes.Structure):\n    _fields_ = [\n        (\"frameIDValue\", ctypes.c_uint32),\n        (\"frameIDMask\", ctypes.c_uint32),\n        (\"tag\", ctypes.c_uint32),\n    ]\nclass OCI_CANRxFilterEx(ctypes.Structure):\n    _fields_ = [\n        (\"frameIDValue\", ctypes.c_uint32),\n        (\"frameIDMask\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxFilterEx",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANRxFilterEx(ctypes.Structure):\n    _fields_ = [\n        (\"frameIDValue\", ctypes.c_uint32),\n        (\"frameIDMask\", ctypes.c_uint32),\n        (\"tag\", ctypes.c_uint32),\n        (\"flagsValue\", ctypes.c_uint16),\n        (\"flagsMask\", ctypes.c_uint16),\n    ]\nOCI_AddCANFrameFilterEx = _oci.OCI_AddCANFrameFilterEx\nOCI_AddCANFrameFilterEx.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANTxMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),\n        (\"data\", ctypes.c_uint8 * 8),\n    ]\nclass OCI_CANRxMessage(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANRxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),\n        (\"res1\", ctypes.c_uint8 * 4),\n        (\"data\", ctypes.c_uint8 * 8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANErrorFrameMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANErrorFrameMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),\n        (\"type\", ctypes.c_uint32),\n        (\"destination\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANEventMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", ctypes.c_uint32),\n        (\"destination\", ctypes.c_uint32),\n    ]\nclass OCI_CANMessageData(ctypes.Union):\n    _fields_ = [\n        (\"rxMessage\", OCI_CANRxMessage),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANMessageData",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANMessageData(ctypes.Union):\n    _fields_ = [\n        (\"rxMessage\", OCI_CANRxMessage),\n        (\"txMessage\", OCI_CANTxMessage),\n        (\"errorFrameMessage\", OCI_CANErrorFrameMessage),\n        (\"canEventMessage\", OCI_CANEventMessage),\n        (\"internalErrorEventMessage\", OCI_InternalErrorEventMessage),\n        (\"timerEventMessage\", OCI_TimerEventMessage),\n        (\"queueEventMessage\", OCI_QueueEventMessage),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANMessageDataEx",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANMessageDataEx(ctypes.Union):\n    _fields_ = [\n        (\"rxMessage\", OCI_CANRxMessage),\n        (\"txMessage\", OCI_CANTxMessage),\n        (\"errorFrameMessage\", OCI_CANErrorFrameMessage),\n        (\"canEventMessage\", OCI_CANEventMessage),\n        (\"internalErrorEventMessage\", OCI_InternalErrorEventMessage),\n        (\"timerEventMessage\", OCI_TimerEventMessage),\n        (\"queueEventMessage\", OCI_QueueEventMessage),\n        (\"canFDRxMessage\", OCI_CANFDRxMessage),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANMessage",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANMessage(ctypes.Structure):\n    _fields_ = [\n        (\"type\", OCI_CANMessageDataType),\n        (\"reserved\", ctypes.c_uint32),\n        (\"data\", OCI_CANMessageData),\n    ]\nclass OCI_CANMessageEx(ctypes.Structure):\n    _fields_ = [\n        (\"type\", OCI_CANMessageDataType),\n        (\"reserved\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANMessageEx",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANMessageEx(ctypes.Structure):\n    _fields_ = [\n        (\"type\", OCI_CANMessageDataType),\n        (\"reserved\", ctypes.c_uint32),\n        (\"data\", OCI_CANMessageDataEx),\n    ]\n# OCI CAN - Queues\nOCI_CANRxCallbackFunctionSingleMsg = ctypes.CFUNCTYPE(\n    None, ctypes.c_void_p, ctypes.POINTER(OCI_CANMessage)\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxCallbackSingleMsg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANRxCallbackSingleMsg(ctypes.Structure):\n    class _U(ctypes.Union):\n        _fields_ = [\n            (\"function\", OCI_CANRxCallbackFunctionSingleMsg),\n            (\"functionEx\", OCI_CANRxCallbackFunctionSingleMsgEx),\n        ]\n    _anonymous_ = (\"u\",)\n    _fields_ = [\n        (\"u\", _U),\n        (\"userData\", ctypes.c_void_p),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxQueueConfiguration",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANRxQueueConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"onFrame\", OCI_CANRxCallbackSingleMsg),\n        (\"onEvent\", OCI_CANRxCallbackSingleMsg),\n        (\"selfReceptionMode\", OCI_SelfReceptionMode),\n    ]\nclass OCI_CANTxQueueConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"reserved\", ctypes.c_uint32),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANTxQueueConfiguration",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "class OCI_CANTxQueueConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"reserved\", ctypes.c_uint32),\n    ]\nOCI_CreateCANRxQueue = _oci.OCI_CreateCANRxQueue\nOCI_CreateCANRxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANRxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "errcheck_init",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "def errcheck_init(result, func, _arguments):\n    # unfortunately, we can't use OCI_GetError here\n    # because we don't always have a handle to use\n    # text = ctypes.create_string_buffer(500)\n    # OCI_GetError(self.ctrl, ec, text, 500)\n    if result != 0x0:\n        raise CanInitializationError(f\"{func.__name__} failed with error 0x{result:X}\")\n    return result\ndef errcheck_oper(result, func, _arguments):\n    if result != 0x0:",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "errcheck_oper",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "def errcheck_oper(result, func, _arguments):\n    if result != 0x0:\n        raise CanOperationError(f\"{func.__name__} failed with error 0x{result:X}\")\n    return result\n# Common (BOA)\nBOA_ResultCode = ctypes.c_uint32\nBOA_Handle = ctypes.c_int32\nBOA_Time = ctypes.c_int64\nBOA_NO_VALUE = -1\nBOA_NO_HANDLE = BOA_Handle(BOA_NO_VALUE)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_ResultCode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "BOA_ResultCode = ctypes.c_uint32\nBOA_Handle = ctypes.c_int32\nBOA_Time = ctypes.c_int64\nBOA_NO_VALUE = -1\nBOA_NO_HANDLE = BOA_Handle(BOA_NO_VALUE)\nBOA_NO_TIME = BOA_Time(BOA_NO_VALUE)\nclass BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_Handle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "BOA_Handle = ctypes.c_int32\nBOA_Time = ctypes.c_int64\nBOA_NO_VALUE = -1\nBOA_NO_HANDLE = BOA_Handle(BOA_NO_VALUE)\nBOA_NO_TIME = BOA_Time(BOA_NO_VALUE)\nclass BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_Time",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "BOA_Time = ctypes.c_int64\nBOA_NO_VALUE = -1\nBOA_NO_HANDLE = BOA_Handle(BOA_NO_VALUE)\nBOA_NO_TIME = BOA_Time(BOA_NO_VALUE)\nclass BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),\n        (\"minorVersion\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_NO_VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "BOA_NO_VALUE = -1\nBOA_NO_HANDLE = BOA_Handle(BOA_NO_VALUE)\nBOA_NO_TIME = BOA_Time(BOA_NO_VALUE)\nclass BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),\n        (\"minorVersion\", ctypes.c_uint8),\n        (\"bugfix\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_NO_HANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "BOA_NO_HANDLE = BOA_Handle(BOA_NO_VALUE)\nBOA_NO_TIME = BOA_Time(BOA_NO_VALUE)\nclass BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),\n        (\"minorVersion\", ctypes.c_uint8),\n        (\"bugfix\", ctypes.c_uint8),\n        (\"build\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "BOA_NO_TIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "BOA_NO_TIME = BOA_Time(BOA_NO_VALUE)\nclass BOA_UuidBin(ctypes.Structure):\n    _fields_ = [(\"data\", ctypes.c_uint8 * 16)]\nclass BOA_Version(ctypes.Structure):\n    _fields_ = [\n        (\"majorVersion\", ctypes.c_uint8),\n        (\"minorVersion\", ctypes.c_uint8),\n        (\"bugfix\", ctypes.c_uint8),\n        (\"build\", ctypes.c_uint8),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_NodeType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_NodeType = ctypes.c_uint32\nCSI_NODE_MIN = CSI_NodeType(0)\nCSI_NODE_MAX = CSI_NodeType(0x7FFF)\nclass CSI_NodeRange(ctypes.Structure):\n    _fields_ = [(\"min\", CSI_NodeType), (\"max\", CSI_NodeType)]\nclass CSI_SubItem(ctypes.Structure):\n    _fields_ = [\n        (\"server\", BOA_ServiceIdParam),\n        (\"nodeType\", CSI_NodeType),\n        (\"uriName\", ctypes.c_char * 128),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_NODE_MIN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_NODE_MIN = CSI_NodeType(0)\nCSI_NODE_MAX = CSI_NodeType(0x7FFF)\nclass CSI_NodeRange(ctypes.Structure):\n    _fields_ = [(\"min\", CSI_NodeType), (\"max\", CSI_NodeType)]\nclass CSI_SubItem(ctypes.Structure):\n    _fields_ = [\n        (\"server\", BOA_ServiceIdParam),\n        (\"nodeType\", CSI_NodeType),\n        (\"uriName\", ctypes.c_char * 128),\n        (\"visibleName\", ctypes.c_char * 4),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_NODE_MAX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_NODE_MAX = CSI_NodeType(0x7FFF)\nclass CSI_NodeRange(ctypes.Structure):\n    _fields_ = [(\"min\", CSI_NodeType), (\"max\", CSI_NodeType)]\nclass CSI_SubItem(ctypes.Structure):\n    _fields_ = [\n        (\"server\", BOA_ServiceIdParam),\n        (\"nodeType\", CSI_NodeType),\n        (\"uriName\", ctypes.c_char * 128),\n        (\"visibleName\", ctypes.c_char * 4),\n        (\"version\", BOA_Version),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_Tree._fields_",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_Tree._fields_ = [\n    (\"item\", CSI_SubItem),\n    (\"sibling\", ctypes.POINTER(CSI_Tree)),\n    (\"child\", ctypes.POINTER(CSI_Tree)),\n    (\"childrenProbed\", ctypes.c_int),\n]\nCSI_CreateProtocolTree = _csi.CSI_CreateProtocolTree\nCSI_CreateProtocolTree.argtypes = [\n    ctypes.c_char_p,\n    CSI_NodeRange,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_CreateProtocolTree",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_CreateProtocolTree = _csi.CSI_CreateProtocolTree\nCSI_CreateProtocolTree.argtypes = [\n    ctypes.c_char_p,\n    CSI_NodeRange,\n    ctypes.POINTER(ctypes.POINTER(CSI_Tree)),\n]\nCSI_CreateProtocolTree.restype = BOA_ResultCode\nCSI_CreateProtocolTree.errcheck = errcheck_init\nCSI_DestroyProtocolTree = _csi.CSI_DestroyProtocolTree\nCSI_DestroyProtocolTree.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_CreateProtocolTree.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_CreateProtocolTree.argtypes = [\n    ctypes.c_char_p,\n    CSI_NodeRange,\n    ctypes.POINTER(ctypes.POINTER(CSI_Tree)),\n]\nCSI_CreateProtocolTree.restype = BOA_ResultCode\nCSI_CreateProtocolTree.errcheck = errcheck_init\nCSI_DestroyProtocolTree = _csi.CSI_DestroyProtocolTree\nCSI_DestroyProtocolTree.argtypes = [\n    ctypes.POINTER(CSI_Tree),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_CreateProtocolTree.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_CreateProtocolTree.restype = BOA_ResultCode\nCSI_CreateProtocolTree.errcheck = errcheck_init\nCSI_DestroyProtocolTree = _csi.CSI_DestroyProtocolTree\nCSI_DestroyProtocolTree.argtypes = [\n    ctypes.POINTER(CSI_Tree),\n]\nCSI_DestroyProtocolTree.restype = BOA_ResultCode\nCSI_DestroyProtocolTree.errcheck = errcheck_oper\n# Open Controller Interface (OCI)\n# OCI Common - Global Types",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_CreateProtocolTree.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_CreateProtocolTree.errcheck = errcheck_init\nCSI_DestroyProtocolTree = _csi.CSI_DestroyProtocolTree\nCSI_DestroyProtocolTree.argtypes = [\n    ctypes.POINTER(CSI_Tree),\n]\nCSI_DestroyProtocolTree.restype = BOA_ResultCode\nCSI_DestroyProtocolTree.errcheck = errcheck_oper\n# Open Controller Interface (OCI)\n# OCI Common - Global Types\nOCI_NO_VALUE = BOA_NO_VALUE",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_DestroyProtocolTree",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_DestroyProtocolTree = _csi.CSI_DestroyProtocolTree\nCSI_DestroyProtocolTree.argtypes = [\n    ctypes.POINTER(CSI_Tree),\n]\nCSI_DestroyProtocolTree.restype = BOA_ResultCode\nCSI_DestroyProtocolTree.errcheck = errcheck_oper\n# Open Controller Interface (OCI)\n# OCI Common - Global Types\nOCI_NO_VALUE = BOA_NO_VALUE\nOCI_NO_HANDLE = BOA_NO_HANDLE",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_DestroyProtocolTree.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_DestroyProtocolTree.argtypes = [\n    ctypes.POINTER(CSI_Tree),\n]\nCSI_DestroyProtocolTree.restype = BOA_ResultCode\nCSI_DestroyProtocolTree.errcheck = errcheck_oper\n# Open Controller Interface (OCI)\n# OCI Common - Global Types\nOCI_NO_VALUE = BOA_NO_VALUE\nOCI_NO_HANDLE = BOA_NO_HANDLE\nOCI_Handle = BOA_Handle",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_DestroyProtocolTree.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_DestroyProtocolTree.restype = BOA_ResultCode\nCSI_DestroyProtocolTree.errcheck = errcheck_oper\n# Open Controller Interface (OCI)\n# OCI Common - Global Types\nOCI_NO_VALUE = BOA_NO_VALUE\nOCI_NO_HANDLE = BOA_NO_HANDLE\nOCI_Handle = BOA_Handle\nOCI_Time = BOA_Time\n# OCI Common - Controller Handling\nOCI_ControllerHandle = OCI_Handle",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "CSI_DestroyProtocolTree.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "CSI_DestroyProtocolTree.errcheck = errcheck_oper\n# Open Controller Interface (OCI)\n# OCI Common - Global Types\nOCI_NO_VALUE = BOA_NO_VALUE\nOCI_NO_HANDLE = BOA_NO_HANDLE\nOCI_Handle = BOA_Handle\nOCI_Time = BOA_Time\n# OCI Common - Controller Handling\nOCI_ControllerHandle = OCI_Handle\nOCI_ControllerPropertiesMode = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_NO_VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_NO_VALUE = BOA_NO_VALUE\nOCI_NO_HANDLE = BOA_NO_HANDLE\nOCI_Handle = BOA_Handle\nOCI_Time = BOA_Time\n# OCI Common - Controller Handling\nOCI_ControllerHandle = OCI_Handle\nOCI_ControllerPropertiesMode = ctypes.c_uint32\nOCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_NO_HANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_NO_HANDLE = BOA_NO_HANDLE\nOCI_Handle = BOA_Handle\nOCI_Time = BOA_Time\n# OCI Common - Controller Handling\nOCI_ControllerHandle = OCI_Handle\nOCI_ControllerPropertiesMode = ctypes.c_uint32\nOCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_Handle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_Handle = BOA_Handle\nOCI_Time = BOA_Time\n# OCI Common - Controller Handling\nOCI_ControllerHandle = OCI_Handle\nOCI_ControllerPropertiesMode = ctypes.c_uint32\nOCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_Time",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_Time = BOA_Time\n# OCI Common - Controller Handling\nOCI_ControllerHandle = OCI_Handle\nOCI_ControllerPropertiesMode = ctypes.c_uint32\nOCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ControllerHandle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ControllerHandle = OCI_Handle\nOCI_ControllerPropertiesMode = ctypes.c_uint32\nOCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ControllerPropertiesMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ControllerPropertiesMode = ctypes.c_uint32\nOCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CONTROLLER_MODE_RUNNING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CONTROLLER_MODE_RUNNING = OCI_ControllerPropertiesMode(0)\nOCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CONTROLLER_MODE_SUSPENDED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CONTROLLER_MODE_SUSPENDED = OCI_ControllerPropertiesMode(1)\nOCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_SelfReceptionMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_SelfReceptionMode = ctypes.c_uint32\nOCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_SELF_RECEPTION_OFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_SELF_RECEPTION_OFF = OCI_SelfReceptionMode(0)\nOCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_SELF_RECEPTION_ON",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_SELF_RECEPTION_ON = OCI_SelfReceptionMode(1)\n# OCI Common - Event Handling\n# OCI Common - Error Management\nOCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ErrorCode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ErrorCode = BOA_ResultCode\nOCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_InternalErrorEvent),\n        (\"errorCode\", OCI_ErrorCode),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_InternalErrorEvent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_InternalErrorEvent = ctypes.c_uint32\nOCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_InternalErrorEvent),\n        (\"errorCode\", OCI_ErrorCode),\n    ]\nOCI_GetError = _oci.OCI_GetError",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_INTERNAL_GENERAL_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_INTERNAL_GENERAL_ERROR = OCI_InternalErrorEvent(0)\nclass OCI_InternalErrorEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_InternalErrorEvent),\n        (\"errorCode\", OCI_ErrorCode),\n    ]\nOCI_GetError = _oci.OCI_GetError\nOCI_GetError.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetError",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetError = _oci.OCI_GetError\nOCI_GetError.argtypes = [\n    OCI_Handle,\n    OCI_ErrorCode,\n    ctypes.c_char_p,\n    ctypes.c_uint32,\n]\nOCI_GetError.restype = OCI_ErrorCode\nOCI_GetError.errcheck = errcheck_oper\n# OCI Common - Queue Handling",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetError.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetError.argtypes = [\n    OCI_Handle,\n    OCI_ErrorCode,\n    ctypes.c_char_p,\n    ctypes.c_uint32,\n]\nOCI_GetError.restype = OCI_ErrorCode\nOCI_GetError.errcheck = errcheck_oper\n# OCI Common - Queue Handling\nOCI_QueueHandle = OCI_Handle",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetError.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetError.restype = OCI_ErrorCode\nOCI_GetError.errcheck = errcheck_oper\n# OCI Common - Queue Handling\nOCI_QueueHandle = OCI_Handle\nOCI_QueueEvent = ctypes.c_uint32\nOCI_QUEUE_UNDERRUN = OCI_QueueEvent(0)\nOCI_QUEUE_EMPTY = OCI_QueueEvent(1)\nOCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetError.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetError.errcheck = errcheck_oper\n# OCI Common - Queue Handling\nOCI_QueueHandle = OCI_Handle\nOCI_QueueEvent = ctypes.c_uint32\nOCI_QUEUE_UNDERRUN = OCI_QueueEvent(0)\nOCI_QUEUE_EMPTY = OCI_QueueEvent(1)\nOCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QueueHandle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QueueHandle = OCI_Handle\nOCI_QueueEvent = ctypes.c_uint32\nOCI_QUEUE_UNDERRUN = OCI_QueueEvent(0)\nOCI_QUEUE_EMPTY = OCI_QueueEvent(1)\nOCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QueueEvent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QueueEvent = ctypes.c_uint32\nOCI_QUEUE_UNDERRUN = OCI_QueueEvent(0)\nOCI_QUEUE_EMPTY = OCI_QueueEvent(1)\nOCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_UNDERRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_UNDERRUN = OCI_QueueEvent(0)\nOCI_QUEUE_EMPTY = OCI_QueueEvent(1)\nOCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_EMPTY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_EMPTY = OCI_QueueEvent(1)\nOCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_NOT_EMPTY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_NOT_EMPTY = OCI_QueueEvent(2)\nOCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_QueueEvent),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_LOW_WATERMARK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_LOW_WATERMARK = OCI_QueueEvent(3)\nOCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_QueueEvent),\n        (\"destination\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_HIGH_WATERMARK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_HIGH_WATERMARK = OCI_QueueEvent(4)\nOCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_QueueEvent),\n        (\"destination\", ctypes.c_uint32),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_FULL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_FULL = OCI_QueueEvent(5)\nOCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_QueueEvent),\n        (\"destination\", ctypes.c_uint32),\n    ]\nOCI_ResetQueue = _oci.OCI_ResetQueue",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_QUEUE_OVERFLOW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_QUEUE_OVERFLOW = OCI_QueueEvent(6)\nclass OCI_QueueEventMessage(ctypes.Structure):\n    _fields_ = [\n        (\"timeStamp\", OCI_Time),\n        (\"tag\", ctypes.c_uint32),\n        (\"eventCode\", OCI_QueueEvent),\n        (\"destination\", ctypes.c_uint32),\n    ]\nOCI_ResetQueue = _oci.OCI_ResetQueue\nOCI_ResetQueue.argtypes = [OCI_QueueHandle]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ResetQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ResetQueue = _oci.OCI_ResetQueue\nOCI_ResetQueue.argtypes = [OCI_QueueHandle]\nOCI_ResetQueue.restype = OCI_ErrorCode\nOCI_ResetQueue.errcheck = errcheck_oper\n# OCI Common - Timer Handling\nOCI_NO_TIME = BOA_NO_TIME\nOCI_TimeReferenceScale = ctypes.c_uint32\nOCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ResetQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ResetQueue.argtypes = [OCI_QueueHandle]\nOCI_ResetQueue.restype = OCI_ErrorCode\nOCI_ResetQueue.errcheck = errcheck_oper\n# OCI Common - Timer Handling\nOCI_NO_TIME = BOA_NO_TIME\nOCI_TimeReferenceScale = ctypes.c_uint32\nOCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ResetQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ResetQueue.restype = OCI_ErrorCode\nOCI_ResetQueue.errcheck = errcheck_oper\n# OCI Common - Timer Handling\nOCI_NO_TIME = BOA_NO_TIME\nOCI_TimeReferenceScale = ctypes.c_uint32\nOCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ResetQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ResetQueue.errcheck = errcheck_oper\n# OCI Common - Timer Handling\nOCI_NO_TIME = BOA_NO_TIME\nOCI_TimeReferenceScale = ctypes.c_uint32\nOCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_NO_TIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_NO_TIME = BOA_NO_TIME\nOCI_TimeReferenceScale = ctypes.c_uint32\nOCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimeReferenceScale",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TimeReferenceScale = ctypes.c_uint32\nOCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimeReferenceScaleUnknown",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TimeReferenceScaleUnknown = OCI_TimeReferenceScale(0)\nOCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimeReferenceScaleTAI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TimeReferenceScaleTAI = OCI_TimeReferenceScale(1)\nOCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimeReferenceScaleUTC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TimeReferenceScaleUTC = OCI_TimeReferenceScale(2)\nOCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),\n        (\"tickFrequency\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TimerEvent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TimerEvent = ctypes.c_uint32\nOCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),\n        (\"tickFrequency\", ctypes.c_uint32),\n        (\"ticksPerIncrement\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TIMER_EVENT_SYNC_LOCK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TIMER_EVENT_SYNC_LOCK = OCI_TimerEvent(0)\nOCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),\n        (\"tickFrequency\", ctypes.c_uint32),\n        (\"ticksPerIncrement\", ctypes.c_uint32),\n        (\"localStratumLevel\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TIMER_EVENT_SYNC_LOSS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TIMER_EVENT_SYNC_LOSS = OCI_TimerEvent(1)\nOCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),\n        (\"tickFrequency\", ctypes.c_uint32),\n        (\"ticksPerIncrement\", ctypes.c_uint32),\n        (\"localStratumLevel\", ctypes.c_uint32),\n        (\"localReferenceScale\", OCI_TimeReferenceScale),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_TIMER_EVENT_LEAP_SECOND",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_TIMER_EVENT_LEAP_SECOND = OCI_TimerEvent(2)\nclass OCI_TimerCapabilities(ctypes.Structure):\n    _fields_ = [\n        (\"localClockID\", ctypes.c_char * 40),\n        (\"format\", ctypes.c_uint32),\n        (\"tickFrequency\", ctypes.c_uint32),\n        (\"ticksPerIncrement\", ctypes.c_uint32),\n        (\"localStratumLevel\", ctypes.c_uint32),\n        (\"localReferenceScale\", OCI_TimeReferenceScale),\n        (\"localTimeOriginIso8601\", ctypes.c_char * 40),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerCapabilities",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerCapabilities = _oci.OCI_GetTimerCapabilities\nOCI_GetTimerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_TimerCapabilities),\n]\nOCI_GetTimerCapabilities.restype = OCI_ErrorCode\nOCI_GetTimerCapabilities.errcheck = errcheck_init\nOCI_GetTimerValue = _oci.OCI_GetTimerValue\nOCI_GetTimerValue.argtypes = [\n    OCI_ControllerHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerCapabilities.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_TimerCapabilities),\n]\nOCI_GetTimerCapabilities.restype = OCI_ErrorCode\nOCI_GetTimerCapabilities.errcheck = errcheck_init\nOCI_GetTimerValue = _oci.OCI_GetTimerValue\nOCI_GetTimerValue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_Time),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerCapabilities.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerCapabilities.restype = OCI_ErrorCode\nOCI_GetTimerCapabilities.errcheck = errcheck_init\nOCI_GetTimerValue = _oci.OCI_GetTimerValue\nOCI_GetTimerValue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_Time),\n]\nOCI_GetTimerValue.restype = OCI_ErrorCode\nOCI_GetTimerValue.errcheck = errcheck_oper\n# OCI CAN",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerCapabilities.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerCapabilities.errcheck = errcheck_init\nOCI_GetTimerValue = _oci.OCI_GetTimerValue\nOCI_GetTimerValue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_Time),\n]\nOCI_GetTimerValue.restype = OCI_ErrorCode\nOCI_GetTimerValue.errcheck = errcheck_oper\n# OCI CAN\n# OCI CAN - CAN-FD",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerValue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerValue = _oci.OCI_GetTimerValue\nOCI_GetTimerValue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_Time),\n]\nOCI_GetTimerValue.restype = OCI_ErrorCode\nOCI_GetTimerValue.errcheck = errcheck_oper\n# OCI CAN\n# OCI CAN - CAN-FD\nOCI_CANFDRxMode = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerValue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerValue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_Time),\n]\nOCI_GetTimerValue.restype = OCI_ErrorCode\nOCI_GetTimerValue.errcheck = errcheck_oper\n# OCI CAN\n# OCI CAN - CAN-FD\nOCI_CANFDRxMode = ctypes.c_uint32\nOCI_CANFDRXMODE_CANFD_FRAMES_IGNORED = OCI_CANFDRxMode(1)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerValue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerValue.restype = OCI_ErrorCode\nOCI_GetTimerValue.errcheck = errcheck_oper\n# OCI CAN\n# OCI CAN - CAN-FD\nOCI_CANFDRxMode = ctypes.c_uint32\nOCI_CANFDRXMODE_CANFD_FRAMES_IGNORED = OCI_CANFDRxMode(1)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CAN_MESSAGE = OCI_CANFDRxMode(2)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE = OCI_CANFDRxMode(4)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetTimerValue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetTimerValue.errcheck = errcheck_oper\n# OCI CAN\n# OCI CAN - CAN-FD\nOCI_CANFDRxMode = ctypes.c_uint32\nOCI_CANFDRXMODE_CANFD_FRAMES_IGNORED = OCI_CANFDRxMode(1)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CAN_MESSAGE = OCI_CANFDRxMode(2)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE = OCI_CANFDRxMode(4)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRxMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDRxMode = ctypes.c_uint32\nOCI_CANFDRXMODE_CANFD_FRAMES_IGNORED = OCI_CANFDRxMode(1)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CAN_MESSAGE = OCI_CANFDRxMode(2)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE = OCI_CANFDRxMode(4)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRXMODE_CANFD_FRAMES_IGNORED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDRXMODE_CANFD_FRAMES_IGNORED = OCI_CANFDRxMode(1)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CAN_MESSAGE = OCI_CANFDRxMode(2)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE = OCI_CANFDRxMode(4)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRXMODE_CANFD_FRAMES_USING_CAN_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDRXMODE_CANFD_FRAMES_USING_CAN_MESSAGE = OCI_CANFDRxMode(2)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE = OCI_CANFDRxMode(4)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE = OCI_CANFDRxMode(4)\nOCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDRXMODE_CANFD_FRAMES_USING_CANFD_MESSAGE_PADDING = OCI_CANFDRxMode(8)\nOCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANRxMode = ctypes.c_uint32\nOCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_RXMODE_CAN_FRAMES_IGNORED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_RXMODE_CAN_FRAMES_IGNORED = OCI_CANRxMode(1)\nOCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_RXMODE_CAN_FRAMES_USING_CAN_MESSAGE = OCI_CANRxMode(2)\nOCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDTxConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDTxConfig = ctypes.c_uint32\nOCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),\n    ]\nclass OCI_CANFDConfiguration(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDTX_USE_CAN_FRAMES_ONLY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDTX_USE_CAN_FRAMES_ONLY = OCI_CANFDTxConfig(1)\nOCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),\n    ]\nclass OCI_CANFDConfiguration(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDTX_USE_CANFD_FRAMES_ONLY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDTX_USE_CANFD_FRAMES_ONLY = OCI_CANFDTxConfig(2)\nOCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),\n    ]\nclass OCI_CANFDConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"dataBitRate\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDTX_USE_CAN_AND_CANFD_FRAMES = OCI_CANFDTxConfig(4)\nclass OCI_CANFDRxConfig(ctypes.Structure):\n    _fields_ = [\n        (\"canRxMode\", OCI_CANRxMode),\n        (\"canFdRxMode\", OCI_CANFDRxMode),\n    ]\nclass OCI_CANFDConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"dataBitRate\", ctypes.c_uint32),\n        (\"dataSamplePoint\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_THREE_SAMPLES_PER_BIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_THREE_SAMPLES_PER_BIT = 2\nOCI_CAN_SINGLE_SYNC_EDGE = 1\nOCI_CAN_MEDIA_HIGH_SPEED = 1\nOCI_CAN_STATE_ACTIVE = 0x00000001\nOCI_CAN_STATE_PASSIVE = 0x00000002\nOCI_CAN_STATE_ERRLIMIT = 0x00000004\nOCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_SINGLE_SYNC_EDGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_SINGLE_SYNC_EDGE = 1\nOCI_CAN_MEDIA_HIGH_SPEED = 1\nOCI_CAN_STATE_ACTIVE = 0x00000001\nOCI_CAN_STATE_PASSIVE = 0x00000002\nOCI_CAN_STATE_ERRLIMIT = 0x00000004\nOCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MEDIA_HIGH_SPEED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MEDIA_HIGH_SPEED = 1\nOCI_CAN_STATE_ACTIVE = 0x00000001\nOCI_CAN_STATE_PASSIVE = 0x00000002\nOCI_CAN_STATE_ERRLIMIT = 0x00000004\nOCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_STATE_ACTIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_STATE_ACTIVE = 0x00000001\nOCI_CAN_STATE_PASSIVE = 0x00000002\nOCI_CAN_STATE_ERRLIMIT = 0x00000004\nOCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_STATE_PASSIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_STATE_PASSIVE = 0x00000002\nOCI_CAN_STATE_ERRLIMIT = 0x00000004\nOCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_STATE_ERRLIMIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_STATE_ERRLIMIT = 0x00000004\nOCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_STATE_BUSOFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_STATE_BUSOFF = 0x00000008\nOCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANBusParticipationMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANBusParticipationMode = ctypes.c_uint32\nOCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_BUSMODE_PASSIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_BUSMODE_PASSIVE = OCI_CANBusParticipationMode(1)\nOCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_BUSMODE_ACTIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_BUSMODE_ACTIVE = OCI_CANBusParticipationMode(2)\nOCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANBusTransmissionPolicies",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANBusTransmissionPolicies = ctypes.c_uint32\nOCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),\n        (\"samplesPerBit\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANTX_UNDEFINED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANTX_UNDEFINED = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"BTL_Cycles\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANTX_DONTCARE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANTX_DONTCARE = OCI_CANBusTransmissionPolicies(0)\nOCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"BTL_Cycles\", ctypes.c_uint32),\n        (\"SJW\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANTX_FIFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANTX_FIFO = OCI_CANBusTransmissionPolicies(1)\nOCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"BTL_Cycles\", ctypes.c_uint32),\n        (\"SJW\", ctypes.c_uint32),\n        (\"syncEdge\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANTX_BESTEFFORT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANTX_BESTEFFORT = OCI_CANBusTransmissionPolicies(2)\nclass OCI_CANConfiguration(ctypes.Structure):\n    _fields_ = [\n        (\"baudrate\", ctypes.c_uint32),\n        (\"samplePoint\", ctypes.c_uint32),\n        (\"samplesPerBit\", ctypes.c_uint32),\n        (\"BTL_Cycles\", ctypes.c_uint32),\n        (\"SJW\", ctypes.c_uint32),\n        (\"syncEdge\", ctypes.c_uint32),\n        (\"physicalMedia\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANControllerNoSearch",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANControllerNoSearch = _oci.OCI_CreateCANControllerNoSearch\nOCI_CreateCANControllerNoSearch.argtypes = [\n    ctypes.c_char_p,\n    ctypes.POINTER(BOA_Version),\n    ctypes.POINTER(CSI_Tree),\n    ctypes.POINTER(OCI_ControllerHandle),\n]\nOCI_CreateCANControllerNoSearch.restype = OCI_ErrorCode\nOCI_CreateCANControllerNoSearch.errcheck = errcheck_init\nOCI_OpenCANController = _oci.OCI_OpenCANController",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANControllerNoSearch.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANControllerNoSearch.argtypes = [\n    ctypes.c_char_p,\n    ctypes.POINTER(BOA_Version),\n    ctypes.POINTER(CSI_Tree),\n    ctypes.POINTER(OCI_ControllerHandle),\n]\nOCI_CreateCANControllerNoSearch.restype = OCI_ErrorCode\nOCI_CreateCANControllerNoSearch.errcheck = errcheck_init\nOCI_OpenCANController = _oci.OCI_OpenCANController\nOCI_OpenCANController.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANControllerNoSearch.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANControllerNoSearch.restype = OCI_ErrorCode\nOCI_CreateCANControllerNoSearch.errcheck = errcheck_init\nOCI_OpenCANController = _oci.OCI_OpenCANController\nOCI_OpenCANController.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n    ctypes.POINTER(OCI_CANControllerProperties),\n]\nOCI_OpenCANController.restype = OCI_ErrorCode\n# no .errcheck, since we tolerate OCI_WARN_PARAM_ADAPTED warning",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANControllerNoSearch.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANControllerNoSearch.errcheck = errcheck_init\nOCI_OpenCANController = _oci.OCI_OpenCANController\nOCI_OpenCANController.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n    ctypes.POINTER(OCI_CANControllerProperties),\n]\nOCI_OpenCANController.restype = OCI_ErrorCode\n# no .errcheck, since we tolerate OCI_WARN_PARAM_ADAPTED warning\n# OCI_OpenCANController.errcheck = errcheck_init",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_OpenCANController",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_OpenCANController = _oci.OCI_OpenCANController\nOCI_OpenCANController.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n    ctypes.POINTER(OCI_CANControllerProperties),\n]\nOCI_OpenCANController.restype = OCI_ErrorCode\n# no .errcheck, since we tolerate OCI_WARN_PARAM_ADAPTED warning\n# OCI_OpenCANController.errcheck = errcheck_init\nOCI_CloseCANController = _oci.OCI_CloseCANController",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_OpenCANController.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_OpenCANController.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n    ctypes.POINTER(OCI_CANControllerProperties),\n]\nOCI_OpenCANController.restype = OCI_ErrorCode\n# no .errcheck, since we tolerate OCI_WARN_PARAM_ADAPTED warning\n# OCI_OpenCANController.errcheck = errcheck_init\nOCI_CloseCANController = _oci.OCI_CloseCANController\nOCI_CloseCANController.argtypes = [OCI_ControllerHandle]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_OpenCANController.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_OpenCANController.restype = OCI_ErrorCode\n# no .errcheck, since we tolerate OCI_WARN_PARAM_ADAPTED warning\n# OCI_OpenCANController.errcheck = errcheck_init\nOCI_CloseCANController = _oci.OCI_CloseCANController\nOCI_CloseCANController.argtypes = [OCI_ControllerHandle]\nOCI_CloseCANController.restype = OCI_ErrorCode\nOCI_CloseCANController.errcheck = errcheck_oper\nOCI_DestroyCANController = _oci.OCI_DestroyCANController\nOCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CloseCANController",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CloseCANController = _oci.OCI_CloseCANController\nOCI_CloseCANController.argtypes = [OCI_ControllerHandle]\nOCI_CloseCANController.restype = OCI_ErrorCode\nOCI_CloseCANController.errcheck = errcheck_oper\nOCI_DestroyCANController = _oci.OCI_DestroyCANController\nOCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CloseCANController.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CloseCANController.argtypes = [OCI_ControllerHandle]\nOCI_CloseCANController.restype = OCI_ErrorCode\nOCI_CloseCANController.errcheck = errcheck_oper\nOCI_DestroyCANController = _oci.OCI_DestroyCANController\nOCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CloseCANController.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CloseCANController.restype = OCI_ErrorCode\nOCI_CloseCANController.errcheck = errcheck_oper\nOCI_DestroyCANController = _oci.OCI_DestroyCANController\nOCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CloseCANController.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CloseCANController.errcheck = errcheck_oper\nOCI_DestroyCANController = _oci.OCI_DestroyCANController\nOCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANController",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANController = _oci.OCI_DestroyCANController\nOCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]\nOCI_AdaptCANConfiguration.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANController.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANController.argtypes = [OCI_ControllerHandle]\nOCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]\nOCI_AdaptCANConfiguration.restype = OCI_ErrorCode\nOCI_AdaptCANConfiguration.errcheck = errcheck_oper",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANController.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANController.restype = OCI_ErrorCode\nOCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]\nOCI_AdaptCANConfiguration.restype = OCI_ErrorCode\nOCI_AdaptCANConfiguration.errcheck = errcheck_oper\nOCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANController.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANController.errcheck = errcheck_oper\nOCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]\nOCI_AdaptCANConfiguration.restype = OCI_ErrorCode\nOCI_AdaptCANConfiguration.errcheck = errcheck_oper\nOCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities\nOCI_GetCANControllerCapabilities.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AdaptCANConfiguration",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AdaptCANConfiguration = _oci.OCI_AdaptCANConfiguration\nOCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]\nOCI_AdaptCANConfiguration.restype = OCI_ErrorCode\nOCI_AdaptCANConfiguration.errcheck = errcheck_oper\nOCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities\nOCI_GetCANControllerCapabilities.argtypes = [\n    OCI_ControllerHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AdaptCANConfiguration.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AdaptCANConfiguration.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANConfiguration),\n]\nOCI_AdaptCANConfiguration.restype = OCI_ErrorCode\nOCI_AdaptCANConfiguration.errcheck = errcheck_oper\nOCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities\nOCI_GetCANControllerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerCapabilities),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AdaptCANConfiguration.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AdaptCANConfiguration.restype = OCI_ErrorCode\nOCI_AdaptCANConfiguration.errcheck = errcheck_oper\nOCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities\nOCI_GetCANControllerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerCapabilities),\n]\nOCI_GetCANControllerCapabilities.restype = OCI_ErrorCode\nOCI_GetCANControllerCapabilities.errcheck = errcheck_init\nOCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AdaptCANConfiguration.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AdaptCANConfiguration.errcheck = errcheck_oper\nOCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities\nOCI_GetCANControllerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerCapabilities),\n]\nOCI_GetCANControllerCapabilities.restype = OCI_ErrorCode\nOCI_GetCANControllerCapabilities.errcheck = errcheck_init\nOCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus\nOCI_GetCANControllerStatus.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerCapabilities",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerCapabilities = _oci.OCI_GetCANControllerCapabilities\nOCI_GetCANControllerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerCapabilities),\n]\nOCI_GetCANControllerCapabilities.restype = OCI_ErrorCode\nOCI_GetCANControllerCapabilities.errcheck = errcheck_init\nOCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus\nOCI_GetCANControllerStatus.argtypes = [\n    OCI_ControllerHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerCapabilities.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerCapabilities.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerCapabilities),\n]\nOCI_GetCANControllerCapabilities.restype = OCI_ErrorCode\nOCI_GetCANControllerCapabilities.errcheck = errcheck_init\nOCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus\nOCI_GetCANControllerStatus.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerStatus),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerCapabilities.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerCapabilities.restype = OCI_ErrorCode\nOCI_GetCANControllerCapabilities.errcheck = errcheck_init\nOCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus\nOCI_GetCANControllerStatus.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerStatus),\n]\nOCI_GetCANControllerStatus.restype = OCI_ErrorCode\nOCI_GetCANControllerStatus.errcheck = errcheck_oper\n# OCI CAN - Filter",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerCapabilities.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerCapabilities.errcheck = errcheck_init\nOCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus\nOCI_GetCANControllerStatus.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerStatus),\n]\nOCI_GetCANControllerStatus.restype = OCI_ErrorCode\nOCI_GetCANControllerStatus.errcheck = errcheck_oper\n# OCI CAN - Filter\nclass OCI_CANRxFilter(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerStatus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerStatus = _oci.OCI_GetCANControllerStatus\nOCI_GetCANControllerStatus.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerStatus),\n]\nOCI_GetCANControllerStatus.restype = OCI_ErrorCode\nOCI_GetCANControllerStatus.errcheck = errcheck_oper\n# OCI CAN - Filter\nclass OCI_CANRxFilter(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerStatus.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerStatus.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANControllerStatus),\n]\nOCI_GetCANControllerStatus.restype = OCI_ErrorCode\nOCI_GetCANControllerStatus.errcheck = errcheck_oper\n# OCI CAN - Filter\nclass OCI_CANRxFilter(ctypes.Structure):\n    _fields_ = [\n        (\"frameIDValue\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerStatus.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerStatus.restype = OCI_ErrorCode\nOCI_GetCANControllerStatus.errcheck = errcheck_oper\n# OCI CAN - Filter\nclass OCI_CANRxFilter(ctypes.Structure):\n    _fields_ = [\n        (\"frameIDValue\", ctypes.c_uint32),\n        (\"frameIDMask\", ctypes.c_uint32),\n        (\"tag\", ctypes.c_uint32),\n    ]\nclass OCI_CANRxFilterEx(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_GetCANControllerStatus.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_GetCANControllerStatus.errcheck = errcheck_oper\n# OCI CAN - Filter\nclass OCI_CANRxFilter(ctypes.Structure):\n    _fields_ = [\n        (\"frameIDValue\", ctypes.c_uint32),\n        (\"frameIDMask\", ctypes.c_uint32),\n        (\"tag\", ctypes.c_uint32),\n    ]\nclass OCI_CANRxFilterEx(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AddCANFrameFilterEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AddCANFrameFilterEx = _oci.OCI_AddCANFrameFilterEx\nOCI_AddCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANRxFilterEx)),\n    ctypes.c_uint32,\n]\nOCI_AddCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_AddCANFrameFilterEx.errcheck = errcheck_oper\nOCI_RemoveCANFrameFilterEx = _oci.OCI_RemoveCANFrameFilterEx\nOCI_RemoveCANFrameFilterEx.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AddCANFrameFilterEx.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AddCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANRxFilterEx)),\n    ctypes.c_uint32,\n]\nOCI_AddCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_AddCANFrameFilterEx.errcheck = errcheck_oper\nOCI_RemoveCANFrameFilterEx = _oci.OCI_RemoveCANFrameFilterEx\nOCI_RemoveCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AddCANFrameFilterEx.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AddCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_AddCANFrameFilterEx.errcheck = errcheck_oper\nOCI_RemoveCANFrameFilterEx = _oci.OCI_RemoveCANFrameFilterEx\nOCI_RemoveCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANRxFilterEx)),\n    ctypes.c_uint32,\n]\nOCI_RemoveCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_RemoveCANFrameFilterEx.errcheck = errcheck_oper",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_AddCANFrameFilterEx.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_AddCANFrameFilterEx.errcheck = errcheck_oper\nOCI_RemoveCANFrameFilterEx = _oci.OCI_RemoveCANFrameFilterEx\nOCI_RemoveCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANRxFilterEx)),\n    ctypes.c_uint32,\n]\nOCI_RemoveCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_RemoveCANFrameFilterEx.errcheck = errcheck_oper\n# OCI CAN - Messages",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_RemoveCANFrameFilterEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_RemoveCANFrameFilterEx = _oci.OCI_RemoveCANFrameFilterEx\nOCI_RemoveCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANRxFilterEx)),\n    ctypes.c_uint32,\n]\nOCI_RemoveCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_RemoveCANFrameFilterEx.errcheck = errcheck_oper\n# OCI CAN - Messages\nOCI_CAN_MSG_FLAG_EXTENDED = 0x1",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_RemoveCANFrameFilterEx.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_RemoveCANFrameFilterEx.argtypes = [\n    OCI_QueueHandle,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANRxFilterEx)),\n    ctypes.c_uint32,\n]\nOCI_RemoveCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_RemoveCANFrameFilterEx.errcheck = errcheck_oper\n# OCI CAN - Messages\nOCI_CAN_MSG_FLAG_EXTENDED = 0x1\nOCI_CAN_MSG_FLAG_REMOTE_FRAME = 0x2",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_RemoveCANFrameFilterEx.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_RemoveCANFrameFilterEx.restype = OCI_ErrorCode\nOCI_RemoveCANFrameFilterEx.errcheck = errcheck_oper\n# OCI CAN - Messages\nOCI_CAN_MSG_FLAG_EXTENDED = 0x1\nOCI_CAN_MSG_FLAG_REMOTE_FRAME = 0x2\nOCI_CAN_MSG_FLAG_SELFRECEPTION = 0x4\nOCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE = 0x8\nOCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_RemoveCANFrameFilterEx.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_RemoveCANFrameFilterEx.errcheck = errcheck_oper\n# OCI CAN - Messages\nOCI_CAN_MSG_FLAG_EXTENDED = 0x1\nOCI_CAN_MSG_FLAG_REMOTE_FRAME = 0x2\nOCI_CAN_MSG_FLAG_SELFRECEPTION = 0x4\nOCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE = 0x8\nOCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_EXTENDED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_EXTENDED = 0x1\nOCI_CAN_MSG_FLAG_REMOTE_FRAME = 0x2\nOCI_CAN_MSG_FLAG_SELFRECEPTION = 0x4\nOCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE = 0x8\nOCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_REMOTE_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_REMOTE_FRAME = 0x2\nOCI_CAN_MSG_FLAG_SELFRECEPTION = 0x4\nOCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE = 0x8\nOCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_SELFRECEPTION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_SELFRECEPTION = 0x4\nOCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE = 0x8\nOCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_FD_DATA_BIT_RATE = 0x8\nOCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_FD_TRUNC_AND_PAD = 0x10\nOCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_FD_ERROR_PASSIVE = 0x20\nOCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_MSG_FLAG_FD_DATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_MSG_FLAG_FD_DATA = 0x40\nOCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANMessageDataType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANMessageDataType = ctypes.c_uint32\nOCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_RX_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_RX_MESSAGE = OCI_CANMessageDataType(1)\nOCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_TX_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_TX_MESSAGE = OCI_CANMessageDataType(2)\nOCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_ERROR_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_ERROR_FRAME = OCI_CANMessageDataType(3)\nOCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_BUS_EVENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_BUS_EVENT = OCI_CANMessageDataType(4)\nOCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_INTERNAL_ERROR_EVENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_INTERNAL_ERROR_EVENT = OCI_CANMessageDataType(5)\nOCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_QUEUE_EVENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_QUEUE_EVENT = OCI_CANMessageDataType(6)\nOCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CAN_TIMER_EVENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CAN_TIMER_EVENT = OCI_CANMessageDataType(7)\nOCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),\n        (\"data\", ctypes.c_uint8 * 8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDRX_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDRX_MESSAGE = OCI_CANMessageDataType(8)\nOCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),\n        (\"data\", ctypes.c_uint8 * 8),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANFDTX_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANFDTX_MESSAGE = OCI_CANMessageDataType(9)\nclass OCI_CANTxMessage(ctypes.Structure):\n    _fields_ = [\n        (\"frameID\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint16),\n        (\"res\", ctypes.c_uint8),\n        (\"dlc\", ctypes.c_uint8),\n        (\"data\", ctypes.c_uint8 * 8),\n    ]\nclass OCI_CANRxMessage(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxCallbackFunctionSingleMsg",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANRxCallbackFunctionSingleMsg = ctypes.CFUNCTYPE(\n    None, ctypes.c_void_p, ctypes.POINTER(OCI_CANMessage)\n)\nOCI_CANRxCallbackFunctionSingleMsgEx = ctypes.CFUNCTYPE(\n    None, ctypes.c_void_p, ctypes.POINTER(OCI_CANMessageEx)\n)\nclass OCI_CANRxCallbackSingleMsg(ctypes.Structure):\n    class _U(ctypes.Union):\n        _fields_ = [\n            (\"function\", OCI_CANRxCallbackFunctionSingleMsg),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CANRxCallbackFunctionSingleMsgEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CANRxCallbackFunctionSingleMsgEx = ctypes.CFUNCTYPE(\n    None, ctypes.c_void_p, ctypes.POINTER(OCI_CANMessageEx)\n)\nclass OCI_CANRxCallbackSingleMsg(ctypes.Structure):\n    class _U(ctypes.Union):\n        _fields_ = [\n            (\"function\", OCI_CANRxCallbackFunctionSingleMsg),\n            (\"functionEx\", OCI_CANRxCallbackFunctionSingleMsgEx),\n        ]\n    _anonymous_ = (\"u\",)",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANRxQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANRxQueue = _oci.OCI_CreateCANRxQueue\nOCI_CreateCANRxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANRxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANRxQueue.restype = OCI_ErrorCode\nOCI_CreateCANRxQueue.errcheck = errcheck_init\nOCI_DestroyCANRxQueue = _oci.OCI_DestroyCANRxQueue\nOCI_DestroyCANRxQueue.argtypes = [OCI_QueueHandle]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANRxQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANRxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANRxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANRxQueue.restype = OCI_ErrorCode\nOCI_CreateCANRxQueue.errcheck = errcheck_init\nOCI_DestroyCANRxQueue = _oci.OCI_DestroyCANRxQueue\nOCI_DestroyCANRxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANRxQueue.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANRxQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANRxQueue.restype = OCI_ErrorCode\nOCI_CreateCANRxQueue.errcheck = errcheck_init\nOCI_DestroyCANRxQueue = _oci.OCI_DestroyCANRxQueue\nOCI_DestroyCANRxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANRxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANRxQueue.errcheck = errcheck_oper\nOCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANRxQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANRxQueue.errcheck = errcheck_init\nOCI_DestroyCANRxQueue = _oci.OCI_DestroyCANRxQueue\nOCI_DestroyCANRxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANRxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANRxQueue.errcheck = errcheck_oper\nOCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANRxQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANRxQueue = _oci.OCI_DestroyCANRxQueue\nOCI_DestroyCANRxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANRxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANRxQueue.errcheck = errcheck_oper\nOCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANRxQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANRxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANRxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANRxQueue.errcheck = errcheck_oper\nOCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANTxQueue.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANRxQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANRxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANRxQueue.errcheck = errcheck_oper\nOCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANTxQueue.restype = OCI_ErrorCode\nOCI_CreateCANTxQueue.errcheck = errcheck_init",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANRxQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANRxQueue.errcheck = errcheck_oper\nOCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANTxQueue.restype = OCI_ErrorCode\nOCI_CreateCANTxQueue.errcheck = errcheck_init\nOCI_DestroyCANTxQueue = _oci.OCI_DestroyCANTxQueue",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANTxQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANTxQueue = _oci.OCI_CreateCANTxQueue\nOCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANTxQueue.restype = OCI_ErrorCode\nOCI_CreateCANTxQueue.errcheck = errcheck_init\nOCI_DestroyCANTxQueue = _oci.OCI_DestroyCANTxQueue\nOCI_DestroyCANTxQueue.argtypes = [OCI_QueueHandle]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANTxQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANTxQueue.argtypes = [\n    OCI_ControllerHandle,\n    ctypes.POINTER(OCI_CANTxQueueConfiguration),\n    ctypes.POINTER(OCI_QueueHandle),\n]\nOCI_CreateCANTxQueue.restype = OCI_ErrorCode\nOCI_CreateCANTxQueue.errcheck = errcheck_init\nOCI_DestroyCANTxQueue = _oci.OCI_DestroyCANTxQueue\nOCI_DestroyCANTxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANTxQueue.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANTxQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANTxQueue.restype = OCI_ErrorCode\nOCI_CreateCANTxQueue.errcheck = errcheck_init\nOCI_DestroyCANTxQueue = _oci.OCI_DestroyCANTxQueue\nOCI_DestroyCANTxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANTxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANTxQueue.errcheck = errcheck_oper\nOCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_CreateCANTxQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_CreateCANTxQueue.errcheck = errcheck_init\nOCI_DestroyCANTxQueue = _oci.OCI_DestroyCANTxQueue\nOCI_DestroyCANTxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANTxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANTxQueue.errcheck = errcheck_oper\nOCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANTxQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANTxQueue = _oci.OCI_DestroyCANTxQueue\nOCI_DestroyCANTxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANTxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANTxQueue.errcheck = errcheck_oper\nOCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANTxQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANTxQueue.argtypes = [OCI_QueueHandle]\nOCI_DestroyCANTxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANTxQueue.errcheck = errcheck_oper\nOCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANTxQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANTxQueue.restype = OCI_ErrorCode\nOCI_DestroyCANTxQueue.errcheck = errcheck_oper\nOCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_DestroyCANTxQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_DestroyCANTxQueue.errcheck = errcheck_oper\nOCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n]\nOCI_WriteCANDataEx.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_WriteCANDataEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_WriteCANDataEx = _oci.OCI_WriteCANDataEx\nOCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n]\nOCI_WriteCANDataEx.restype = OCI_ErrorCode\nOCI_WriteCANDataEx.errcheck = errcheck_oper",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_WriteCANDataEx.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_WriteCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n]\nOCI_WriteCANDataEx.restype = OCI_ErrorCode\nOCI_WriteCANDataEx.errcheck = errcheck_oper\nOCI_ReadCANDataEx = _oci.OCI_ReadCANDataEx",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_WriteCANDataEx.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_WriteCANDataEx.restype = OCI_ErrorCode\nOCI_WriteCANDataEx.errcheck = errcheck_oper\nOCI_ReadCANDataEx = _oci.OCI_ReadCANDataEx\nOCI_ReadCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n    ctypes.POINTER(ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_WriteCANDataEx.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_WriteCANDataEx.errcheck = errcheck_oper\nOCI_ReadCANDataEx = _oci.OCI_ReadCANDataEx\nOCI_ReadCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n    ctypes.POINTER(ctypes.c_uint32),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ReadCANDataEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ReadCANDataEx = _oci.OCI_ReadCANDataEx\nOCI_ReadCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n    ctypes.POINTER(ctypes.c_uint32),\n]\nOCI_ReadCANDataEx.restype = OCI_ErrorCode",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ReadCANDataEx.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ReadCANDataEx.argtypes = [\n    OCI_QueueHandle,\n    OCI_Time,\n    ctypes.POINTER(ctypes.POINTER(OCI_CANMessageEx)),\n    ctypes.c_uint32,\n    ctypes.POINTER(ctypes.c_uint32),\n    ctypes.POINTER(ctypes.c_uint32),\n]\nOCI_ReadCANDataEx.restype = OCI_ErrorCode\nOCI_ReadCANDataEx.errcheck = errcheck_oper",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ReadCANDataEx.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ReadCANDataEx.restype = OCI_ErrorCode\nOCI_ReadCANDataEx.errcheck = errcheck_oper",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "OCI_ReadCANDataEx.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "description": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "peekOfCode": "OCI_ReadCANDataEx.errcheck = errcheck_oper",
        "detail": "dbus-serialbattery.ext.can.interfaces.etas.boa",
        "documentation": {}
    },
    {
        "label": "ICSApiError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "class ICSApiError(CanError):\n    \"\"\"\n    Indicates an error with the ICS API.\n    \"\"\"\n    # A critical error which affects operation or accuracy.\n    ICS_SPY_ERR_CRITICAL = 0x10\n    # An error which is not understood.\n    ICS_SPY_ERR_QUESTION = 0x20\n    # An important error which may be critical depending on the application\n    ICS_SPY_ERR_EXCLAMATION = 0x30",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "ICSInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "class ICSInitializationError(ICSApiError, CanInitializationError):\n    pass\nclass ICSOperationError(ICSApiError, CanOperationError):\n    pass\ndef check_if_bus_open(func):\n    \"\"\"\n    Decorator that checks if the bus is open before executing the function.\n    If the bus is not open, it raises a CanOperationError.\n    \"\"\"\n    @functools.wraps(func)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "ICSOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "class ICSOperationError(ICSApiError, CanOperationError):\n    pass\ndef check_if_bus_open(func):\n    \"\"\"\n    Decorator that checks if the bus is open before executing the function.\n    If the bus is not open, it raises a CanOperationError.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "NeoViBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "class NeoViBus(BusABC):\n    \"\"\"\n    The CAN Bus implemented for the python_ics interface\n    https://github.com/intrepidcs/python_ics\n    \"\"\"\n    def __init__(self, channel, can_filters=None, **kwargs):\n        \"\"\"\n        :param channel:\n            The channel ids to create this bus with.\n            Can also be a single integer, netid name or a comma separated",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "check_if_bus_open",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "def check_if_bus_open(func):\n    \"\"\"\n    Decorator that checks if the bus is open before executing the function.\n    If the bus is not open, it raises a CanOperationError.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(self, *args, **kwargs):\n        \"\"\"\n        Wrapper function that checks if the bus is open before executing the function.\n        :raises CanOperationError: If the bus is not open.",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "logger = logging.getLogger(__name__)\ntry:\n    import ics\nexcept ImportError as ie:\n    logger.warning(\n        \"You won't be able to use the ICS neoVI can backend without the \"\n        \"python-ics module installed!: %s\",\n        ie,\n    )\n    ics = None",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "open_lock",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "open_lock = FileLock(os.path.join(tempfile.gettempdir(), \"neovi.lock\"))\ndescription_id = cycle(range(1, 0x8000))\nICS_EPOCH = datetime.fromisoformat(\"2007-01-01\")\nICS_EPOCH_DELTA = (ICS_EPOCH - datetime.fromisoformat(\"1970-01-01\")).total_seconds()\nclass ICSApiError(CanError):\n    \"\"\"\n    Indicates an error with the ICS API.\n    \"\"\"\n    # A critical error which affects operation or accuracy.\n    ICS_SPY_ERR_CRITICAL = 0x10",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "description_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "description_id = cycle(range(1, 0x8000))\nICS_EPOCH = datetime.fromisoformat(\"2007-01-01\")\nICS_EPOCH_DELTA = (ICS_EPOCH - datetime.fromisoformat(\"1970-01-01\")).total_seconds()\nclass ICSApiError(CanError):\n    \"\"\"\n    Indicates an error with the ICS API.\n    \"\"\"\n    # A critical error which affects operation or accuracy.\n    ICS_SPY_ERR_CRITICAL = 0x10\n    # An error which is not understood.",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "ICS_EPOCH",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "ICS_EPOCH = datetime.fromisoformat(\"2007-01-01\")\nICS_EPOCH_DELTA = (ICS_EPOCH - datetime.fromisoformat(\"1970-01-01\")).total_seconds()\nclass ICSApiError(CanError):\n    \"\"\"\n    Indicates an error with the ICS API.\n    \"\"\"\n    # A critical error which affects operation or accuracy.\n    ICS_SPY_ERR_CRITICAL = 0x10\n    # An error which is not understood.\n    ICS_SPY_ERR_QUESTION = 0x20",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "ICS_EPOCH_DELTA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "description": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "peekOfCode": "ICS_EPOCH_DELTA = (ICS_EPOCH - datetime.fromisoformat(\"1970-01-01\")).total_seconds()\nclass ICSApiError(CanError):\n    \"\"\"\n    Indicates an error with the ICS API.\n    \"\"\"\n    # A critical error which affects operation or accuracy.\n    ICS_SPY_ERR_CRITICAL = 0x10\n    # An error which is not understood.\n    ICS_SPY_ERR_QUESTION = 0x20\n    # An important error which may be critical depending on the application",
        "detail": "dbus-serialbattery.ext.can.interfaces.ics_neovi.neovi_bus",
        "documentation": {}
    },
    {
        "label": "IXXATBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib",
        "peekOfCode": "class IXXATBus(BusABC):\n    \"\"\"The CAN Bus implemented for the IXXAT interface.\n    Based on the C implementation of IXXAT, two different dlls are provided by IXXAT, one to work with CAN,\n    the other with CAN-FD.\n    This class only delegates to related implementation (in calib_vcinpl or canlib_vcinpl2)\n    class depending on fd user option.\n    \"\"\"\n    def __init__(\n        self,\n        channel: int,",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib",
        "documentation": {}
    },
    {
        "label": "IXXATBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "class IXXATBus(BusABC):\n    \"\"\"The CAN Bus implemented for the IXXAT interface.\n    .. warning::\n        This interface does implement efficient filtering of messages, but\n        the filters have to be set in ``__init__`` using the ``can_filters`` parameter.\n        Using :meth:`~can.BusABC.set_filters` does not work.\n    \"\"\"\n    CHANNEL_BITRATES = {\n        0: {\n            10000: constants.CAN_BT0_10KB,",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "CyclicSendTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "class CyclicSendTask(LimitedDurationCyclicSendTaskABC, RestartableCyclicTaskABC):\n    \"\"\"A message in the cyclic transmit list.\"\"\"\n    def __init__(\n        self,\n        scheduler,\n        msgs,\n        period,\n        duration,\n        resolution,\n        autostart: bool = True,",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "get_ixxat_hwids",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "def get_ixxat_hwids():\n    \"\"\"Get a list of hardware ids of all available IXXAT devices.\"\"\"\n    hwids = []\n    device_handle = HANDLE()\n    device_info = structures.VCIDEVICEINFO()\n    _canlib.vciEnumDeviceOpen(ctypes.byref(device_handle))\n    while True:\n        try:\n            _canlib.vciEnumDeviceNext(device_handle, ctypes.byref(device_info))\n        except StopIteration:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "__all__ = [\n    \"VCITimeout\",\n    \"VCIError\",\n    \"VCIBusOffError\",\n    \"VCIDeviceNotFoundError\",\n    \"IXXATBus\",\n    \"vciFormatError\",\n]\nlog = logging.getLogger(\"can.ixxat\")\n# Hack to have vciFormatError as a free function, see below",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "log = logging.getLogger(\"can.ixxat\")\n# Hack to have vciFormatError as a free function, see below\nvciFormatError = None\n# main ctypes instance\n_canlib = None\n# TODO: Use ECI driver for linux\nif sys.platform == \"win32\" or sys.platform == \"cygwin\":\n    try:\n        _canlib = CLibrary(\"vcinpl.dll\")\n    except Exception as e:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "vciFormatError",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "vciFormatError = None\n# main ctypes instance\n_canlib = None\n# TODO: Use ECI driver for linux\nif sys.platform == \"win32\" or sys.platform == \"cygwin\":\n    try:\n        _canlib = CLibrary(\"vcinpl.dll\")\n    except Exception as e:\n        log.warning(\"Cannot load IXXAT vcinpl library: %s\", e)\nelse:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "_canlib",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "_canlib = None\n# TODO: Use ECI driver for linux\nif sys.platform == \"win32\" or sys.platform == \"cygwin\":\n    try:\n        _canlib = CLibrary(\"vcinpl.dll\")\n    except Exception as e:\n        log.warning(\"Cannot load IXXAT vcinpl library: %s\", e)\nelse:\n    # Will not work on other systems, but have it importable anyway for\n    # tests/sphinx",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "CAN_INFO_MESSAGES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "CAN_INFO_MESSAGES = {\n    constants.CAN_INFO_START: \"CAN started\",\n    constants.CAN_INFO_STOP: \"CAN stopped\",\n    constants.CAN_INFO_RESET: \"CAN reset\",\n}\nCAN_ERROR_MESSAGES = {\n    constants.CAN_ERROR_STUFF: \"CAN bit stuff error\",\n    constants.CAN_ERROR_FORM: \"CAN form error\",\n    constants.CAN_ERROR_ACK: \"CAN acknowledgment error\",\n    constants.CAN_ERROR_BIT: \"CAN bit error\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_MESSAGES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "CAN_ERROR_MESSAGES = {\n    constants.CAN_ERROR_STUFF: \"CAN bit stuff error\",\n    constants.CAN_ERROR_FORM: \"CAN form error\",\n    constants.CAN_ERROR_ACK: \"CAN acknowledgment error\",\n    constants.CAN_ERROR_BIT: \"CAN bit error\",\n    constants.CAN_ERROR_CRC: \"CAN CRC error\",\n    constants.CAN_ERROR_OTHER: \"Other (unknown) CAN error\",\n}\nCAN_STATUS_FLAGS = {\n    constants.CAN_STATUS_TXPEND: \"transmission pending\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "peekOfCode": "CAN_STATUS_FLAGS = {\n    constants.CAN_STATUS_TXPEND: \"transmission pending\",\n    constants.CAN_STATUS_OVRRUN: \"data overrun occurred\",\n    constants.CAN_STATUS_ERRLIM: \"error warning limit exceeded\",\n    constants.CAN_STATUS_BUSOFF: \"bus off\",\n    constants.CAN_STATUS_ININIT: \"init mode active\",\n    constants.CAN_STATUS_BUSCERR: \"bus coupling error\",\n}\n# ----------------------------------------------------------------------------\nclass IXXATBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl",
        "documentation": {}
    },
    {
        "label": "IXXATBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "class IXXATBus(BusABC):\n    \"\"\"The CAN Bus implemented for the IXXAT interface.\n    .. warning::\n        This interface does implement efficient filtering of messages, but\n        the filters have to be set in ``__init__`` using the ``can_filters`` parameter.\n        Using :meth:`~can.BusABC.set_filters` does not work.\n    \"\"\"\n    @deprecated_args_alias(\n        deprecation_start=\"4.0.0\",\n        deprecation_end=\"5.0.0\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "CyclicSendTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "class CyclicSendTask(LimitedDurationCyclicSendTaskABC, RestartableCyclicTaskABC):\n    \"\"\"A message in the cyclic transmit list.\"\"\"\n    def __init__(\n        self,\n        scheduler,\n        msgs,\n        period,\n        duration,\n        resolution,\n        autostart: bool = True,",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "get_ixxat_hwids",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "def get_ixxat_hwids():\n    \"\"\"Get a list of hardware ids of all available IXXAT devices.\"\"\"\n    hwids = []\n    device_handle = HANDLE()\n    device_info = structures.VCIDEVICEINFO()\n    _canlib.vciEnumDeviceOpen(ctypes.byref(device_handle))\n    while True:\n        try:\n            _canlib.vciEnumDeviceNext(device_handle, ctypes.byref(device_info))\n        except StopIteration:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "__all__ = [\n    \"VCITimeout\",\n    \"VCIError\",\n    \"VCIBusOffError\",\n    \"VCIDeviceNotFoundError\",\n    \"IXXATBus\",\n    \"vciFormatError\",\n]\nlog = logging.getLogger(\"can.ixxat\")\n# Hack to have vciFormatError as a free function, see below",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "log = logging.getLogger(\"can.ixxat\")\n# Hack to have vciFormatError as a free function, see below\nvciFormatError = None\n# main ctypes instance\n_canlib = None\n# TODO: Use ECI driver for linux\nif sys.platform == \"win32\" or sys.platform == \"cygwin\":\n    try:\n        _canlib = CLibrary(\"vcinpl2.dll\")\n    except Exception as e:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "vciFormatError",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "vciFormatError = None\n# main ctypes instance\n_canlib = None\n# TODO: Use ECI driver for linux\nif sys.platform == \"win32\" or sys.platform == \"cygwin\":\n    try:\n        _canlib = CLibrary(\"vcinpl2.dll\")\n    except Exception as e:\n        log.warning(\"Cannot load IXXAT vcinpl library: %s\", e)\nelse:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "_canlib",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "_canlib = None\n# TODO: Use ECI driver for linux\nif sys.platform == \"win32\" or sys.platform == \"cygwin\":\n    try:\n        _canlib = CLibrary(\"vcinpl2.dll\")\n    except Exception as e:\n        log.warning(\"Cannot load IXXAT vcinpl library: %s\", e)\nelse:\n    # Will not work on other systems, but have it importable anyway for\n    # tests/sphinx",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "CAN_INFO_MESSAGES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "CAN_INFO_MESSAGES = {\n    constants.CAN_INFO_START: \"CAN started\",\n    constants.CAN_INFO_STOP: \"CAN stopped\",\n    constants.CAN_INFO_RESET: \"CAN reset\",\n}\nCAN_ERROR_MESSAGES = {\n    constants.CAN_ERROR_STUFF: \"CAN bit stuff error\",\n    constants.CAN_ERROR_FORM: \"CAN form error\",\n    constants.CAN_ERROR_ACK: \"CAN acknowledgment error\",\n    constants.CAN_ERROR_BIT: \"CAN bit error\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_MESSAGES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "CAN_ERROR_MESSAGES = {\n    constants.CAN_ERROR_STUFF: \"CAN bit stuff error\",\n    constants.CAN_ERROR_FORM: \"CAN form error\",\n    constants.CAN_ERROR_ACK: \"CAN acknowledgment error\",\n    constants.CAN_ERROR_BIT: \"CAN bit error\",\n    constants.CAN_ERROR_CRC: \"CAN CRC error\",\n    constants.CAN_ERROR_OTHER: \"Other (unknown) CAN error\",\n}\nCAN_STATUS_FLAGS = {\n    constants.CAN_STATUS_TXPEND: \"transmission pending\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "peekOfCode": "CAN_STATUS_FLAGS = {\n    constants.CAN_STATUS_TXPEND: \"transmission pending\",\n    constants.CAN_STATUS_OVRRUN: \"data overrun occurred\",\n    constants.CAN_STATUS_ERRLIM: \"error warning limit exceeded\",\n    constants.CAN_STATUS_BUSOFF: \"bus off\",\n    constants.CAN_STATUS_ININIT: \"init mode active\",\n    constants.CAN_STATUS_BUSCERR: \"bus coupling error\",\n}\n# ----------------------------------------------------------------------------\nclass IXXATBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.canlib_vcinpl2",
        "documentation": {}
    },
    {
        "label": "FALSE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FALSE = 0\nTRUE = 1\nINFINITE = 0xFFFFFFFF\nVCI_MAX_ERRSTRLEN = 256\n# Bitrates\nCAN_BT0_10KB = 0x31\nCAN_BT1_10KB = 0x1C\nCAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "TRUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "TRUE = 1\nINFINITE = 0xFFFFFFFF\nVCI_MAX_ERRSTRLEN = 256\n# Bitrates\nCAN_BT0_10KB = 0x31\nCAN_BT1_10KB = 0x1C\nCAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "INFINITE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "INFINITE = 0xFFFFFFFF\nVCI_MAX_ERRSTRLEN = 256\n# Bitrates\nCAN_BT0_10KB = 0x31\nCAN_BT1_10KB = 0x1C\nCAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_MAX_ERRSTRLEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_MAX_ERRSTRLEN = 256\n# Bitrates\nCAN_BT0_10KB = 0x31\nCAN_BT1_10KB = 0x1C\nCAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_10KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_10KB = 0x31\nCAN_BT1_10KB = 0x1C\nCAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_10KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_10KB = 0x1C\nCAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_20KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_20KB = 0x18\nCAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_20KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_20KB = 0x1C\nCAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_50KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_50KB = 0x09\nCAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_50KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_50KB = 0x1C\nCAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_100KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_100KB = 0x04\nCAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_100KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_100KB = 0x1C\nCAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_125KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_125KB = 0x03\nCAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_125KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_125KB = 0x1C\nCAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_250KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_250KB = 0x01\nCAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_250KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_250KB = 0x1C\nCAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_500KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_500KB = 0x00\nCAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_500KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_500KB = 0x1C\nCAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_667KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_667KB = 0x00\nCAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_667KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_667KB = 0x18\nCAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_800KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_800KB = 0x00\nCAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_800KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_800KB = 0x16\nCAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT0_1000KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT0_1000KB = 0x00\nCAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BT1_1000KB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BT1_1000KB = 0x14\n# Facilities/severities\nSEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_INFO = 0x40000000\nSEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_WARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_WARN = 0x80000000\nSEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_ERROR = 0xC0000000\nSEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_MASK = 0xC0000000\nSEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_SUCCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_SUCCESS = 0x00000000\nRESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "RESERVED_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "RESERVED_FLAG = 0x10000000\nCUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CUSTOMER_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CUSTOMER_FLAG = 0x20000000\nSTATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "STATUS_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "STATUS_MASK = 0x0000FFFF\nFACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "FACILITY_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FACILITY_MASK = 0x0FFF0000\n# Or so I hope\nFACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "FACILITY_STD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FACILITY_STD = 0\nSEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_STD_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_STD_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_STD_WARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_STD_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_STD\nSEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_STD_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_STD_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_STD\nFACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "FACILITY_VCI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FACILITY_VCI = 0x00010000\nSEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_VCI_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_VCI_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_VCI_WARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_VCI_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_VCI\nSEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_VCI_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_VCI_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_VCI\nFACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "FACILITY_DAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FACILITY_DAL = 0x00020000\nSEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_DAL_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_DAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_DAL_WARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_DAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_DAL\nSEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_DAL_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_DAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_DAL\nFACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "FACILITY_CCL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FACILITY_CCL = 0x00030000\nSEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_CCL_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_CCL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_CCL_WARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_CCL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_CCL\nSEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_CCL_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_CCL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_CCL\nFACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "FACILITY_BAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "FACILITY_BAL = 0x00040000\nSEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_BAL_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_BAL_INFO = SEV_INFO | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_BAL_WARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_BAL_WARN = SEV_WARN | CUSTOMER_FLAG | FACILITY_BAL\nSEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "SEV_BAL_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "SEV_BAL_ERROR = SEV_ERROR | CUSTOMER_FLAG | FACILITY_BAL\n# Errors\nVCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_SUCCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_SUCCESS = 0x00\nVCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_OK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_OK = 0x00\nVCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_UNEXPECTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_UNEXPECTED = SEV_VCI_ERROR | 0x0001\nVCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_NOT_IMPLEMENTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_NOT_IMPLEMENTED = SEV_VCI_ERROR | 0x0002\nVCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_OUTOFMEMORY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_OUTOFMEMORY = SEV_VCI_ERROR | 0x0003\nVCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_INVALIDARG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_INVALIDARG = SEV_VCI_ERROR | 0x0004\nVCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_NOINTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_NOINTERFACE = SEV_VCI_ERROR | 0x0005\nVCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_INVPOINTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_INVPOINTER = SEV_VCI_ERROR | 0x0006\nVCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_INVHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_INVHANDLE = SEV_VCI_ERROR | 0x0007\nVCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_ABORT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_ABORT = SEV_VCI_ERROR | 0x0008\nVCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_FAIL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_FAIL = SEV_VCI_ERROR | 0x0009\nVCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_ACCESSDENIED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_ACCESSDENIED = SEV_VCI_ERROR | 0x000A\nVCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_TIMEOUT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_TIMEOUT = SEV_VCI_ERROR | 0x000B\nVCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_BUSY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_BUSY = SEV_VCI_ERROR | 0x000C\nVCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_PENDING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_PENDING = SEV_VCI_ERROR | 0x000D\nVCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_NO_DATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_NO_DATA = SEV_VCI_ERROR | 0x000E\nVCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_NO_MORE_ITEMS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_NO_MORE_ITEMS = SEV_VCI_ERROR | 0x000F\nVCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_NOT_INITIALIZED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_NOT_INITIALIZED = SEV_VCI_ERROR | 0x0010\nVCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_ALREADY_INITIALIZED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_ALREADY_INITIALIZED = SEV_VCI_ERROR | 0x00011\nVCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_RXQUEUE_EMPTY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_RXQUEUE_EMPTY = SEV_VCI_ERROR | 0x00012\nVCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_TXQUEUE_FULL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_TXQUEUE_FULL = SEV_VCI_ERROR | 0x0013\nVCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_BUFFER_OVERFLOW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_BUFFER_OVERFLOW = SEV_VCI_ERROR | 0x0014\nVCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_INVALID_STATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_INVALID_STATE = SEV_VCI_ERROR | 0x0015\nVCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_OBJECT_ALREADY_EXISTS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_OBJECT_ALREADY_EXISTS = SEV_VCI_ERROR | 0x0016\nVCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_INVALID_INDEX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_INVALID_INDEX = SEV_VCI_ERROR | 0x0017\nVCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_END_OF_FILE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_END_OF_FILE = SEV_VCI_ERROR | 0x0018\nVCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_DISCONNECTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_DISCONNECTED = SEV_VCI_ERROR | 0x0019\nVCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCI_E_WRONG_FLASHFWVERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "VCI_E_WRONG_FLASHFWVERSION = SEV_VCI_ERROR | 0x001A\n# Controller status\nCAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_TXPEND",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_STATUS_TXPEND = 0x01  # transmission pending\nCAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_OVRRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_STATUS_OVRRUN = 0x02  # data overrun occurred\nCAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_ERRLIM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_STATUS_ERRLIM = 0x04  # error warning limit exceeded\nCAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_BUSOFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_STATUS_BUSOFF = 0x08  # bus off status\nCAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_ININIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_STATUS_ININIT = 0x10  # init mode active\nCAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_STATUS_BUSCERR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_STATUS_BUSCERR = 0x20  # bus coupling error\n# Controller operating modes\nCAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_UNDEFINED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_UNDEFINED = 0x00  # undefined\nCAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_STANDARD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_STANDARD = 0x01  # reception of 11-bit id messages\nCAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_EXTENDED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_EXTENDED = 0x02  # reception of 29-bit id messages\nCAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_ERRFRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_ERRFRAME = 0x04  # reception of error frames\nCAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_LISTONLY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_LISTONLY = 0x08  # listen only mode (TX passive)\nCAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_LOWSPEED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_LOWSPEED = 0x10  # use low speed bus interface\nCAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_OPMODE_AUTOBAUD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_OPMODE_AUTOBAUD = 0x20  # automatic bit rate detection\n# Extended operating modes\nCAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_EXMODE_DISABLED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_EXMODE_DISABLED = 0x00\nCAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_EXMODE_EXTDATALEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_EXMODE_EXTDATALEN = 0x01\nCAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_EXMODE_FASTDATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_EXMODE_FASTDATA = 0x02\nCAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_EXMODE_NONISOCANFD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_EXMODE_NONISOCANFD = 0x04\n# Message types\nCAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_DATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_DATA = 0\nCAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_INFO = 1\nCAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1\nCAN_INFO_STOP = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_ERROR = 2\nCAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1\nCAN_INFO_STOP = 2\nCAN_INFO_RESET = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_STATUS = 3\nCAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1\nCAN_INFO_STOP = 2\nCAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_WAKEUP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_WAKEUP = 4\nCAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1\nCAN_INFO_STOP = 2\nCAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_ERROR).",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_TIMEOVR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_TIMEOVR = 5\nCAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1\nCAN_INFO_STOP = 2\nCAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_ERROR).\nCAN_ERROR_STUFF = 1  # stuff error",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGTYPE_TIMERST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGTYPE_TIMERST = 6\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_INFO).\nCAN_INFO_START = 1\nCAN_INFO_STOP = 2\nCAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_ERROR).\nCAN_ERROR_STUFF = 1  # stuff error\nCAN_ERROR_FORM = 2  # form error",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_INFO_START",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_INFO_START = 1\nCAN_INFO_STOP = 2\nCAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_ERROR).\nCAN_ERROR_STUFF = 1  # stuff error\nCAN_ERROR_FORM = 2  # form error\nCAN_ERROR_ACK = 3  # acknowledgment error\nCAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_INFO_STOP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_INFO_STOP = 2\nCAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_ERROR).\nCAN_ERROR_STUFF = 1  # stuff error\nCAN_ERROR_FORM = 2  # form error\nCAN_ERROR_ACK = 3  # acknowledgment error\nCAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_INFO_RESET",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_INFO_RESET = 3\n# Information supplied in the abData[0] field of info frames\n# (CANMSGINFO.Bytes.bType = CAN_MSGTYPE_ERROR).\nCAN_ERROR_STUFF = 1  # stuff error\nCAN_ERROR_FORM = 2  # form error\nCAN_ERROR_ACK = 3  # acknowledgment error\nCAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_STUFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ERROR_STUFF = 1  # stuff error\nCAN_ERROR_FORM = 2  # form error\nCAN_ERROR_ACK = 3  # acknowledgment error\nCAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs\nCAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_FORM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ERROR_FORM = 2  # form error\nCAN_ERROR_ACK = 3  # acknowledgment error\nCAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs\nCAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_ACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ERROR_ACK = 3  # acknowledgment error\nCAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs\nCAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_BIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ERROR_BIT = 4  # bit error\nCAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs\nCAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_CRC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ERROR_CRC = 6  # CRC error\nCAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs\nCAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_OTHER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ERROR_OTHER = 7  # other (unspecified) error\n# acceptance code and mask to reject all CAN IDs\nCAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACC_MASK_NONE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACC_MASK_NONE = 0xFFFFFFFF\nCAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACC_CODE_NONE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACC_CODE_NONE = 0x80000000\n# BTMODEs\nCAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BTMODE_RAW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BTMODE_RAW = 0x00000001  # raw mode\nCAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BTMODE_TSM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BTMODE_TSM = 0x00000002  # triple sampling mode\nCAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FILTER_VOID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FILTER_VOID = 0x00  # invalid or unknown filter mode (do not use for initialization)\nCAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FILTER_LOCK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FILTER_LOCK = 0x01  # lock filter (inhibit all IDs)\nCAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FILTER_PASS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FILTER_PASS = 0x02  # bypass filter (pass all IDs)\nCAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FILTER_INCL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FILTER_INCL = 0x03  # inclusive filtering (pass registered IDs)\nCAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FILTER_EXCL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FILTER_EXCL = 0x04  # exclusive filtering (inhibit registered IDs)\n# message information flags (used by <CANMSGINFO.Bytes.bFlags>)\nCAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS_DLC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS_DLC = 0x0F  # [bit 0] data length code\nCAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS_OVR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS_OVR = 0x10  # [bit 4] data overrun flag\nCAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS_SRR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS_SRR = 0x20  # [bit 5] self reception request\nCAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS_RTR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS_RTR = 0x40  # [bit 6] remote transmission request\nCAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS_EXT = 0x80  # [bit 7] frame format (0=11-bit, 1=29-bit)\n# extended message information flags (used by <CANMSGINFO.Bytes.[bFlags2|bAddFlags]>)\nCAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS2_SSM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS2_SSM = 0x01  # [bit 0] single shot mode\nCAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS2_HPM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS2_HPM = 0x02  # [bit 1] high priority message\nCAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS2_EDL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS2_EDL = 0x04  # [bit 2] extended data length\nCAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS2_FDR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS2_FDR = 0x08  # [bit 3] fast data bit rate\nCAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS2_ESI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS2_ESI = 0x10  # [bit 4] error state indicator\nCAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_MSGFLAGS2_RES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_MSGFLAGS2_RES = 0xE0  # [bit 5..7] reserved bits\nCAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACCEPT_REJECT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACCEPT_REJECT = 0x00  # message not accepted\nCAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACCEPT_ALWAYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACCEPT_ALWAYS = 0xFF  # message always accepted\nCAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACCEPT_FILTER_1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACCEPT_FILTER_1 = 0x01  # message accepted by filter 1\nCAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACCEPT_FILTER_2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACCEPT_FILTER_2 = 0x02  # message accepted by filter 2\nCAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ACCEPT_PASSEXCL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_ACCEPT_PASSEXCL = 0x03  # message passes exclusion filter\nCAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_STDOREXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_STDOREXT = 0x00000001  # 11 OR 29 bit (exclusive)\nCAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_STDANDEXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_STDANDEXT = 0x00000002  # 11 AND 29 bit (simultaneous)\nCAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_RMTFRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_RMTFRAME = 0x00000004  # reception of remote frames\nCAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_ERRFRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_ERRFRAME = 0x00000008  # reception of error frames\nCAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_BUSLOAD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_BUSLOAD = 0x00000010  # bus load measurement\nCAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_IDFILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_IDFILTER = 0x00000020  # exact message filter\nCAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_LISTONLY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_LISTONLY = 0x00000040  # listen only mode\nCAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_SCHEDULER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_SCHEDULER = 0x00000080  # cyclic message scheduler\nCAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_GENERRFRM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_GENERRFRM = 0x00000100  # error frame generation\nCAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_DELAYEDTX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_DELAYEDTX = 0x00000200  # delayed message transmitter\nCAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_SINGLESHOT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_SINGLESHOT = 0x00000400  # single shot mode\nCAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_HIGHPRIOR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_HIGHPRIOR = 0x00000800  # high priority message\nCAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_AUTOBAUD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_AUTOBAUD = 0x00001000  # automatic bit rate detection\nCAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_EXTDATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_EXTDATA = 0x00002000  # extended data length (CANFD)\nCAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(\n        dwMode=0, dwBPS=250000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_FASTDATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_FASTDATA = 0x00004000  # fast data bit rate (CANFD)\nCAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(\n        dwMode=0, dwBPS=250000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_ISOFRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_ISOFRAME = 0x00008000  # ISO conform frame (CANFD)\nCAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(\n        dwMode=0, dwBPS=250000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%\n    500000: structures.CANBTP(",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_NONISOFRM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_NONISOFRM = (\n    0x00010000  # non ISO conform frame (CANFD) (different CRC computation)\n)\nCAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(\n        dwMode=0, dwBPS=250000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%\n    500000: structures.CANBTP(\n        dwMode=0, dwBPS=500000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FEATURE_64BITTSC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_FEATURE_64BITTSC = 0x00020000  # 64-bit time stamp counter\nCAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(\n        dwMode=0, dwBPS=250000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%\n    500000: structures.CANBTP(\n        dwMode=0, dwBPS=500000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%\n    1000000: structures.CANBTP(\n        dwMode=0, dwBPS=1000000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BITRATE_PRESETS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_BITRATE_PRESETS = {\n    250000: structures.CANBTP(\n        dwMode=0, dwBPS=250000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%\n    500000: structures.CANBTP(\n        dwMode=0, dwBPS=500000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%\n    1000000: structures.CANBTP(\n        dwMode=0, dwBPS=1000000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=0\n    ),  # SP = 80,0%",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "CAN_DATABITRATE_PRESETS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "peekOfCode": "CAN_DATABITRATE_PRESETS = {\n    500000: structures.CANBTP(\n        dwMode=0, dwBPS=500000, wTS1=6400, wTS2=1600, wSJW=1600, wTDO=6400\n    ),  # SP = 80,0%\n    833333: structures.CANBTP(\n        dwMode=0, dwBPS=833333, wTS1=1600, wTS2=400, wSJW=400, wTDO=1620\n    ),  # SP = 80,0%\n    1000000: structures.CANBTP(\n        dwMode=0, dwBPS=1000000, wTS1=1600, wTS2=400, wSJW=400, wTDO=1600\n    ),  # SP = 80,0%",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.constants",
        "documentation": {}
    },
    {
        "label": "VCITimeout",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "peekOfCode": "class VCITimeout(CanTimeoutError):\n    \"\"\"Wraps the VCI_E_TIMEOUT error\"\"\"\nclass VCIError(CanOperationError):\n    \"\"\"Try to display errors that occur within the wrapped C library nicely.\"\"\"\nclass VCIRxQueueEmptyError(VCIError):\n    \"\"\"Wraps the VCI_E_RXQUEUE_EMPTY error\"\"\"\n    def __init__(self):\n        super().__init__(\"Receive queue is empty\")\nclass VCIBusOffError(VCIError):\n    def __init__(self):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "documentation": {}
    },
    {
        "label": "VCIError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "peekOfCode": "class VCIError(CanOperationError):\n    \"\"\"Try to display errors that occur within the wrapped C library nicely.\"\"\"\nclass VCIRxQueueEmptyError(VCIError):\n    \"\"\"Wraps the VCI_E_RXQUEUE_EMPTY error\"\"\"\n    def __init__(self):\n        super().__init__(\"Receive queue is empty\")\nclass VCIBusOffError(VCIError):\n    def __init__(self):\n        super().__init__(\"Controller is in BUSOFF state\")\nclass VCIDeviceNotFoundError(CanInitializationError):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "documentation": {}
    },
    {
        "label": "VCIRxQueueEmptyError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "peekOfCode": "class VCIRxQueueEmptyError(VCIError):\n    \"\"\"Wraps the VCI_E_RXQUEUE_EMPTY error\"\"\"\n    def __init__(self):\n        super().__init__(\"Receive queue is empty\")\nclass VCIBusOffError(VCIError):\n    def __init__(self):\n        super().__init__(\"Controller is in BUSOFF state\")\nclass VCIDeviceNotFoundError(CanInitializationError):\n    pass",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "documentation": {}
    },
    {
        "label": "VCIBusOffError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "peekOfCode": "class VCIBusOffError(VCIError):\n    def __init__(self):\n        super().__init__(\"Controller is in BUSOFF state\")\nclass VCIDeviceNotFoundError(CanInitializationError):\n    pass",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "documentation": {}
    },
    {
        "label": "VCIDeviceNotFoundError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "peekOfCode": "class VCIDeviceNotFoundError(CanInitializationError):\n    pass",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "peekOfCode": "__all__ = [\n    \"VCITimeout\",\n    \"VCIError\",\n    \"VCIRxQueueEmptyError\",\n    \"VCIBusOffError\",\n    \"VCIDeviceNotFoundError\",\n]\nclass VCITimeout(CanTimeoutError):\n    \"\"\"Wraps the VCI_E_TIMEOUT error\"\"\"\nclass VCIError(CanOperationError):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.exceptions",
        "documentation": {}
    },
    {
        "label": "LUID",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class LUID(ctypes.Structure):\n    _fields_ = [(\"LowPart\", ctypes.c_uint32), (\"HighPart\", ctypes.c_int32)]\nPLUID = ctypes.POINTER(LUID)\nclass VCIID(ctypes.Union):\n    _fields_ = [(\"AsLuid\", LUID), (\"AsInt64\", ctypes.c_int64)]\nPVCIID = ctypes.POINTER(VCIID)\nclass GUID(ctypes.Structure):\n    _fields_ = [\n        (\"Data1\", ctypes.c_uint32),\n        (\"Data2\", ctypes.c_uint16),",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "VCIID",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class VCIID(ctypes.Union):\n    _fields_ = [(\"AsLuid\", LUID), (\"AsInt64\", ctypes.c_int64)]\nPVCIID = ctypes.POINTER(VCIID)\nclass GUID(ctypes.Structure):\n    _fields_ = [\n        (\"Data1\", ctypes.c_uint32),\n        (\"Data2\", ctypes.c_uint16),\n        (\"Data3\", ctypes.c_uint16),\n        (\"Data4\", ctypes.c_char * 8),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "GUID",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class GUID(ctypes.Structure):\n    _fields_ = [\n        (\"Data1\", ctypes.c_uint32),\n        (\"Data2\", ctypes.c_uint16),\n        (\"Data3\", ctypes.c_uint16),\n        (\"Data4\", ctypes.c_char * 8),\n    ]\nclass VCIDEVICEINFO(ctypes.Structure):\n    class UniqueHardwareId(ctypes.Union):\n        _fields_ = [(\"AsChar\", ctypes.c_char * 16), (\"AsGuid\", GUID)]",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "VCIDEVICEINFO",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class VCIDEVICEINFO(ctypes.Structure):\n    class UniqueHardwareId(ctypes.Union):\n        _fields_ = [(\"AsChar\", ctypes.c_char * 16), (\"AsGuid\", GUID)]\n    _fields_ = [\n        (\"VciObjectId\", VCIID),\n        (\"DeviceClass\", GUID),\n        (\"DriverMajorVersion\", ctypes.c_uint8),\n        (\"DriverMinorVersion\", ctypes.c_uint8),\n        (\"DriverBuildVersion\", ctypes.c_uint16),\n        (\"HardwareBranchVersion\", ctypes.c_uint8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANLINESTATUS",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANLINESTATUS(ctypes.Structure):\n    _fields_ = [\n        # current CAN operating mode. Value is a logical combination of\n        # one or more CAN_OPMODE_xxx constants\n        (\"bOpMode\", ctypes.c_uint8),\n        (\"bBtReg0\", ctypes.c_uint8),  # current bus timing register 0 value\n        (\"bBtReg1\", ctypes.c_uint8),  # current bus timing register 1 value\n        (\"bBusLoad\", ctypes.c_uint8),  # average bus load in percent (0..100)\n        (\"dwStatus\", ctypes.c_uint32),  # status of the CAN controller (see CAN_STATUS_)\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANCHANSTATUS",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANCHANSTATUS(ctypes.Structure):\n    _fields_ = [\n        (\"sLineStatus\", CANLINESTATUS),  # current CAN line status\n        (\"fActivated\", ctypes.c_uint32),  # TRUE if the channel is activated\n        (\"fRxOverrun\", ctypes.c_uint32),  # TRUE if receive FIFO overrun occurred\n        (\"bRxFifoLoad\", ctypes.c_uint8),  # receive FIFO load in percent (0..100)\n        (\"bTxFifoLoad\", ctypes.c_uint8),  # transmit FIFO load in percent (0..100)\n    ]\nPCANCHANSTATUS = ctypes.POINTER(CANCHANSTATUS)\nclass CANCAPABILITIES(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANCAPABILITIES",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANCAPABILITIES(ctypes.Structure):\n    _fields_ = [\n        (\"wCtrlType\", ctypes.c_uint16),\n        (\"wBusCoupling\", ctypes.c_uint16),\n        (\"dwFeatures\", ctypes.c_uint32),\n        (\"dwClockFreq\", ctypes.c_uint32),\n        (\"dwTscDivisor\", ctypes.c_uint32),\n        (\"dwCmsDivisor\", ctypes.c_uint32),\n        (\"dwCmsMaxTicks\", ctypes.c_uint32),\n        (\"dwDtxDivisor\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANMSGINFO",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANMSGINFO(ctypes.Union):\n    class Bytes(ctypes.Structure):\n        _fields_ = [\n            (\"bType\", ctypes.c_uint8),  # type (see CAN_MSGTYPE_ constants)\n            (\n                \"bAddFlags\",\n                ctypes.c_uint8,\n            ),  # extended flags (see CAN_MSGFLAGS2_ constants). AKA bFlags2 in VCI v4\n            (\"bFlags\", ctypes.c_uint8),  # flags (see CAN_MSGFLAGS_ constants)\n            (\"bAccept\", ctypes.c_uint8),  # accept code (see CAN_ACCEPT_ constants)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANMSG",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANMSG(ctypes.Structure):\n    _fields_ = [\n        (\"dwTime\", ctypes.c_uint32),\n        # CAN ID of the message in Intel format (aligned right) without RTR bit.\n        (\"dwMsgId\", ctypes.c_uint32),\n        (\"uMsgInfo\", CANMSGINFO),\n        (\"abData\", ctypes.c_uint8 * 8),\n    ]\n    def __str__(self) -> str:\n        return \"\"\"ID: 0x{:04x}{} DLC: {:02d} DATA: {}\"\"\".format(",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANCYCLICTXMSG",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANCYCLICTXMSG(ctypes.Structure):\n    _fields_ = [\n        (\"wCycleTime\", ctypes.c_uint16),\n        (\"bIncrMode\", ctypes.c_uint8),\n        (\"bByteIndex\", ctypes.c_uint8),\n        (\"dwMsgId\", ctypes.c_uint32),\n        (\"uMsgInfo\", CANMSGINFO),\n        (\"abData\", ctypes.c_uint8 * 8),\n    ]\nPCANCYCLICTXMSG = ctypes.POINTER(CANCYCLICTXMSG)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANBTP",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANBTP(ctypes.Structure):\n    _fields_ = [\n        (\"dwMode\", ctypes.c_uint32),  # timing mode (see CAN_BTMODE_ const)\n        (\"dwBPS\", ctypes.c_uint32),  # bits per second or prescaler (see CAN_BTMODE_RAW)\n        (\"wTS1\", ctypes.c_uint16),  # length of time segment 1 in quanta\n        (\"wTS2\", ctypes.c_uint16),  # length of time segment 2 in quanta\n        (\"wSJW\", ctypes.c_uint16),  # re-synchronization jump width im quanta\n        (\n            \"wTDO\",\n            ctypes.c_uint16,",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANCAPABILITIES2",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANCAPABILITIES2(ctypes.Structure):\n    _fields_ = [\n        (\"wCtrlType\", ctypes.c_uint16),  # Type of CAN controller (see CAN_CTRL_ const)\n        (\"wBusCoupling\", ctypes.c_uint16),  # Type of Bus coupling (see CAN_BUSC_ const)\n        (\n            \"dwFeatures\",\n            ctypes.c_uint32,\n        ),  # supported features (see CAN_FEATURE_ constants)\n        (\"dwCanClkFreq\", ctypes.c_uint32),  # CAN clock frequency [Hz]\n        (\"sSdrRangeMin\", CANBTP),  # minimum bit timing values for standard bit rate",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANLINESTATUS2",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANLINESTATUS2(ctypes.Structure):\n    _fields_ = [\n        (\"bOpMode\", ctypes.c_uint8),  # current CAN operating mode\n        (\"bExMode\", ctypes.c_uint8),  # current CAN extended operating mode\n        (\"bBusLoad\", ctypes.c_uint8),  # average bus load in percent (0..100)\n        (\"bReserved\", ctypes.c_uint8),  # reserved set to 0\n        (\"sBtpSdr\", ctypes.c_uint8),  # standard bit rate timing\n        (\"sBtpFdr\", ctypes.c_uint8),  # fast data bit rate timing\n        (\"dwStatus\", ctypes.c_uint32),  # status of the CAN controller (see CAN_STATUS_)\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANMSG2",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANMSG2(ctypes.Structure):\n    _fields_ = [\n        (\"dwTime\", ctypes.c_uint32),  # time stamp for receive message\n        (\"rsvd\", ctypes.c_uint32),  # reserved (set to 0)\n        (\"dwMsgId\", ctypes.c_uint32),  # CAN message identifier (INTEL format)\n        (\"uMsgInfo\", CANMSGINFO),  # message information (bit field)\n        (\"abData\", ctypes.c_uint8 * 64),  # message data\n    ]\nPCANMSG2 = ctypes.POINTER(CANMSG2)\nclass CANCYCLICTXMSG2(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANCYCLICTXMSG2",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "class CANCYCLICTXMSG2(ctypes.Structure):\n    _fields_ = [\n        (\"wCycleTime\", ctypes.c_uint16),  # cycle time for the message in ticks\n        (\n            \"bIncrMode\",\n            ctypes.c_uint8,\n        ),  # auto increment mode (see CAN_CTXMSG_INC_ const)\n        (\n            \"bByteIndex\",\n            ctypes.c_uint8,",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PLUID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PLUID = ctypes.POINTER(LUID)\nclass VCIID(ctypes.Union):\n    _fields_ = [(\"AsLuid\", LUID), (\"AsInt64\", ctypes.c_int64)]\nPVCIID = ctypes.POINTER(VCIID)\nclass GUID(ctypes.Structure):\n    _fields_ = [\n        (\"Data1\", ctypes.c_uint32),\n        (\"Data2\", ctypes.c_uint16),\n        (\"Data3\", ctypes.c_uint16),\n        (\"Data4\", ctypes.c_char * 8),",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PVCIID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PVCIID = ctypes.POINTER(VCIID)\nclass GUID(ctypes.Structure):\n    _fields_ = [\n        (\"Data1\", ctypes.c_uint32),\n        (\"Data2\", ctypes.c_uint16),\n        (\"Data3\", ctypes.c_uint16),\n        (\"Data4\", ctypes.c_char * 8),\n    ]\nclass VCIDEVICEINFO(ctypes.Structure):\n    class UniqueHardwareId(ctypes.Union):",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PVCIDEVICEINFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PVCIDEVICEINFO = ctypes.POINTER(VCIDEVICEINFO)\nclass CANLINESTATUS(ctypes.Structure):\n    _fields_ = [\n        # current CAN operating mode. Value is a logical combination of\n        # one or more CAN_OPMODE_xxx constants\n        (\"bOpMode\", ctypes.c_uint8),\n        (\"bBtReg0\", ctypes.c_uint8),  # current bus timing register 0 value\n        (\"bBtReg1\", ctypes.c_uint8),  # current bus timing register 1 value\n        (\"bBusLoad\", ctypes.c_uint8),  # average bus load in percent (0..100)\n        (\"dwStatus\", ctypes.c_uint32),  # status of the CAN controller (see CAN_STATUS_)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANLINESTATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANLINESTATUS = ctypes.POINTER(CANLINESTATUS)\nclass CANCHANSTATUS(ctypes.Structure):\n    _fields_ = [\n        (\"sLineStatus\", CANLINESTATUS),  # current CAN line status\n        (\"fActivated\", ctypes.c_uint32),  # TRUE if the channel is activated\n        (\"fRxOverrun\", ctypes.c_uint32),  # TRUE if receive FIFO overrun occurred\n        (\"bRxFifoLoad\", ctypes.c_uint8),  # receive FIFO load in percent (0..100)\n        (\"bTxFifoLoad\", ctypes.c_uint8),  # transmit FIFO load in percent (0..100)\n    ]\nPCANCHANSTATUS = ctypes.POINTER(CANCHANSTATUS)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANCHANSTATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANCHANSTATUS = ctypes.POINTER(CANCHANSTATUS)\nclass CANCAPABILITIES(ctypes.Structure):\n    _fields_ = [\n        (\"wCtrlType\", ctypes.c_uint16),\n        (\"wBusCoupling\", ctypes.c_uint16),\n        (\"dwFeatures\", ctypes.c_uint32),\n        (\"dwClockFreq\", ctypes.c_uint32),\n        (\"dwTscDivisor\", ctypes.c_uint32),\n        (\"dwCmsDivisor\", ctypes.c_uint32),\n        (\"dwCmsMaxTicks\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANCAPABILITIES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANCAPABILITIES = ctypes.POINTER(CANCAPABILITIES)\nclass CANMSGINFO(ctypes.Union):\n    class Bytes(ctypes.Structure):\n        _fields_ = [\n            (\"bType\", ctypes.c_uint8),  # type (see CAN_MSGTYPE_ constants)\n            (\n                \"bAddFlags\",\n                ctypes.c_uint8,\n            ),  # extended flags (see CAN_MSGFLAGS2_ constants). AKA bFlags2 in VCI v4\n            (\"bFlags\", ctypes.c_uint8),  # flags (see CAN_MSGFLAGS_ constants)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANMSGINFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANMSGINFO = ctypes.POINTER(CANMSGINFO)\nclass CANMSG(ctypes.Structure):\n    _fields_ = [\n        (\"dwTime\", ctypes.c_uint32),\n        # CAN ID of the message in Intel format (aligned right) without RTR bit.\n        (\"dwMsgId\", ctypes.c_uint32),\n        (\"uMsgInfo\", CANMSGINFO),\n        (\"abData\", ctypes.c_uint8 * 8),\n    ]\n    def __str__(self) -> str:",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANMSG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANMSG = ctypes.POINTER(CANMSG)\nclass CANCYCLICTXMSG(ctypes.Structure):\n    _fields_ = [\n        (\"wCycleTime\", ctypes.c_uint16),\n        (\"bIncrMode\", ctypes.c_uint8),\n        (\"bByteIndex\", ctypes.c_uint8),\n        (\"dwMsgId\", ctypes.c_uint32),\n        (\"uMsgInfo\", CANMSGINFO),\n        (\"abData\", ctypes.c_uint8 * 8),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANCYCLICTXMSG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANCYCLICTXMSG = ctypes.POINTER(CANCYCLICTXMSG)\nclass CANBTP(ctypes.Structure):\n    _fields_ = [\n        (\"dwMode\", ctypes.c_uint32),  # timing mode (see CAN_BTMODE_ const)\n        (\"dwBPS\", ctypes.c_uint32),  # bits per second or prescaler (see CAN_BTMODE_RAW)\n        (\"wTS1\", ctypes.c_uint16),  # length of time segment 1 in quanta\n        (\"wTS2\", ctypes.c_uint16),  # length of time segment 2 in quanta\n        (\"wSJW\", ctypes.c_uint16),  # re-synchronization jump width im quanta\n        (\n            \"wTDO\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANBTP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANBTP = ctypes.POINTER(CANBTP)\nclass CANCAPABILITIES2(ctypes.Structure):\n    _fields_ = [\n        (\"wCtrlType\", ctypes.c_uint16),  # Type of CAN controller (see CAN_CTRL_ const)\n        (\"wBusCoupling\", ctypes.c_uint16),  # Type of Bus coupling (see CAN_BUSC_ const)\n        (\n            \"dwFeatures\",\n            ctypes.c_uint32,\n        ),  # supported features (see CAN_FEATURE_ constants)\n        (\"dwCanClkFreq\", ctypes.c_uint32),  # CAN clock frequency [Hz]",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANCAPABILITIES2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANCAPABILITIES2 = ctypes.POINTER(CANCAPABILITIES2)\nclass CANLINESTATUS2(ctypes.Structure):\n    _fields_ = [\n        (\"bOpMode\", ctypes.c_uint8),  # current CAN operating mode\n        (\"bExMode\", ctypes.c_uint8),  # current CAN extended operating mode\n        (\"bBusLoad\", ctypes.c_uint8),  # average bus load in percent (0..100)\n        (\"bReserved\", ctypes.c_uint8),  # reserved set to 0\n        (\"sBtpSdr\", ctypes.c_uint8),  # standard bit rate timing\n        (\"sBtpFdr\", ctypes.c_uint8),  # fast data bit rate timing\n        (\"dwStatus\", ctypes.c_uint32),  # status of the CAN controller (see CAN_STATUS_)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANLINESTATUS2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANLINESTATUS2 = ctypes.POINTER(CANLINESTATUS2)\nclass CANMSG2(ctypes.Structure):\n    _fields_ = [\n        (\"dwTime\", ctypes.c_uint32),  # time stamp for receive message\n        (\"rsvd\", ctypes.c_uint32),  # reserved (set to 0)\n        (\"dwMsgId\", ctypes.c_uint32),  # CAN message identifier (INTEL format)\n        (\"uMsgInfo\", CANMSGINFO),  # message information (bit field)\n        (\"abData\", ctypes.c_uint8 * 64),  # message data\n    ]\nPCANMSG2 = ctypes.POINTER(CANMSG2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANMSG2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANMSG2 = ctypes.POINTER(CANMSG2)\nclass CANCYCLICTXMSG2(ctypes.Structure):\n    _fields_ = [\n        (\"wCycleTime\", ctypes.c_uint16),  # cycle time for the message in ticks\n        (\n            \"bIncrMode\",\n            ctypes.c_uint8,\n        ),  # auto increment mode (see CAN_CTXMSG_INC_ const)\n        (\n            \"bByteIndex\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "PCANCYCLICTXMSG2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "peekOfCode": "PCANCYCLICTXMSG2 = ctypes.POINTER(CANCYCLICTXMSG2)",
        "detail": "dbus-serialbattery.ext.can.interfaces.ixxat.structures",
        "documentation": {}
    },
    {
        "label": "CANLIBError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "class CANLIBError(CanError):\n    \"\"\"\n    Try to display errors that occur within the wrapped C library nicely.\n    \"\"\"\n    def __init__(self, function, error_code, arguments):\n        message = CANLIBError._get_error_message(error_code)\n        super().__init__(f\"Function {function.__name__} failed - {message}\", error_code)\n        self.function = function\n        self.arguments = arguments\n    @staticmethod",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "CANLIBInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "class CANLIBInitializationError(CANLIBError, CanInitializationError):\n    pass\nclass CANLIBOperationError(CANLIBError, CanOperationError):\n    pass\ndef __convert_can_status_to_int(result):\n    if isinstance(result, int):\n        return result\n    else:\n        return result.value\ndef __check_status_operation(result, function, arguments):",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "CANLIBOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "class CANLIBOperationError(CANLIBError, CanOperationError):\n    pass\ndef __convert_can_status_to_int(result):\n    if isinstance(result, int):\n        return result\n    else:\n        return result.value\ndef __check_status_operation(result, function, arguments):\n    result = __convert_can_status_to_int(result)\n    if not canstat.CANSTATUS_SUCCESS(result):",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "c_canHandle",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "class c_canHandle(ctypes.c_int):\n    pass\ncanINVALID_HANDLE = -1\ndef __check_bus_handle_validity(handle, function, arguments):\n    if handle.value > canINVALID_HANDLE:\n        return handle  # is valid\n    result = __convert_can_status_to_int(handle)\n    raise CANLIBInitializationError(function, result, arguments)\nif __canlib is not None:\n    canInitializeLibrary = __get_canlib_function(\"canInitializeLibrary\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "KvaserBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "class KvaserBus(BusABC):\n    \"\"\"\n    The CAN Bus implemented for the Kvaser interface.\n    \"\"\"\n    def __init__(\n        self,\n        channel: int,\n        can_filters: Optional[CanFilters] = None,\n        timing: Optional[Union[BitTiming, BitTimingFd]] = None,\n        **kwargs,",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "init_kvaser_library",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "def init_kvaser_library():\n    if __canlib is not None:\n        try:\n            log.debug(\"Initializing Kvaser CAN library\")\n            canInitializeLibrary()\n            log.debug(\"CAN library initialized\")\n        except Exception:\n            log.warning(\"Kvaser canlib could not be initialized.\")\nDRIVER_MODE_SILENT = False\nDRIVER_MODE_NORMAL = True",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "get_channel_info",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "def get_channel_info(channel):\n    name = ctypes.create_string_buffer(80)\n    serial = ctypes.c_uint64()\n    number = ctypes.c_uint()\n    canGetChannelData(\n        channel,\n        canstat.canCHANNELDATA_DEVDESCR_ASCII,\n        ctypes.byref(name),\n        ctypes.sizeof(name),\n    )",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "log = logging.getLogger(\"can.kvaser\")\n# Resolution in us\nTIMESTAMP_RESOLUTION = 10\nTIMESTAMP_FACTOR = TIMESTAMP_RESOLUTION / 1000000.0\ntry:\n    if sys.platform == \"win32\":\n        __canlib = ctypes.windll.LoadLibrary(\"canlib32\")\n    else:\n        __canlib = ctypes.cdll.LoadLibrary(\"libcanlib.so\")\n    log.info(\"loaded kvaser's CAN library\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_RESOLUTION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "TIMESTAMP_RESOLUTION = 10\nTIMESTAMP_FACTOR = TIMESTAMP_RESOLUTION / 1000000.0\ntry:\n    if sys.platform == \"win32\":\n        __canlib = ctypes.windll.LoadLibrary(\"canlib32\")\n    else:\n        __canlib = ctypes.cdll.LoadLibrary(\"libcanlib.so\")\n    log.info(\"loaded kvaser's CAN library\")\nexcept OSError:\n    log.warning(\"Kvaser canlib is unavailable.\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FACTOR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "TIMESTAMP_FACTOR = TIMESTAMP_RESOLUTION / 1000000.0\ntry:\n    if sys.platform == \"win32\":\n        __canlib = ctypes.windll.LoadLibrary(\"canlib32\")\n    else:\n        __canlib = ctypes.cdll.LoadLibrary(\"libcanlib.so\")\n    log.info(\"loaded kvaser's CAN library\")\nexcept OSError:\n    log.warning(\"Kvaser canlib is unavailable.\")\n    __canlib = None",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "canINVALID_HANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "canINVALID_HANDLE = -1\ndef __check_bus_handle_validity(handle, function, arguments):\n    if handle.value > canINVALID_HANDLE:\n        return handle  # is valid\n    result = __convert_can_status_to_int(handle)\n    raise CANLIBInitializationError(function, result, arguments)\nif __canlib is not None:\n    canInitializeLibrary = __get_canlib_function(\"canInitializeLibrary\")\n    canGetErrorText = __get_canlib_function(\n        \"canGetErrorText\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "DRIVER_MODE_SILENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "DRIVER_MODE_SILENT = False\nDRIVER_MODE_NORMAL = True\nBITRATE_OBJS = {\n    1000000: canstat.canBITRATE_1M,\n    500000: canstat.canBITRATE_500K,\n    250000: canstat.canBITRATE_250K,\n    125000: canstat.canBITRATE_125K,\n    100000: canstat.canBITRATE_100K,\n    83000: canstat.canBITRATE_83K,\n    62000: canstat.canBITRATE_62K,",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "DRIVER_MODE_NORMAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "DRIVER_MODE_NORMAL = True\nBITRATE_OBJS = {\n    1000000: canstat.canBITRATE_1M,\n    500000: canstat.canBITRATE_500K,\n    250000: canstat.canBITRATE_250K,\n    125000: canstat.canBITRATE_125K,\n    100000: canstat.canBITRATE_100K,\n    83000: canstat.canBITRATE_83K,\n    62000: canstat.canBITRATE_62K,\n    50000: canstat.canBITRATE_50K,",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "BITRATE_OBJS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "BITRATE_OBJS = {\n    1000000: canstat.canBITRATE_1M,\n    500000: canstat.canBITRATE_500K,\n    250000: canstat.canBITRATE_250K,\n    125000: canstat.canBITRATE_125K,\n    100000: canstat.canBITRATE_100K,\n    83000: canstat.canBITRATE_83K,\n    62000: canstat.canBITRATE_62K,\n    50000: canstat.canBITRATE_50K,\n    10000: canstat.canBITRATE_10K,",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "BITRATE_FD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "peekOfCode": "BITRATE_FD = {\n    500000: canstat.canFD_BITRATE_500K_80P,\n    1000000: canstat.canFD_BITRATE_1M_80P,\n    2000000: canstat.canFD_BITRATE_2M_80P,\n    4000000: canstat.canFD_BITRATE_4M_80P,\n    8000000: canstat.canFD_BITRATE_8M_60P,\n}\nclass KvaserBus(BusABC):\n    \"\"\"\n    The CAN Bus implemented for the Kvaser interface.",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.canlib",
        "documentation": {}
    },
    {
        "label": "c_canStatus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "class c_canStatus(ctypes.c_int):\n    pass\n# TODO better formatting\ncanOK = 0\ncanERR_PARAM = -1\ncanERR_NOMSG = -2\ncanERR_NOTFOUND = -3\ncanERR_NOMEM = -4\ncanERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "CANSTATUS_SUCCESS",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "def CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOK = 0\ncanERR_PARAM = -1\ncanERR_NOMSG = -2\ncanERR_NOTFOUND = -3\ncanERR_NOMEM = -4\ncanERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_PARAM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_PARAM = -1\ncanERR_NOMSG = -2\ncanERR_NOTFOUND = -3\ncanERR_NOMEM = -4\ncanERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOMSG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOMSG = -2\ncanERR_NOTFOUND = -3\ncanERR_NOMEM = -4\ncanERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOTFOUND",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOTFOUND = -3\ncanERR_NOMEM = -4\ncanERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOMEM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOMEM = -4\ncanERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOCHANNELS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOCHANNELS = -5\ncanERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_RESERVED_3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_RESERVED_3 = -6\ncanERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_TIMEOUT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_TIMEOUT = -7\ncanERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOTINITIALIZED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOTINITIALIZED = -8\ncanERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOHANDLES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOHANDLES = -9\ncanERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_INVHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_INVHANDLE = -10\ncanERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_INIFILE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_INIFILE = -11\ncanERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_DRIVER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_DRIVER = -12\ncanERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_TXBUFOFL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_TXBUFOFL = -13\ncanERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_RESERVED_1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_RESERVED_1 = -14\ncanERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_HARDWARE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_HARDWARE = -15\ncanERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_DYNALOAD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_DYNALOAD = -16\ncanERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_DYNALIB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_DYNALIB = -17\ncanERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_DYNAINIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_DYNAINIT = -18\ncanERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOT_SUPPORTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOT_SUPPORTED = -19\ncanERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_RESERVED_5",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_RESERVED_5 = -20\ncanERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_RESERVED_6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_RESERVED_6 = -21\ncanERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_RESERVED_2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_RESERVED_2 = -22\ncanERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_DRIVERLOAD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_DRIVERLOAD = -23\ncanERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_DRIVERFAILED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_DRIVERFAILED = -24\ncanERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOCONFIGMGR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOCONFIGMGR = -25\ncanERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOCARD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOCARD = -26\ncanERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_RESERVED_7",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_RESERVED_7 = -27\ncanERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_REGISTRY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_REGISTRY = -28\ncanERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_LICENSE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_LICENSE = -29\ncanERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_INTERNAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_INTERNAL = -30\ncanERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NO_ACCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NO_ACCESS = -31\ncanERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR_NOT_IMPLEMENTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR_NOT_IMPLEMENTED = -32\ncanERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canERR__RESERVED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canERR__RESERVED = -33\ndef CANSTATUS_SUCCESS(status):\n    return status >= canOK\ncanMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_MASK = 0x00FF\ncanMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_RTR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_RTR = 0x0001\ncanMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_STD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_STD = 0x0002\ncanMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_EXT = 0x0004\ncanMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_WAKEUP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_WAKEUP = 0x0008\ncanMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_NERR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_NERR = 0x0010\ncanMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_ERROR_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_ERROR_FRAME = 0x0020\ncanMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_TXACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_TXACK = 0x0040\ncanMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSG_TXRQ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSG_TXRQ = 0x0080\ncanFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFDMSG_FDF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFDMSG_FDF = 0x010000\ncanFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFDMSG_BRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFDMSG_BRS = 0x020000\ncanFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFDMSG_ESI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFDMSG_ESI = 0x040000\ncanMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_MASK = 0xFF00\ncanMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_HW_OVERRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_HW_OVERRUN = 0x0200\ncanMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_SW_OVERRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_SW_OVERRUN = 0x0400\ncanMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_STUFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_STUFF = 0x0800\ncanMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_FORM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_FORM = 0x1000\ncanMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_CRC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_CRC = 0x2000\ncanMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_BIT0",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_BIT0 = 0x4000\ncanMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_BIT1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_BIT1 = 0x8000\ncanMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_OVERRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_OVERRUN = 0x0600\ncanMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_BIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_BIT = 0xC000\ncanMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canMSGERR_BUSERR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canMSGERR_BUSERR = 0xF800\ncanTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_NA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_NA = 0\ncanTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_SWC_SLEEP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_SWC_SLEEP = 4\ncanTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_SWC_NORMAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_SWC_NORMAL = 5\ncanTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_SWC_FAST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_SWC_FAST = 6\ncanTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_SWC_WAKEUP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_SWC_WAKEUP = 7\ncanTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_SLEEP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_SLEEP = 8\ncanTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_NORMAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_NORMAL = 9\ncanTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_STDBY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_STDBY = 10\ncanTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_TT_CAN_H",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_TT_CAN_H = 11\ncanTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_TT_CAN_L",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_TT_CAN_L = 12\ncanTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_OEM1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_OEM1 = 13\ncanTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_OEM2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_OEM2 = 14\ncanTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_OEM3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_OEM3 = 15\ncanTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_LINEMODE_OEM4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_LINEMODE_OEM4 = 16\ncanTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_RESNET_NA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_RESNET_NA = 0\ncanTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_RESNET_MASTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_RESNET_MASTER = 1\ncanTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_RESNET_MASTER_STBY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_RESNET_MASTER_STBY = 2\ncanTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_RESNET_SLAVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_RESNET_SLAVE = 3\ncanTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_UNKNOWN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_UNKNOWN = 0\ncanTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_251",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_251 = 1\ncanTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_252",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_252 = 2\ncanTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_DNOPTO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_DNOPTO = 3\ncanTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_W210",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_W210 = 4\ncanTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_SWC_PROTO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_SWC_PROTO = 5\ncanTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_SWC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_SWC = 6\ncanTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_EVA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_EVA = 7\ncanTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_FIBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_FIBER = 8\ncanTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_K251",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_K251 = 9\ncanTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_K = 10\ncanTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_1054_OPTO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_1054_OPTO = 11\ncanTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_SWC_OPTO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_SWC_OPTO = 12\ncanTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_TT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_TT = 13\ncanTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_1050",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_1050 = 14\ncanTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_1050_OPTO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_1050_OPTO = 15\ncanTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_1041",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_1041 = 16\ncanTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_1041_OPTO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_1041_OPTO = 17\ncanTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_RS485",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_RS485 = 18\ncanTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_LIN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_LIN = 19\ncanTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_KONE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_KONE = 20\ncanTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_LINX_LIN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_LINX_LIN = 64\ncanTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",\n    canTRANSCEIVER_TYPE_DNOPTO: \"Optoisolated 82C251\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_LINX_J1708",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_LINX_J1708 = 66\ncanTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",\n    canTRANSCEIVER_TYPE_DNOPTO: \"Optoisolated 82C251\",\n    canTRANSCEIVER_TYPE_W210: \"W210\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_LINX_K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_LINX_K = 68\ncanTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",\n    canTRANSCEIVER_TYPE_DNOPTO: \"Optoisolated 82C251\",\n    canTRANSCEIVER_TYPE_W210: \"W210\",\n    canTRANSCEIVER_TYPE_SWC_PROTO: \"AU5790 prototype\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_LINX_SWC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_LINX_SWC = 70\ncanTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",\n    canTRANSCEIVER_TYPE_DNOPTO: \"Optoisolated 82C251\",\n    canTRANSCEIVER_TYPE_W210: \"W210\",\n    canTRANSCEIVER_TYPE_SWC_PROTO: \"AU5790 prototype\",\n    canTRANSCEIVER_TYPE_SWC: \"AU5790\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTRANSCEIVER_TYPE_LINX_LS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTRANSCEIVER_TYPE_LINX_LS = 72\ncanTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",\n    canTRANSCEIVER_TYPE_DNOPTO: \"Optoisolated 82C251\",\n    canTRANSCEIVER_TYPE_W210: \"W210\",\n    canTRANSCEIVER_TYPE_SWC_PROTO: \"AU5790 prototype\",\n    canTRANSCEIVER_TYPE_SWC: \"AU5790\",\n    canTRANSCEIVER_TYPE_EVA: \"EVA\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canTransceiverTypeStrings",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canTransceiverTypeStrings = {\n    canTRANSCEIVER_TYPE_UNKNOWN: \"unknown\",\n    canTRANSCEIVER_TYPE_251: \"82C251\",\n    canTRANSCEIVER_TYPE_252: \"82C252/TJA1053/TJA1054\",\n    canTRANSCEIVER_TYPE_DNOPTO: \"Optoisolated 82C251\",\n    canTRANSCEIVER_TYPE_W210: \"W210\",\n    canTRANSCEIVER_TYPE_SWC_PROTO: \"AU5790 prototype\",\n    canTRANSCEIVER_TYPE_SWC: \"AU5790\",\n    canTRANSCEIVER_TYPE_EVA: \"EVA\",\n    canTRANSCEIVER_TYPE_FIBER: \"82C251 with fibre extension\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canDRIVER_NORMAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canDRIVER_NORMAL = 4\ncanDRIVER_SILENT = 1\ncanDRIVER_SELFRECEPTION = 8\ncanDRIVER_OFF = 0\ncanOPEN_EXCLUSIVE = 0x0008\ncanOPEN_REQUIRE_EXTENDED = 0x0010\ncanOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canDRIVER_SILENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canDRIVER_SILENT = 1\ncanDRIVER_SELFRECEPTION = 8\ncanDRIVER_OFF = 0\ncanOPEN_EXCLUSIVE = 0x0008\ncanOPEN_REQUIRE_EXTENDED = 0x0010\ncanOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canDRIVER_SELFRECEPTION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canDRIVER_SELFRECEPTION = 8\ncanDRIVER_OFF = 0\ncanOPEN_EXCLUSIVE = 0x0008\ncanOPEN_REQUIRE_EXTENDED = 0x0010\ncanOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canDRIVER_OFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canDRIVER_OFF = 0\ncanOPEN_EXCLUSIVE = 0x0008\ncanOPEN_REQUIRE_EXTENDED = 0x0010\ncanOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_EXCLUSIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_EXCLUSIVE = 0x0008\ncanOPEN_REQUIRE_EXTENDED = 0x0010\ncanOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_REQUIRE_EXTENDED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_REQUIRE_EXTENDED = 0x0010\ncanOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_ACCEPT_VIRTUAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_ACCEPT_VIRTUAL = 0x0020\ncanOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_OVERRIDE_EXCLUSIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_OVERRIDE_EXCLUSIVE = 0x0040\ncanOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_REQUIRE_INIT_ACCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_REQUIRE_INIT_ACCESS = 0x0080\ncanOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_NO_INIT_ACCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_NO_INIT_ACCESS = 0x0100\ncanOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_ACCEPT_LARGE_DLC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_ACCEPT_LARGE_DLC = 0x0200\ncanOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_CAN_FD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_CAN_FD = 0x0400\ncanOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canOPEN_CAN_FD_NONISO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canOPEN_CAN_FD_NONISO = 0x0800\ncanIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_RX_BUFFER_LEVEL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_RX_BUFFER_LEVEL = 8\ncanIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_TX_BUFFER_LEVEL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_TX_BUFFER_LEVEL = 9\ncanIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_FLUSH_RX_BUFFER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_FLUSH_RX_BUFFER = 10\ncanIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_FLUSH_TX_BUFFER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_FLUSH_TX_BUFFER = 11\ncanIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_TIMER_SCALE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_TIMER_SCALE = 12\ncanIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_TXRQ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_TXRQ = 13\ncanIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_EVENTHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_EVENTHANDLE = 14\ncanIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_BYPASS_MODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_BYPASS_MODE = 15\ncanIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_WAKEUP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_WAKEUP = 16\ncanIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_DRIVERHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_DRIVERHANDLE = 17\ncanIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_MAP_RXQUEUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_MAP_RXQUEUE = 18\ncanIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_WAKEUP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_WAKEUP = 19\ncanIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_REPORT_ACCESS_ERRORS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_REPORT_ACCESS_ERRORS = 20\ncanIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_REPORT_ACCESS_ERRORS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_REPORT_ACCESS_ERRORS = 21\ncanIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_CONNECT_TO_VIRTUAL_BUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_CONNECT_TO_VIRTUAL_BUS = 22\ncanIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_DISCONNECT_FROM_VIRTUAL_BUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_DISCONNECT_FROM_VIRTUAL_BUS = 23\ncanIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_USER_IOPORT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_USER_IOPORT = 24\ncanIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_USER_IOPORT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_USER_IOPORT = 25\ncanIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_BUFFER_WRAPAROUND_MODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_BUFFER_WRAPAROUND_MODE = 26\ncanIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_RX_QUEUE_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_RX_QUEUE_SIZE = 27\ncanIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_USB_THROTTLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_USB_THROTTLE = 28\ncanIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_GET_USB_THROTTLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_GET_USB_THROTTLE = 29\ncanIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_BUSON_TIME_AUTO_RESET",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_BUSON_TIME_AUTO_RESET = 30\ncanIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_LOCAL_TXECHO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_LOCAL_TXECHO = 32\ncanIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_PREFER_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_PREFER_EXT = 1\ncanIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_PREFER_STD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_PREFER_STD = 2\ncanIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_CLEAR_ERROR_COUNTERS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_CLEAR_ERROR_COUNTERS = 5\ncanIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_TIMER_SCALE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_TIMER_SCALE = 6\ncanIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canIOCTL_SET_TXACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canIOCTL_SET_TXACK = 7\ncanCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CHANNEL_CAP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CHANNEL_CAP = 1\ncanCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_TRANS_CAP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_TRANS_CAP = 2\ncanCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CHANNEL_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CHANNEL_FLAGS = 3\ncanCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CARD_TYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CARD_TYPE = 4\ncanCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CARD_NUMBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CARD_NUMBER = 5\ncanCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CHAN_NO_ON_CARD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CHAN_NO_ON_CARD = 6\ncanCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CARD_SERIAL_NO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CARD_SERIAL_NO = 7\ncanCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_TRANS_SERIAL_NO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_TRANS_SERIAL_NO = 8\ncanCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CARD_FIRMWARE_REV",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CARD_FIRMWARE_REV = 9\ncanCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CARD_HARDWARE_REV",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CARD_HARDWARE_REV = 10\ncanCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CARD_UPC_NO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CARD_UPC_NO = 11\ncanCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_TRANS_UPC_NO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_TRANS_UPC_NO = 12\ncanCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_CHANNEL_NAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_CHANNEL_NAME = 13\ncanCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DLL_FILE_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DLL_FILE_VERSION = 14\ncanCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DLL_PRODUCT_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DLL_PRODUCT_VERSION = 15\ncanCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DLL_FILETYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DLL_FILETYPE = 16\ncanCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_TRANS_TYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_TRANS_TYPE = 17\ncanCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DEVICE_PHYSICAL_POSITION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DEVICE_PHYSICAL_POSITION = 18\ncanCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_UI_NUMBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_UI_NUMBER = 19\ncanCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_TIMESYNC_ENABLED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_TIMESYNC_ENABLED = 20\ncanCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DRIVER_FILE_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DRIVER_FILE_VERSION = 21\ncanCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DRIVER_PRODUCT_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DRIVER_PRODUCT_VERSION = 22\ncanCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_MFGNAME_UNICODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_MFGNAME_UNICODE = 23\ncanCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_MFGNAME_ASCII",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_MFGNAME_ASCII = 24\ncanCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DEVDESCR_UNICODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DEVDESCR_UNICODE = 25\ncanCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DEVDESCR_ASCII",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DEVDESCR_ASCII = 26\ncanCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canCHANNELDATA_DRIVER_NAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canCHANNELDATA_DRIVER_NAME = 27\nkvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "kvLED_ACTION_ALL_LEDS_ON",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "kvLED_ACTION_ALL_LEDS_ON = 0\nkvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "kvLED_ACTION_ALL_LEDS_OFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "kvLED_ACTION_ALL_LEDS_OFF = 1\ncanBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_1M",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_1M = -1\ncanBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_500K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_500K = -2\ncanBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_250K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_250K = -3\ncanBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_125K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_125K = -4\ncanBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_100K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_100K = -5\ncanBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_62K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_62K = -6\ncanBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_50K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_50K = -7\ncanBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_83K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_83K = -8\ncanBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canBITRATE_10K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canBITRATE_10K = -9\ncanFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFD_BITRATE_500K_80P",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFD_BITRATE_500K_80P = -1000\ncanFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFD_BITRATE_1M_80P",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFD_BITRATE_1M_80P = -1001\ncanFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFD_BITRATE_2M_80P",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFD_BITRATE_2M_80P = -1002\ncanFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFD_BITRATE_4M_80P",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFD_BITRATE_4M_80P = -1003\ncanFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "canFD_BITRATE_8M_60P",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "peekOfCode": "canFD_BITRATE_8M_60P = -1004",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.constants",
        "documentation": {}
    },
    {
        "label": "BusStatistics",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.kvaser.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.kvaser.structures",
        "peekOfCode": "class BusStatistics(ctypes.Structure):\n    \"\"\"This structure is used with the method\n    :meth:`~can.interfaces.kvaser.canlib.KvaserBus.get_stats`.\n    \"\"\"\n    _fields_ = [\n        (\"m_stdData\", ctypes.c_ulong),\n        (\"m_stdRemote\", ctypes.c_ulong),\n        (\"m_extData\", ctypes.c_ulong),\n        (\"m_extRemote\", ctypes.c_ulong),\n        (\"m_errFrame\", ctypes.c_ulong),",
        "detail": "dbus-serialbattery.ext.can.interfaces.kvaser.structures",
        "documentation": {}
    },
    {
        "label": "NeousysCanSetup",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "class NeousysCanSetup(Structure):\n    \"\"\"C CAN Setup struct\"\"\"\n    _fields_ = [\n        (\"bitRate\", c_uint),\n        (\"recvConfig\", c_uint),\n        (\"recvId\", c_uint),\n        (\"recvMask\", c_uint),\n    ]\nclass NeousysCanMsg(Structure):\n    \"\"\"C CAN Message struct\"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NeousysCanMsg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "class NeousysCanMsg(Structure):\n    \"\"\"C CAN Message struct\"\"\"\n    _fields_ = [\n        (\"id\", c_uint),\n        (\"flags\", c_ushort),\n        (\"extra\", c_ubyte),\n        (\"len\", c_ubyte),\n        (\"data\", c_ubyte * 8),\n    ]\n# valid:2~16, sum of the Synchronization, Propagation, and",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NeousysCanBitClk",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "class NeousysCanBitClk(Structure):\n    \"\"\"C CAN BIT Clock struct\"\"\"\n    _fields_ = [\n        (\"syncPropPhase1Seg\", c_ushort),\n        (\"phase2Seg\", c_ushort),\n        (\"jumpWidth\", c_ushort),\n        (\"quantumPrescaler\", c_ushort),\n    ]\nNEOUSYS_CAN_MSG_CALLBACK = CFUNCTYPE(None, POINTER(NeousysCanMsg), c_uint)\nNEOUSYS_CAN_STATUS_CALLBACK = CFUNCTYPE(None, c_uint)",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NeousysBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "class NeousysBus(BusABC):\n    \"\"\"Neousys CAN bus Class\"\"\"\n    def __init__(self, channel, device=0, bitrate=500000, **kwargs):\n        \"\"\"\n        :param channel: channel number\n        :param device: device number\n        :param bitrate: bit rate.\n        \"\"\"\n        super().__init__(channel, **kwargs)\n        if NEOUSYS_CANLIB is None:",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass NeousysCanSetup(Structure):\n    \"\"\"C CAN Setup struct\"\"\"\n    _fields_ = [\n        (\"bitRate\", c_uint),\n        (\"recvConfig\", c_uint),\n        (\"recvId\", c_uint),\n        (\"recvMask\", c_uint),\n    ]\nclass NeousysCanMsg(Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_CALLBACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_CALLBACK = CFUNCTYPE(None, POINTER(NeousysCanMsg), c_uint)\nNEOUSYS_CAN_STATUS_CALLBACK = CFUNCTYPE(None, c_uint)\nNEOUSYS_CAN_MSG_EXTENDED_ID = 0x0004\nNEOUSYS_CAN_MSG_REMOTE_FRAME = 0x0040\nNEOUSYS_CAN_MSG_DATA_NEW = 0x0080\nNEOUSYS_CAN_MSG_DATA_LOST = 0x0100\nNEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_CALLBACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_CALLBACK = CFUNCTYPE(None, c_uint)\nNEOUSYS_CAN_MSG_EXTENDED_ID = 0x0004\nNEOUSYS_CAN_MSG_REMOTE_FRAME = 0x0040\nNEOUSYS_CAN_MSG_DATA_NEW = 0x0080\nNEOUSYS_CAN_MSG_DATA_LOST = 0x0100\nNEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_EXTENDED_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_EXTENDED_ID = 0x0004\nNEOUSYS_CAN_MSG_REMOTE_FRAME = 0x0040\nNEOUSYS_CAN_MSG_DATA_NEW = 0x0080\nNEOUSYS_CAN_MSG_DATA_LOST = 0x0100\nNEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_REMOTE_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_REMOTE_FRAME = 0x0040\nNEOUSYS_CAN_MSG_DATA_NEW = 0x0080\nNEOUSYS_CAN_MSG_DATA_LOST = 0x0100\nNEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # filters on only extended identifiers",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_DATA_NEW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_DATA_NEW = 0x0080\nNEOUSYS_CAN_MSG_DATA_LOST = 0x0100\nNEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # filters on only extended identifiers\nNEOUSYS_CAN_STATUS_BUS_OFF = 0x00000080",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_DATA_LOST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_DATA_LOST = 0x0100\nNEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # filters on only extended identifiers\nNEOUSYS_CAN_STATUS_BUS_OFF = 0x00000080\nNEOUSYS_CAN_STATUS_EWARN = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_USE_ID_FILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_USE_ID_FILTER = 0x00000008\nNEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # filters on only extended identifiers\nNEOUSYS_CAN_STATUS_BUS_OFF = 0x00000080\nNEOUSYS_CAN_STATUS_EWARN = (\n    0x00000040  # can controller error level has reached warning level.",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_USE_DIR_FILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_USE_DIR_FILTER = (\n    0x00000010 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # only accept the direction specified in the message type\nNEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # filters on only extended identifiers\nNEOUSYS_CAN_STATUS_BUS_OFF = 0x00000080\nNEOUSYS_CAN_STATUS_EWARN = (\n    0x00000040  # can controller error level has reached warning level.\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_MSG_USE_EXT_FILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_MSG_USE_EXT_FILTER = (\n    0x00000020 | NEOUSYS_CAN_MSG_USE_ID_FILTER\n)  # filters on only extended identifiers\nNEOUSYS_CAN_STATUS_BUS_OFF = 0x00000080\nNEOUSYS_CAN_STATUS_EWARN = (\n    0x00000040  # can controller error level has reached warning level.\n)\nNEOUSYS_CAN_STATUS_EPASS = (\n    0x00000020  # can controller error level has reached error passive level.\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_BUS_OFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_BUS_OFF = 0x00000080\nNEOUSYS_CAN_STATUS_EWARN = (\n    0x00000040  # can controller error level has reached warning level.\n)\nNEOUSYS_CAN_STATUS_EPASS = (\n    0x00000020  # can controller error level has reached error passive level.\n)\nNEOUSYS_CAN_STATUS_LEC_STUFF = 0x00000001  # a bit stuffing error has occurred.\nNEOUSYS_CAN_STATUS_LEC_FORM = 0x00000002  # a formatting error has occurred.\nNEOUSYS_CAN_STATUS_LEC_ACK = 0x00000003  # an acknowledge error has occurred.",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_EWARN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_EWARN = (\n    0x00000040  # can controller error level has reached warning level.\n)\nNEOUSYS_CAN_STATUS_EPASS = (\n    0x00000020  # can controller error level has reached error passive level.\n)\nNEOUSYS_CAN_STATUS_LEC_STUFF = 0x00000001  # a bit stuffing error has occurred.\nNEOUSYS_CAN_STATUS_LEC_FORM = 0x00000002  # a formatting error has occurred.\nNEOUSYS_CAN_STATUS_LEC_ACK = 0x00000003  # an acknowledge error has occurred.\nNEOUSYS_CAN_STATUS_LEC_BIT1 = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_EPASS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_EPASS = (\n    0x00000020  # can controller error level has reached error passive level.\n)\nNEOUSYS_CAN_STATUS_LEC_STUFF = 0x00000001  # a bit stuffing error has occurred.\nNEOUSYS_CAN_STATUS_LEC_FORM = 0x00000002  # a formatting error has occurred.\nNEOUSYS_CAN_STATUS_LEC_ACK = 0x00000003  # an acknowledge error has occurred.\nNEOUSYS_CAN_STATUS_LEC_BIT1 = (\n    0x00000004  # the bus remained a bit level of 1 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_BIT0 = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_STUFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_STUFF = 0x00000001  # a bit stuffing error has occurred.\nNEOUSYS_CAN_STATUS_LEC_FORM = 0x00000002  # a formatting error has occurred.\nNEOUSYS_CAN_STATUS_LEC_ACK = 0x00000003  # an acknowledge error has occurred.\nNEOUSYS_CAN_STATUS_LEC_BIT1 = (\n    0x00000004  # the bus remained a bit level of 1 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_BIT0 = (\n    0x00000005  # the bus remained a bit level of 0 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_CRC = 0x00000006  # a crc error has occurred.",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_FORM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_FORM = 0x00000002  # a formatting error has occurred.\nNEOUSYS_CAN_STATUS_LEC_ACK = 0x00000003  # an acknowledge error has occurred.\nNEOUSYS_CAN_STATUS_LEC_BIT1 = (\n    0x00000004  # the bus remained a bit level of 1 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_BIT0 = (\n    0x00000005  # the bus remained a bit level of 0 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_CRC = 0x00000006  # a crc error has occurred.\nNEOUSYS_CAN_STATUS_LEC_MASK = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_ACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_ACK = 0x00000003  # an acknowledge error has occurred.\nNEOUSYS_CAN_STATUS_LEC_BIT1 = (\n    0x00000004  # the bus remained a bit level of 1 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_BIT0 = (\n    0x00000005  # the bus remained a bit level of 0 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_CRC = 0x00000006  # a crc error has occurred.\nNEOUSYS_CAN_STATUS_LEC_MASK = (\n    0x00000007  # this is the mask for the can last error code (lec).",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_BIT1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_BIT1 = (\n    0x00000004  # the bus remained a bit level of 1 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_BIT0 = (\n    0x00000005  # the bus remained a bit level of 0 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_CRC = 0x00000006  # a crc error has occurred.\nNEOUSYS_CAN_STATUS_LEC_MASK = (\n    0x00000007  # this is the mask for the can last error code (lec).\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_BIT0",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_BIT0 = (\n    0x00000005  # the bus remained a bit level of 0 for longer than is allowed.\n)\nNEOUSYS_CAN_STATUS_LEC_CRC = 0x00000006  # a crc error has occurred.\nNEOUSYS_CAN_STATUS_LEC_MASK = (\n    0x00000007  # this is the mask for the can last error code (lec).\n)\nNEOUSYS_CANLIB = None\ntry:\n    if platform.system() == \"Windows\":",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_CRC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_CRC = 0x00000006  # a crc error has occurred.\nNEOUSYS_CAN_STATUS_LEC_MASK = (\n    0x00000007  # this is the mask for the can last error code (lec).\n)\nNEOUSYS_CANLIB = None\ntry:\n    if platform.system() == \"Windows\":\n        NEOUSYS_CANLIB = WinDLL(\"./WDT_DIO.dll\")\n    else:\n        NEOUSYS_CANLIB = CDLL(\"libwdt_dio.so\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CAN_STATUS_LEC_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CAN_STATUS_LEC_MASK = (\n    0x00000007  # this is the mask for the can last error code (lec).\n)\nNEOUSYS_CANLIB = None\ntry:\n    if platform.system() == \"Windows\":\n        NEOUSYS_CANLIB = WinDLL(\"./WDT_DIO.dll\")\n    else:\n        NEOUSYS_CANLIB = CDLL(\"libwdt_dio.so\")\n    logger.info(\"Loaded Neousys WDT_DIO Can driver\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "NEOUSYS_CANLIB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "description": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "peekOfCode": "NEOUSYS_CANLIB = None\ntry:\n    if platform.system() == \"Windows\":\n        NEOUSYS_CANLIB = WinDLL(\"./WDT_DIO.dll\")\n    else:\n        NEOUSYS_CANLIB = CDLL(\"libwdt_dio.so\")\n    logger.info(\"Loaded Neousys WDT_DIO Can driver\")\nexcept OSError as error:\n    logger.info(\"Cannot load Neousys CAN bus dll or shared object: %s\", error)\nclass NeousysBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.neousys.neousys",
        "documentation": {}
    },
    {
        "label": "TPCANMsg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "class TPCANMsg(Structure):\n    \"\"\"\n    Represents a PCAN message\n    \"\"\"\n    _fields_ = [\n        (\"ID\", c_uint),  # 11/29-bit message identifier\n        (\"MSGTYPE\", TPCANMessageType),  # Type of the message\n        (\"LEN\", c_ubyte),  # Data Length Code of the message (0..8)\n        (\"DATA\", c_ubyte * 8),\n    ]  # Data of the message (DATA[0]..DATA[7])",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANTimestamp",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "class TPCANTimestamp(Structure):\n    \"\"\"\n    Represents a timestamp of a received PCAN message\n    Total Microseconds = micros + 1000 * millis + 0x100000000 * 1000 * millis_overflow\n    \"\"\"\n    _fields_ = [\n        (\"millis\", c_uint),  # Base-value: milliseconds: 0.. 2^32-1\n        (\"millis_overflow\", c_ushort),  # Roll-arounds of millis\n        (\"micros\", c_ushort),\n    ]  # Microseconds: 0..999",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANMsgFD",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "class TPCANMsgFD(Structure):\n    \"\"\"\n    Represents a PCAN message\n    \"\"\"\n    _fields_ = [\n        (\"ID\", c_uint),  # 11/29-bit message identifier\n        (\"MSGTYPE\", TPCANMessageType),  # Type of the message\n        (\"DLC\", c_ubyte),  # Data Length Code of the message (0..15)\n        (\"DATA\", c_ubyte * 64),\n    ]  # Data of the message (DATA[0]..DATA[63])",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANChannelInformation",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "class TPCANChannelInformation(Structure):\n    \"\"\"\n    Describes an available PCAN channel\n    \"\"\"\n    _fields_ = [\n        (\"channel_handle\", TPCANHandle),  # PCAN channel handle\n        (\"device_type\", TPCANDevice),  # Kind of PCAN device\n        (\"controller_number\", c_ubyte),  # CAN-Controller number\n        (\"device_features\", c_uint),  # Device capabilities flag (see FEATURE_*)\n        (\"device_name\", c_char * MAX_LENGTH_HARDWARE_NAME),  # Device name",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCANBasic",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "class PCANBasic:\n    \"\"\"PCAN-Basic API class implementation\"\"\"\n    def __init__(self):\n        if platform.system() == \"Windows\":\n            load_library_func = windll.LoadLibrary\n        else:\n            load_library_func = cdll.LoadLibrary\n        if platform.system() == \"Windows\" or \"CYGWIN\" in platform.system():\n            lib_name = \"PCANBasic\"\n        elif platform.system() == \"Darwin\":",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PLATFORM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PLATFORM = platform.system()\nIS_WINDOWS = PLATFORM == \"Windows\"\nIS_LINUX = PLATFORM == \"Linux\"\nlogger = logging.getLogger(\"can.pcan\")\n# ///////////////////////////////////////////////////////////\n# Type definitions\n# ///////////////////////////////////////////////////////////\nTPCANHandle = c_ushort  # Represents a PCAN hardware channel handle\nTPCANStatus = int  # Represents a PCAN status/error code\nTPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "IS_WINDOWS = PLATFORM == \"Windows\"\nIS_LINUX = PLATFORM == \"Linux\"\nlogger = logging.getLogger(\"can.pcan\")\n# ///////////////////////////////////////////////////////////\n# Type definitions\n# ///////////////////////////////////////////////////////////\nTPCANHandle = c_ushort  # Represents a PCAN hardware channel handle\nTPCANStatus = int  # Represents a PCAN status/error code\nTPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set\nTPCANDevice = c_ubyte  # Represents a PCAN device",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "IS_LINUX = PLATFORM == \"Linux\"\nlogger = logging.getLogger(\"can.pcan\")\n# ///////////////////////////////////////////////////////////\n# Type definitions\n# ///////////////////////////////////////////////////////////\nTPCANHandle = c_ushort  # Represents a PCAN hardware channel handle\nTPCANStatus = int  # Represents a PCAN status/error code\nTPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set\nTPCANDevice = c_ubyte  # Represents a PCAN device\nTPCANMessageType = c_ubyte  # Represents the type of a PCAN message",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "logger = logging.getLogger(\"can.pcan\")\n# ///////////////////////////////////////////////////////////\n# Type definitions\n# ///////////////////////////////////////////////////////////\nTPCANHandle = c_ushort  # Represents a PCAN hardware channel handle\nTPCANStatus = int  # Represents a PCAN status/error code\nTPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set\nTPCANDevice = c_ubyte  # Represents a PCAN device\nTPCANMessageType = c_ubyte  # Represents the type of a PCAN message\nTPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANHandle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANHandle = c_ushort  # Represents a PCAN hardware channel handle\nTPCANStatus = int  # Represents a PCAN status/error code\nTPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set\nTPCANDevice = c_ubyte  # Represents a PCAN device\nTPCANMessageType = c_ubyte  # Represents the type of a PCAN message\nTPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized\nTPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANStatus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANStatus = int  # Represents a PCAN status/error code\nTPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set\nTPCANDevice = c_ubyte  # Represents a PCAN device\nTPCANMessageType = c_ubyte  # Represents the type of a PCAN message\nTPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized\nTPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANParameter",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANParameter = c_ubyte  # Represents a PCAN parameter to be read or set\nTPCANDevice = c_ubyte  # Represents a PCAN device\nTPCANMessageType = c_ubyte  # Represents the type of a PCAN message\nTPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized\nTPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANDevice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANDevice = c_ubyte  # Represents a PCAN device\nTPCANMessageType = c_ubyte  # Represents the type of a PCAN message\nTPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized\nTPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANMessageType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANMessageType = c_ubyte  # Represents the type of a PCAN message\nTPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized\nTPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////\n# Currently defined and supported PCAN channels",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANType = c_ubyte  # Represents the type of PCAN hardware to be initialized\nTPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////\n# Currently defined and supported PCAN channels\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANMode = c_ubyte  # Represents a PCAN filter mode\nTPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////\n# Currently defined and supported PCAN channels\n#\nPCAN_NONEBUS = TPCANHandle(0x00)  # Undefined/default value for a PCAN bus",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANBaudrate",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANBaudrate = c_ushort  # Represents a PCAN Baud rate register value\nTPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////\n# Currently defined and supported PCAN channels\n#\nPCAN_NONEBUS = TPCANHandle(0x00)  # Undefined/default value for a PCAN bus\nPCAN_ISABUS1 = TPCANHandle(0x21)  # PCAN-ISA interface, channel 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANBitrateFD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANBitrateFD = c_char_p  # Represents a PCAN-FD bit rate string\nTPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////\n# Currently defined and supported PCAN channels\n#\nPCAN_NONEBUS = TPCANHandle(0x00)  # Undefined/default value for a PCAN bus\nPCAN_ISABUS1 = TPCANHandle(0x21)  # PCAN-ISA interface, channel 1\nPCAN_ISABUS2 = TPCANHandle(0x22)  # PCAN-ISA interface, channel 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TPCANTimestampFD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TPCANTimestampFD = c_ulonglong  # Represents a timestamp of a received PCAN FD message\n# ///////////////////////////////////////////////////////////\n# Value definitions\n# ///////////////////////////////////////////////////////////\n# Currently defined and supported PCAN channels\n#\nPCAN_NONEBUS = TPCANHandle(0x00)  # Undefined/default value for a PCAN bus\nPCAN_ISABUS1 = TPCANHandle(0x21)  # PCAN-ISA interface, channel 1\nPCAN_ISABUS2 = TPCANHandle(0x22)  # PCAN-ISA interface, channel 2\nPCAN_ISABUS3 = TPCANHandle(0x23)  # PCAN-ISA interface, channel 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_NONEBUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_NONEBUS = TPCANHandle(0x00)  # Undefined/default value for a PCAN bus\nPCAN_ISABUS1 = TPCANHandle(0x21)  # PCAN-ISA interface, channel 1\nPCAN_ISABUS2 = TPCANHandle(0x22)  # PCAN-ISA interface, channel 2\nPCAN_ISABUS3 = TPCANHandle(0x23)  # PCAN-ISA interface, channel 3\nPCAN_ISABUS4 = TPCANHandle(0x24)  # PCAN-ISA interface, channel 4\nPCAN_ISABUS5 = TPCANHandle(0x25)  # PCAN-ISA interface, channel 5\nPCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS1 = TPCANHandle(0x21)  # PCAN-ISA interface, channel 1\nPCAN_ISABUS2 = TPCANHandle(0x22)  # PCAN-ISA interface, channel 2\nPCAN_ISABUS3 = TPCANHandle(0x23)  # PCAN-ISA interface, channel 3\nPCAN_ISABUS4 = TPCANHandle(0x24)  # PCAN-ISA interface, channel 4\nPCAN_ISABUS5 = TPCANHandle(0x25)  # PCAN-ISA interface, channel 5\nPCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS2 = TPCANHandle(0x22)  # PCAN-ISA interface, channel 2\nPCAN_ISABUS3 = TPCANHandle(0x23)  # PCAN-ISA interface, channel 3\nPCAN_ISABUS4 = TPCANHandle(0x24)  # PCAN-ISA interface, channel 4\nPCAN_ISABUS5 = TPCANHandle(0x25)  # PCAN-ISA interface, channel 5\nPCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS3 = TPCANHandle(0x23)  # PCAN-ISA interface, channel 3\nPCAN_ISABUS4 = TPCANHandle(0x24)  # PCAN-ISA interface, channel 4\nPCAN_ISABUS5 = TPCANHandle(0x25)  # PCAN-ISA interface, channel 5\nPCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS4 = TPCANHandle(0x24)  # PCAN-ISA interface, channel 4\nPCAN_ISABUS5 = TPCANHandle(0x25)  # PCAN-ISA interface, channel 5\nPCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS5",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS5 = TPCANHandle(0x25)  # PCAN-ISA interface, channel 5\nPCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS6 = TPCANHandle(0x26)  # PCAN-ISA interface, channel 6\nPCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS7",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS7 = TPCANHandle(0x27)  # PCAN-ISA interface, channel 7\nPCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISABUS8",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISABUS8 = TPCANHandle(0x28)  # PCAN-ISA interface, channel 8\nPCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_DNGBUS1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_DNGBUS1 = TPCANHandle(0x31)  # PCAN-Dongle/LPT interface, channel 1\nPCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS1 = TPCANHandle(0x41)  # PCAN-PCI interface, channel 1\nPCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS2 = TPCANHandle(0x42)  # PCAN-PCI interface, channel 2\nPCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS3 = TPCANHandle(0x43)  # PCAN-PCI interface, channel 3\nPCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS4 = TPCANHandle(0x44)  # PCAN-PCI interface, channel 4\nPCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS5",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS5 = TPCANHandle(0x45)  # PCAN-PCI interface, channel 5\nPCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS6 = TPCANHandle(0x46)  # PCAN-PCI interface, channel 6\nPCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS7",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS7 = TPCANHandle(0x47)  # PCAN-PCI interface, channel 7\nPCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS8",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS8 = TPCANHandle(0x48)  # PCAN-PCI interface, channel 8\nPCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS9",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS9 = TPCANHandle(0x409)  # PCAN-PCI interface, channel 9\nPCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS10",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS10 = TPCANHandle(0x40A)  # PCAN-PCI interface, channel 10\nPCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS11",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS11 = TPCANHandle(0x40B)  # PCAN-PCI interface, channel 11\nPCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS12",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS12 = TPCANHandle(0x40C)  # PCAN-PCI interface, channel 12\nPCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS13",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS13 = TPCANHandle(0x40D)  # PCAN-PCI interface, channel 13\nPCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS14",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS14 = TPCANHandle(0x40E)  # PCAN-PCI interface, channel 14\nPCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS15",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS15 = TPCANHandle(0x40F)  # PCAN-PCI interface, channel 15\nPCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCIBUS16",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCIBUS16 = TPCANHandle(0x410)  # PCAN-PCI interface, channel 16\nPCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS1 = TPCANHandle(0x51)  # PCAN-USB interface, channel 1\nPCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS2 = TPCANHandle(0x52)  # PCAN-USB interface, channel 2\nPCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS3 = TPCANHandle(0x53)  # PCAN-USB interface, channel 3\nPCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS4 = TPCANHandle(0x54)  # PCAN-USB interface, channel 4\nPCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS5",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS5 = TPCANHandle(0x55)  # PCAN-USB interface, channel 5\nPCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS6 = TPCANHandle(0x56)  # PCAN-USB interface, channel 6\nPCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS7",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS7 = TPCANHandle(0x57)  # PCAN-USB interface, channel 7\nPCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS8",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS8 = TPCANHandle(0x58)  # PCAN-USB interface, channel 8\nPCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS9",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS9 = TPCANHandle(0x509)  # PCAN-USB interface, channel 9\nPCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS10",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS10 = TPCANHandle(0x50A)  # PCAN-USB interface, channel 10\nPCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS11",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS11 = TPCANHandle(0x50B)  # PCAN-USB interface, channel 11\nPCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS12",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS12 = TPCANHandle(0x50C)  # PCAN-USB interface, channel 12\nPCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS13",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS13 = TPCANHandle(0x50D)  # PCAN-USB interface, channel 13\nPCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS14",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS14 = TPCANHandle(0x50E)  # PCAN-USB interface, channel 14\nPCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS15",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS15 = TPCANHandle(0x50F)  # PCAN-USB interface, channel 15\nPCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USBBUS16",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USBBUS16 = TPCANHandle(0x510)  # PCAN-USB interface, channel 16\nPCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCCBUS1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCCBUS1 = TPCANHandle(0x61)  # PCAN-PC Card interface, channel 1\nPCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCCBUS2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCCBUS2 = TPCANHandle(0x62)  # PCAN-PC Card interface, channel 2\nPCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS1 = TPCANHandle(0x801)  # PCAN-LAN interface, channel 1\nPCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS2 = TPCANHandle(0x802)  # PCAN-LAN interface, channel 2\nPCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS3 = TPCANHandle(0x803)  # PCAN-LAN interface, channel 3\nPCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS4 = TPCANHandle(0x804)  # PCAN-LAN interface, channel 4\nPCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS5",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS5 = TPCANHandle(0x805)  # PCAN-LAN interface, channel 5\nPCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS6",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS6 = TPCANHandle(0x806)  # PCAN-LAN interface, channel 6\nPCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS7",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS7 = TPCANHandle(0x807)  # PCAN-LAN interface, channel 7\nPCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS8",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS8 = TPCANHandle(0x808)  # PCAN-LAN interface, channel 8\nPCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS9",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS9 = TPCANHandle(0x809)  # PCAN-LAN interface, channel 9\nPCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS10",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS10 = TPCANHandle(0x80A)  # PCAN-LAN interface, channel 10\nPCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS11",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS11 = TPCANHandle(0x80B)  # PCAN-LAN interface, channel 11\nPCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS12",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS12 = TPCANHandle(0x80C)  # PCAN-LAN interface, channel 12\nPCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS13",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS13 = TPCANHandle(0x80D)  # PCAN-LAN interface, channel 13\nPCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS14",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS14 = TPCANHandle(0x80E)  # PCAN-LAN interface, channel 14\nPCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS15",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS15 = TPCANHandle(0x80F)  # PCAN-LAN interface, channel 15\nPCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004\n)  # Bus error: an error counter reached the 'light' limit",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LANBUS16",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LANBUS16 = TPCANHandle(0x810)  # PCAN-LAN interface, channel 16\n# Represent the PCAN error and status codes\n#\nPCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004\n)  # Bus error: an error counter reached the 'light' limit\nPCAN_ERROR_BUSHEAVY = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_OK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_OK = TPCANStatus(0x00000)  # No error\nPCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004\n)  # Bus error: an error counter reached the 'light' limit\nPCAN_ERROR_BUSHEAVY = TPCANStatus(\n    0x00008\n)  # Bus error: an error counter reached the 'heavy' limit\nPCAN_ERROR_BUSWARNING = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_XMTFULL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_XMTFULL = TPCANStatus(0x00001)  # Transmit buffer in CAN controller is full\nPCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004\n)  # Bus error: an error counter reached the 'light' limit\nPCAN_ERROR_BUSHEAVY = TPCANStatus(\n    0x00008\n)  # Bus error: an error counter reached the 'heavy' limit\nPCAN_ERROR_BUSWARNING = TPCANStatus(\n    PCAN_ERROR_BUSHEAVY",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_OVERRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_OVERRUN = TPCANStatus(0x00002)  # CAN controller was read too late\nPCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004\n)  # Bus error: an error counter reached the 'light' limit\nPCAN_ERROR_BUSHEAVY = TPCANStatus(\n    0x00008\n)  # Bus error: an error counter reached the 'heavy' limit\nPCAN_ERROR_BUSWARNING = TPCANStatus(\n    PCAN_ERROR_BUSHEAVY\n)  # Bus error: an error counter reached the 'warning' limit",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_BUSLIGHT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_BUSLIGHT = TPCANStatus(\n    0x00004\n)  # Bus error: an error counter reached the 'light' limit\nPCAN_ERROR_BUSHEAVY = TPCANStatus(\n    0x00008\n)  # Bus error: an error counter reached the 'heavy' limit\nPCAN_ERROR_BUSWARNING = TPCANStatus(\n    PCAN_ERROR_BUSHEAVY\n)  # Bus error: an error counter reached the 'warning' limit\nPCAN_ERROR_BUSPASSIVE = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_BUSHEAVY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_BUSHEAVY = TPCANStatus(\n    0x00008\n)  # Bus error: an error counter reached the 'heavy' limit\nPCAN_ERROR_BUSWARNING = TPCANStatus(\n    PCAN_ERROR_BUSHEAVY\n)  # Bus error: an error counter reached the 'warning' limit\nPCAN_ERROR_BUSPASSIVE = TPCANStatus(\n    0x40000\n)  # Bus error: the CAN controller is error passive\nPCAN_ERROR_BUSOFF = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_BUSWARNING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_BUSWARNING = TPCANStatus(\n    PCAN_ERROR_BUSHEAVY\n)  # Bus error: an error counter reached the 'warning' limit\nPCAN_ERROR_BUSPASSIVE = TPCANStatus(\n    0x40000\n)  # Bus error: the CAN controller is error passive\nPCAN_ERROR_BUSOFF = TPCANStatus(\n    0x00010\n)  # Bus error: the CAN controller is in bus-off state\nPCAN_ERROR_ANYBUSERR = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_BUSPASSIVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_BUSPASSIVE = TPCANStatus(\n    0x40000\n)  # Bus error: the CAN controller is error passive\nPCAN_ERROR_BUSOFF = TPCANStatus(\n    0x00010\n)  # Bus error: the CAN controller is in bus-off state\nPCAN_ERROR_ANYBUSERR = TPCANStatus(\n    PCAN_ERROR_BUSWARNING\n    | PCAN_ERROR_BUSLIGHT\n    | PCAN_ERROR_BUSHEAVY",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_BUSOFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_BUSOFF = TPCANStatus(\n    0x00010\n)  # Bus error: the CAN controller is in bus-off state\nPCAN_ERROR_ANYBUSERR = TPCANStatus(\n    PCAN_ERROR_BUSWARNING\n    | PCAN_ERROR_BUSLIGHT\n    | PCAN_ERROR_BUSHEAVY\n    | PCAN_ERROR_BUSOFF\n    | PCAN_ERROR_BUSPASSIVE\n)  # Mask for all bus errors",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ANYBUSERR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ANYBUSERR = TPCANStatus(\n    PCAN_ERROR_BUSWARNING\n    | PCAN_ERROR_BUSLIGHT\n    | PCAN_ERROR_BUSHEAVY\n    | PCAN_ERROR_BUSOFF\n    | PCAN_ERROR_BUSPASSIVE\n)  # Mask for all bus errors\nPCAN_ERROR_QRCVEMPTY = TPCANStatus(0x00020)  # Receive queue is empty\nPCAN_ERROR_QOVERRUN = TPCANStatus(0x00040)  # Receive queue was read too late\nPCAN_ERROR_QXMTFULL = TPCANStatus(0x00080)  # Transmit queue is full",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_QRCVEMPTY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_QRCVEMPTY = TPCANStatus(0x00020)  # Receive queue is empty\nPCAN_ERROR_QOVERRUN = TPCANStatus(0x00040)  # Receive queue was read too late\nPCAN_ERROR_QXMTFULL = TPCANStatus(0x00080)  # Transmit queue is full\nPCAN_ERROR_REGTEST = TPCANStatus(\n    0x00100\n)  # Test of the CAN controller hardware registers failed (no hardware found)\nPCAN_ERROR_NODRIVER = TPCANStatus(0x00200)  # Driver not loaded\nPCAN_ERROR_HWINUSE = TPCANStatus(0x00400)  # Hardware already in use by a Net\nPCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_QOVERRUN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_QOVERRUN = TPCANStatus(0x00040)  # Receive queue was read too late\nPCAN_ERROR_QXMTFULL = TPCANStatus(0x00080)  # Transmit queue is full\nPCAN_ERROR_REGTEST = TPCANStatus(\n    0x00100\n)  # Test of the CAN controller hardware registers failed (no hardware found)\nPCAN_ERROR_NODRIVER = TPCANStatus(0x00200)  # Driver not loaded\nPCAN_ERROR_HWINUSE = TPCANStatus(0x00400)  # Hardware already in use by a Net\nPCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_QXMTFULL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_QXMTFULL = TPCANStatus(0x00080)  # Transmit queue is full\nPCAN_ERROR_REGTEST = TPCANStatus(\n    0x00100\n)  # Test of the CAN controller hardware registers failed (no hardware found)\nPCAN_ERROR_NODRIVER = TPCANStatus(0x00200)  # Driver not loaded\nPCAN_ERROR_HWINUSE = TPCANStatus(0x00400)  # Hardware already in use by a Net\nPCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_REGTEST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_REGTEST = TPCANStatus(\n    0x00100\n)  # Test of the CAN controller hardware registers failed (no hardware found)\nPCAN_ERROR_NODRIVER = TPCANStatus(0x00200)  # Driver not loaded\nPCAN_ERROR_HWINUSE = TPCANStatus(0x00400)  # Hardware already in use by a Net\nPCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_NODRIVER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_NODRIVER = TPCANStatus(0x00200)  # Driver not loaded\nPCAN_ERROR_HWINUSE = TPCANStatus(0x00400)  # Hardware already in use by a Net\nPCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_HWINUSE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_HWINUSE = TPCANStatus(0x00400)  # Hardware already in use by a Net\nPCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_NETINUSE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_NETINUSE = TPCANStatus(0x00800)  # A Client is already connected to the Net\nPCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000\n)  # Resource (FIFO, Client, timeout) cannot be created",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLHW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLHW = TPCANStatus(0x01400)  # Hardware handle is invalid\nPCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000\n)  # Resource (FIFO, Client, timeout) cannot be created\nPCAN_ERROR_ILLPARAMTYPE = TPCANStatus(0x04000)  # Invalid parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLNET",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLNET = TPCANStatus(0x01800)  # Net handle is invalid\nPCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000\n)  # Resource (FIFO, Client, timeout) cannot be created\nPCAN_ERROR_ILLPARAMTYPE = TPCANStatus(0x04000)  # Invalid parameter\nPCAN_ERROR_ILLPARAMVAL = TPCANStatus(0x08000)  # Invalid parameter value",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLCLIENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLCLIENT = TPCANStatus(0x01C00)  # Client handle is invalid\nPCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000\n)  # Resource (FIFO, Client, timeout) cannot be created\nPCAN_ERROR_ILLPARAMTYPE = TPCANStatus(0x04000)  # Invalid parameter\nPCAN_ERROR_ILLPARAMVAL = TPCANStatus(0x08000)  # Invalid parameter value\nPCAN_ERROR_UNKNOWN = TPCANStatus(0x10000)  # Unknown error",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLHANDLE = TPCANStatus(\n    PCAN_ERROR_ILLHW | PCAN_ERROR_ILLNET | PCAN_ERROR_ILLCLIENT\n)  # Mask for all handle errors\nPCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000\n)  # Resource (FIFO, Client, timeout) cannot be created\nPCAN_ERROR_ILLPARAMTYPE = TPCANStatus(0x04000)  # Invalid parameter\nPCAN_ERROR_ILLPARAMVAL = TPCANStatus(0x08000)  # Invalid parameter value\nPCAN_ERROR_UNKNOWN = TPCANStatus(0x10000)  # Unknown error\nPCAN_ERROR_ILLDATA = TPCANStatus(0x20000)  # Invalid data, function, or action",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_RESOURCE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_RESOURCE = TPCANStatus(\n    0x02000\n)  # Resource (FIFO, Client, timeout) cannot be created\nPCAN_ERROR_ILLPARAMTYPE = TPCANStatus(0x04000)  # Invalid parameter\nPCAN_ERROR_ILLPARAMVAL = TPCANStatus(0x08000)  # Invalid parameter value\nPCAN_ERROR_UNKNOWN = TPCANStatus(0x10000)  # Unknown error\nPCAN_ERROR_ILLDATA = TPCANStatus(0x20000)  # Invalid data, function, or action\nPCAN_ERROR_ILLMODE = TPCANStatus(\n    0x80000\n)  # Driver object state is wrong for the attempted operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLPARAMTYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLPARAMTYPE = TPCANStatus(0x04000)  # Invalid parameter\nPCAN_ERROR_ILLPARAMVAL = TPCANStatus(0x08000)  # Invalid parameter value\nPCAN_ERROR_UNKNOWN = TPCANStatus(0x10000)  # Unknown error\nPCAN_ERROR_ILLDATA = TPCANStatus(0x20000)  # Invalid data, function, or action\nPCAN_ERROR_ILLMODE = TPCANStatus(\n    0x80000\n)  # Driver object state is wrong for the attempted operation\nPCAN_ERROR_CAUTION = TPCANStatus(\n    0x2000000\n)  # An operation was successfully carried out, however, irregularities were registered",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLPARAMVAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLPARAMVAL = TPCANStatus(0x08000)  # Invalid parameter value\nPCAN_ERROR_UNKNOWN = TPCANStatus(0x10000)  # Unknown error\nPCAN_ERROR_ILLDATA = TPCANStatus(0x20000)  # Invalid data, function, or action\nPCAN_ERROR_ILLMODE = TPCANStatus(\n    0x80000\n)  # Driver object state is wrong for the attempted operation\nPCAN_ERROR_CAUTION = TPCANStatus(\n    0x2000000\n)  # An operation was successfully carried out, however, irregularities were registered\nPCAN_ERROR_INITIALIZE = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_UNKNOWN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_UNKNOWN = TPCANStatus(0x10000)  # Unknown error\nPCAN_ERROR_ILLDATA = TPCANStatus(0x20000)  # Invalid data, function, or action\nPCAN_ERROR_ILLMODE = TPCANStatus(\n    0x80000\n)  # Driver object state is wrong for the attempted operation\nPCAN_ERROR_CAUTION = TPCANStatus(\n    0x2000000\n)  # An operation was successfully carried out, however, irregularities were registered\nPCAN_ERROR_INITIALIZE = TPCANStatus(\n    0x4000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLDATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLDATA = TPCANStatus(0x20000)  # Invalid data, function, or action\nPCAN_ERROR_ILLMODE = TPCANStatus(\n    0x80000\n)  # Driver object state is wrong for the attempted operation\nPCAN_ERROR_CAUTION = TPCANStatus(\n    0x2000000\n)  # An operation was successfully carried out, however, irregularities were registered\nPCAN_ERROR_INITIALIZE = TPCANStatus(\n    0x4000000\n)  # Channel is not initialized [Value was changed from 0x40000 to 0x4000000]",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLMODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLMODE = TPCANStatus(\n    0x80000\n)  # Driver object state is wrong for the attempted operation\nPCAN_ERROR_CAUTION = TPCANStatus(\n    0x2000000\n)  # An operation was successfully carried out, however, irregularities were registered\nPCAN_ERROR_INITIALIZE = TPCANStatus(\n    0x4000000\n)  # Channel is not initialized [Value was changed from 0x40000 to 0x4000000]\nPCAN_ERROR_ILLOPERATION = TPCANStatus(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_CAUTION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_CAUTION = TPCANStatus(\n    0x2000000\n)  # An operation was successfully carried out, however, irregularities were registered\nPCAN_ERROR_INITIALIZE = TPCANStatus(\n    0x4000000\n)  # Channel is not initialized [Value was changed from 0x40000 to 0x4000000]\nPCAN_ERROR_ILLOPERATION = TPCANStatus(\n    0x8000000\n)  # Invalid operation [Value was changed from 0x80000 to 0x8000000]\n# PCAN devices",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_INITIALIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_INITIALIZE = TPCANStatus(\n    0x4000000\n)  # Channel is not initialized [Value was changed from 0x40000 to 0x4000000]\nPCAN_ERROR_ILLOPERATION = TPCANStatus(\n    0x8000000\n)  # Invalid operation [Value was changed from 0x80000 to 0x8000000]\n# PCAN devices\n#\nPCAN_NONE = TPCANDevice(0x00)  # Undefined, unknown or not selected PCAN device value\nPCAN_PEAKCAN = TPCANDevice(0x01)  # PCAN Non-PnP devices. NOT USED WITHIN PCAN-Basic API",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ERROR_ILLOPERATION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ERROR_ILLOPERATION = TPCANStatus(\n    0x8000000\n)  # Invalid operation [Value was changed from 0x80000 to 0x8000000]\n# PCAN devices\n#\nPCAN_NONE = TPCANDevice(0x00)  # Undefined, unknown or not selected PCAN device value\nPCAN_PEAKCAN = TPCANDevice(0x01)  # PCAN Non-PnP devices. NOT USED WITHIN PCAN-Basic API\nPCAN_ISA = TPCANDevice(0x02)  # PCAN-ISA, PCAN-PC/104, and PCAN-PC/104-Plus\nPCAN_DNG = TPCANDevice(0x03)  # PCAN-Dongle\nPCAN_PCI = TPCANDevice(0x04)  # PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_NONE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_NONE = TPCANDevice(0x00)  # Undefined, unknown or not selected PCAN device value\nPCAN_PEAKCAN = TPCANDevice(0x01)  # PCAN Non-PnP devices. NOT USED WITHIN PCAN-Basic API\nPCAN_ISA = TPCANDevice(0x02)  # PCAN-ISA, PCAN-PC/104, and PCAN-PC/104-Plus\nPCAN_DNG = TPCANDevice(0x03)  # PCAN-Dongle\nPCAN_PCI = TPCANDevice(0x04)  # PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express\nPCAN_USB = TPCANDevice(0x05)  # PCAN-USB and PCAN-USB Pro\nPCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PEAKCAN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PEAKCAN = TPCANDevice(0x01)  # PCAN Non-PnP devices. NOT USED WITHIN PCAN-Basic API\nPCAN_ISA = TPCANDevice(0x02)  # PCAN-ISA, PCAN-PC/104, and PCAN-PC/104-Plus\nPCAN_DNG = TPCANDevice(0x03)  # PCAN-Dongle\nPCAN_PCI = TPCANDevice(0x04)  # PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express\nPCAN_USB = TPCANDevice(0x05)  # PCAN-USB and PCAN-USB Pro\nPCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ISA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ISA = TPCANDevice(0x02)  # PCAN-ISA, PCAN-PC/104, and PCAN-PC/104-Plus\nPCAN_DNG = TPCANDevice(0x03)  # PCAN-Dongle\nPCAN_PCI = TPCANDevice(0x04)  # PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express\nPCAN_USB = TPCANDevice(0x05)  # PCAN-USB and PCAN-USB Pro\nPCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_DNG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_DNG = TPCANDevice(0x03)  # PCAN-Dongle\nPCAN_PCI = TPCANDevice(0x04)  # PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express\nPCAN_USB = TPCANDevice(0x05)  # PCAN-USB and PCAN-USB Pro\nPCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCI = TPCANDevice(0x04)  # PCAN-PCI, PCAN-cPCI, PCAN-miniPCI, and PCAN-PCI Express\nPCAN_USB = TPCANDevice(0x05)  # PCAN-USB and PCAN-USB Pro\nPCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters\n#\nPCAN_DEVICE_ID = TPCANParameter(0x01)  # Device identifier parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_USB",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_USB = TPCANDevice(0x05)  # PCAN-USB and PCAN-USB Pro\nPCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters\n#\nPCAN_DEVICE_ID = TPCANParameter(0x01)  # Device identifier parameter\nPCAN_5VOLTS_POWER = TPCANParameter(0x02)  # 5-Volt power parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PCC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PCC = TPCANDevice(0x06)  # PCAN-PC Card\nPCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters\n#\nPCAN_DEVICE_ID = TPCANParameter(0x01)  # Device identifier parameter\nPCAN_5VOLTS_POWER = TPCANParameter(0x02)  # 5-Volt power parameter\nPCAN_RECEIVE_EVENT = TPCANParameter(0x03)  # PCAN receive event handler parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_VIRTUAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_VIRTUAL = TPCANDevice(\n    0x07\n)  # PCAN Virtual hardware. NOT USED WITHIN PCAN-Basic API\nPCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters\n#\nPCAN_DEVICE_ID = TPCANParameter(0x01)  # Device identifier parameter\nPCAN_5VOLTS_POWER = TPCANParameter(0x02)  # 5-Volt power parameter\nPCAN_RECEIVE_EVENT = TPCANParameter(0x03)  # PCAN receive event handler parameter\nPCAN_MESSAGE_FILTER = TPCANParameter(0x04)  # PCAN message filter parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LAN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LAN = TPCANDevice(0x08)  # PCAN Gateway devices\n# PCAN parameters\n#\nPCAN_DEVICE_ID = TPCANParameter(0x01)  # Device identifier parameter\nPCAN_5VOLTS_POWER = TPCANParameter(0x02)  # 5-Volt power parameter\nPCAN_RECEIVE_EVENT = TPCANParameter(0x03)  # PCAN receive event handler parameter\nPCAN_MESSAGE_FILTER = TPCANParameter(0x04)  # PCAN message filter parameter\nPCAN_API_VERSION = TPCANParameter(0x05)  # PCAN-Basic API version parameter\nPCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_DEVICE_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_DEVICE_ID = TPCANParameter(0x01)  # Device identifier parameter\nPCAN_5VOLTS_POWER = TPCANParameter(0x02)  # 5-Volt power parameter\nPCAN_RECEIVE_EVENT = TPCANParameter(0x03)  # PCAN receive event handler parameter\nPCAN_MESSAGE_FILTER = TPCANParameter(0x04)  # PCAN message filter parameter\nPCAN_API_VERSION = TPCANParameter(0x05)  # PCAN-Basic API version parameter\nPCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_5VOLTS_POWER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_5VOLTS_POWER = TPCANParameter(0x02)  # 5-Volt power parameter\nPCAN_RECEIVE_EVENT = TPCANParameter(0x03)  # PCAN receive event handler parameter\nPCAN_MESSAGE_FILTER = TPCANParameter(0x04)  # PCAN message filter parameter\nPCAN_API_VERSION = TPCANParameter(0x05)  # PCAN-Basic API version parameter\nPCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_RECEIVE_EVENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_RECEIVE_EVENT = TPCANParameter(0x03)  # PCAN receive event handler parameter\nPCAN_MESSAGE_FILTER = TPCANParameter(0x04)  # PCAN message filter parameter\nPCAN_API_VERSION = TPCANParameter(0x05)  # PCAN-Basic API version parameter\nPCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_FILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_FILTER = TPCANParameter(0x04)  # PCAN message filter parameter\nPCAN_API_VERSION = TPCANParameter(0x05)  # PCAN-Basic API version parameter\nPCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_API_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_API_VERSION = TPCANParameter(0x05)  # PCAN-Basic API version parameter\nPCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_VERSION = TPCANParameter(0x06)  # PCAN device channel version parameter\nPCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BUSOFF_AUTORESET",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BUSOFF_AUTORESET = TPCANParameter(0x07)  # PCAN Reset-On-Busoff parameter\nPCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LISTEN_ONLY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LISTEN_ONLY = TPCANParameter(0x08)  # PCAN Listen-Only parameter\nPCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LOG_LOCATION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LOG_LOCATION = TPCANParameter(0x09)  # Directory path for log files\nPCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LOG_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LOG_STATUS = TPCANParameter(0x0A)  # Debug-Log activation status\nPCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LOG_CONFIGURE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LOG_CONFIGURE = TPCANParameter(\n    0x0B\n)  # Configuration of the debugged information (LOG_FUNCTION_***)\nPCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LOG_TEXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LOG_TEXT = TPCANParameter(0x0C)  # Custom insertion of text into the log file\nPCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_CONDITION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_CONDITION = TPCANParameter(0x0D)  # Availability status of a PCAN-Channel\nPCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_HARDWARE_NAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_HARDWARE_NAME = TPCANParameter(0x0E)  # PCAN hardware name parameter\nPCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_RECEIVE_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_RECEIVE_STATUS = TPCANParameter(0x0F)  # Message reception status of a PCAN-Channel\nPCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14\n)  # Configuration of the trace file storing mode (TRACE_FILE_***)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CONTROLLER_NUMBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CONTROLLER_NUMBER = TPCANParameter(0x10)  # CAN-Controller number of a PCAN-Channel\nPCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14\n)  # Configuration of the trace file storing mode (TRACE_FILE_***)\nPCAN_CHANNEL_IDENTIFYING = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TRACE_LOCATION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TRACE_LOCATION = TPCANParameter(0x11)  # Directory path for PCAN trace files\nPCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14\n)  # Configuration of the trace file storing mode (TRACE_FILE_***)\nPCAN_CHANNEL_IDENTIFYING = TPCANParameter(\n    0x15",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TRACE_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TRACE_STATUS = TPCANParameter(0x12)  # CAN tracing activation status\nPCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14\n)  # Configuration of the trace file storing mode (TRACE_FILE_***)\nPCAN_CHANNEL_IDENTIFYING = TPCANParameter(\n    0x15\n)  # Physical identification of a USB based PCAN-Channel by blinking its associated LED",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TRACE_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TRACE_SIZE = TPCANParameter(\n    0x13\n)  # Configuration of the maximum file size of a CAN trace\nPCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14\n)  # Configuration of the trace file storing mode (TRACE_FILE_***)\nPCAN_CHANNEL_IDENTIFYING = TPCANParameter(\n    0x15\n)  # Physical identification of a USB based PCAN-Channel by blinking its associated LED\nPCAN_CHANNEL_FEATURES = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TRACE_CONFIGURE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TRACE_CONFIGURE = TPCANParameter(\n    0x14\n)  # Configuration of the trace file storing mode (TRACE_FILE_***)\nPCAN_CHANNEL_IDENTIFYING = TPCANParameter(\n    0x15\n)  # Physical identification of a USB based PCAN-Channel by blinking its associated LED\nPCAN_CHANNEL_FEATURES = TPCANParameter(\n    0x16\n)  # Capabilities of a PCAN device (FEATURE_***)\nPCAN_BITRATE_ADAPTING = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_IDENTIFYING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_IDENTIFYING = TPCANParameter(\n    0x15\n)  # Physical identification of a USB based PCAN-Channel by blinking its associated LED\nPCAN_CHANNEL_FEATURES = TPCANParameter(\n    0x16\n)  # Capabilities of a PCAN device (FEATURE_***)\nPCAN_BITRATE_ADAPTING = TPCANParameter(\n    0x17\n)  # Using of an existing bit rate (PCAN-View connected to a channel)\nPCAN_BITRATE_INFO = TPCANParameter(0x18)  # Configured bit rate as Btr0Btr1 value",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_FEATURES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_FEATURES = TPCANParameter(\n    0x16\n)  # Capabilities of a PCAN device (FEATURE_***)\nPCAN_BITRATE_ADAPTING = TPCANParameter(\n    0x17\n)  # Using of an existing bit rate (PCAN-View connected to a channel)\nPCAN_BITRATE_INFO = TPCANParameter(0x18)  # Configured bit rate as Btr0Btr1 value\nPCAN_BITRATE_INFO_FD = TPCANParameter(\n    0x19\n)  # Configured bit rate as TPCANBitrateFD string",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BITRATE_ADAPTING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BITRATE_ADAPTING = TPCANParameter(\n    0x17\n)  # Using of an existing bit rate (PCAN-View connected to a channel)\nPCAN_BITRATE_INFO = TPCANParameter(0x18)  # Configured bit rate as Btr0Btr1 value\nPCAN_BITRATE_INFO_FD = TPCANParameter(\n    0x19\n)  # Configured bit rate as TPCANBitrateFD string\nPCAN_BUSSPEED_NOMINAL = TPCANParameter(\n    0x1A\n)  # Configured nominal CAN Bus speed as Bits per seconds",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BITRATE_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BITRATE_INFO = TPCANParameter(0x18)  # Configured bit rate as Btr0Btr1 value\nPCAN_BITRATE_INFO_FD = TPCANParameter(\n    0x19\n)  # Configured bit rate as TPCANBitrateFD string\nPCAN_BUSSPEED_NOMINAL = TPCANParameter(\n    0x1A\n)  # Configured nominal CAN Bus speed as Bits per seconds\nPCAN_BUSSPEED_DATA = TPCANParameter(\n    0x1B\n)  # Configured CAN data speed as Bits per seconds",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BITRATE_INFO_FD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BITRATE_INFO_FD = TPCANParameter(\n    0x19\n)  # Configured bit rate as TPCANBitrateFD string\nPCAN_BUSSPEED_NOMINAL = TPCANParameter(\n    0x1A\n)  # Configured nominal CAN Bus speed as Bits per seconds\nPCAN_BUSSPEED_DATA = TPCANParameter(\n    0x1B\n)  # Configured CAN data speed as Bits per seconds\nPCAN_IP_ADDRESS = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BUSSPEED_NOMINAL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BUSSPEED_NOMINAL = TPCANParameter(\n    0x1A\n)  # Configured nominal CAN Bus speed as Bits per seconds\nPCAN_BUSSPEED_DATA = TPCANParameter(\n    0x1B\n)  # Configured CAN data speed as Bits per seconds\nPCAN_IP_ADDRESS = TPCANParameter(\n    0x1C\n)  # Remote address of a LAN channel as string in IPv4 format\nPCAN_LAN_SERVICE_STATUS = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BUSSPEED_DATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BUSSPEED_DATA = TPCANParameter(\n    0x1B\n)  # Configured CAN data speed as Bits per seconds\nPCAN_IP_ADDRESS = TPCANParameter(\n    0x1C\n)  # Remote address of a LAN channel as string in IPv4 format\nPCAN_LAN_SERVICE_STATUS = TPCANParameter(\n    0x1D\n)  # Status of the Virtual PCAN-Gateway Service\nPCAN_ALLOW_STATUS_FRAMES = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_IP_ADDRESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_IP_ADDRESS = TPCANParameter(\n    0x1C\n)  # Remote address of a LAN channel as string in IPv4 format\nPCAN_LAN_SERVICE_STATUS = TPCANParameter(\n    0x1D\n)  # Status of the Virtual PCAN-Gateway Service\nPCAN_ALLOW_STATUS_FRAMES = TPCANParameter(\n    0x1E\n)  # Status messages reception status within a PCAN-Channel\nPCAN_ALLOW_RTR_FRAMES = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_LAN_SERVICE_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_LAN_SERVICE_STATUS = TPCANParameter(\n    0x1D\n)  # Status of the Virtual PCAN-Gateway Service\nPCAN_ALLOW_STATUS_FRAMES = TPCANParameter(\n    0x1E\n)  # Status messages reception status within a PCAN-Channel\nPCAN_ALLOW_RTR_FRAMES = TPCANParameter(\n    0x1F\n)  # RTR messages reception status within a PCAN-Channel\nPCAN_ALLOW_ERROR_FRAMES = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ALLOW_STATUS_FRAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ALLOW_STATUS_FRAMES = TPCANParameter(\n    0x1E\n)  # Status messages reception status within a PCAN-Channel\nPCAN_ALLOW_RTR_FRAMES = TPCANParameter(\n    0x1F\n)  # RTR messages reception status within a PCAN-Channel\nPCAN_ALLOW_ERROR_FRAMES = TPCANParameter(\n    0x20\n)  # Error messages reception status within a PCAN-Channel\nPCAN_INTERFRAME_DELAY = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ALLOW_RTR_FRAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ALLOW_RTR_FRAMES = TPCANParameter(\n    0x1F\n)  # RTR messages reception status within a PCAN-Channel\nPCAN_ALLOW_ERROR_FRAMES = TPCANParameter(\n    0x20\n)  # Error messages reception status within a PCAN-Channel\nPCAN_INTERFRAME_DELAY = TPCANParameter(\n    0x21\n)  # Delay, in microseconds, between sending frames\nPCAN_ACCEPTANCE_FILTER_11BIT = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ALLOW_ERROR_FRAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ALLOW_ERROR_FRAMES = TPCANParameter(\n    0x20\n)  # Error messages reception status within a PCAN-Channel\nPCAN_INTERFRAME_DELAY = TPCANParameter(\n    0x21\n)  # Delay, in microseconds, between sending frames\nPCAN_ACCEPTANCE_FILTER_11BIT = TPCANParameter(\n    0x22\n)  # Filter over code and mask patterns for 11-Bit messages\nPCAN_ACCEPTANCE_FILTER_29BIT = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_INTERFRAME_DELAY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_INTERFRAME_DELAY = TPCANParameter(\n    0x21\n)  # Delay, in microseconds, between sending frames\nPCAN_ACCEPTANCE_FILTER_11BIT = TPCANParameter(\n    0x22\n)  # Filter over code and mask patterns for 11-Bit messages\nPCAN_ACCEPTANCE_FILTER_29BIT = TPCANParameter(\n    0x23\n)  # Filter over code and mask patterns for 29-Bit messages\nPCAN_IO_DIGITAL_CONFIGURATION = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ACCEPTANCE_FILTER_11BIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ACCEPTANCE_FILTER_11BIT = TPCANParameter(\n    0x22\n)  # Filter over code and mask patterns for 11-Bit messages\nPCAN_ACCEPTANCE_FILTER_29BIT = TPCANParameter(\n    0x23\n)  # Filter over code and mask patterns for 29-Bit messages\nPCAN_IO_DIGITAL_CONFIGURATION = TPCANParameter(\n    0x24\n)  # Output mode of 32 digital I/O pin of a PCAN-USB Chip. 1: Output-Active 0 : Output Inactive\nPCAN_IO_DIGITAL_VALUE = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ACCEPTANCE_FILTER_29BIT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ACCEPTANCE_FILTER_29BIT = TPCANParameter(\n    0x23\n)  # Filter over code and mask patterns for 29-Bit messages\nPCAN_IO_DIGITAL_CONFIGURATION = TPCANParameter(\n    0x24\n)  # Output mode of 32 digital I/O pin of a PCAN-USB Chip. 1: Output-Active 0 : Output Inactive\nPCAN_IO_DIGITAL_VALUE = TPCANParameter(\n    0x25\n)  # Value assigned to a 32 digital I/O pins of a PCAN-USB Chip\nPCAN_IO_DIGITAL_SET = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_IO_DIGITAL_CONFIGURATION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_IO_DIGITAL_CONFIGURATION = TPCANParameter(\n    0x24\n)  # Output mode of 32 digital I/O pin of a PCAN-USB Chip. 1: Output-Active 0 : Output Inactive\nPCAN_IO_DIGITAL_VALUE = TPCANParameter(\n    0x25\n)  # Value assigned to a 32 digital I/O pins of a PCAN-USB Chip\nPCAN_IO_DIGITAL_SET = TPCANParameter(\n    0x26\n)  # Value assigned to a 32 digital I/O pins of a PCAN-USB Chip - Multiple digital I/O pins to 1 = High\nPCAN_IO_DIGITAL_CLEAR = TPCANParameter(0x27)  # Clear multiple digital I/O pins to 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_IO_DIGITAL_VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_IO_DIGITAL_VALUE = TPCANParameter(\n    0x25\n)  # Value assigned to a 32 digital I/O pins of a PCAN-USB Chip\nPCAN_IO_DIGITAL_SET = TPCANParameter(\n    0x26\n)  # Value assigned to a 32 digital I/O pins of a PCAN-USB Chip - Multiple digital I/O pins to 1 = High\nPCAN_IO_DIGITAL_CLEAR = TPCANParameter(0x27)  # Clear multiple digital I/O pins to 0\nPCAN_IO_ANALOG_VALUE = TPCANParameter(0x28)  # Get value of a single analog input pin\nPCAN_FIRMWARE_VERSION = TPCANParameter(\n    0x29",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_IO_DIGITAL_SET",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_IO_DIGITAL_SET = TPCANParameter(\n    0x26\n)  # Value assigned to a 32 digital I/O pins of a PCAN-USB Chip - Multiple digital I/O pins to 1 = High\nPCAN_IO_DIGITAL_CLEAR = TPCANParameter(0x27)  # Clear multiple digital I/O pins to 0\nPCAN_IO_ANALOG_VALUE = TPCANParameter(0x28)  # Get value of a single analog input pin\nPCAN_FIRMWARE_VERSION = TPCANParameter(\n    0x29\n)  # Get the version of the firmware used by the device associated with a PCAN-Channel\nPCAN_ATTACHED_CHANNELS_COUNT = TPCANParameter(\n    0x2A",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_IO_DIGITAL_CLEAR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_IO_DIGITAL_CLEAR = TPCANParameter(0x27)  # Clear multiple digital I/O pins to 0\nPCAN_IO_ANALOG_VALUE = TPCANParameter(0x28)  # Get value of a single analog input pin\nPCAN_FIRMWARE_VERSION = TPCANParameter(\n    0x29\n)  # Get the version of the firmware used by the device associated with a PCAN-Channel\nPCAN_ATTACHED_CHANNELS_COUNT = TPCANParameter(\n    0x2A\n)  # Get the amount of PCAN channels attached to a system\nPCAN_ATTACHED_CHANNELS = TPCANParameter(\n    0x2B",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_IO_ANALOG_VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_IO_ANALOG_VALUE = TPCANParameter(0x28)  # Get value of a single analog input pin\nPCAN_FIRMWARE_VERSION = TPCANParameter(\n    0x29\n)  # Get the version of the firmware used by the device associated with a PCAN-Channel\nPCAN_ATTACHED_CHANNELS_COUNT = TPCANParameter(\n    0x2A\n)  # Get the amount of PCAN channels attached to a system\nPCAN_ATTACHED_CHANNELS = TPCANParameter(\n    0x2B\n)  # Get information about PCAN channels attached to a system",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_FIRMWARE_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_FIRMWARE_VERSION = TPCANParameter(\n    0x29\n)  # Get the version of the firmware used by the device associated with a PCAN-Channel\nPCAN_ATTACHED_CHANNELS_COUNT = TPCANParameter(\n    0x2A\n)  # Get the amount of PCAN channels attached to a system\nPCAN_ATTACHED_CHANNELS = TPCANParameter(\n    0x2B\n)  # Get information about PCAN channels attached to a system\nPCAN_ALLOW_ECHO_FRAMES = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ATTACHED_CHANNELS_COUNT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ATTACHED_CHANNELS_COUNT = TPCANParameter(\n    0x2A\n)  # Get the amount of PCAN channels attached to a system\nPCAN_ATTACHED_CHANNELS = TPCANParameter(\n    0x2B\n)  # Get information about PCAN channels attached to a system\nPCAN_ALLOW_ECHO_FRAMES = TPCANParameter(\n    0x2C\n)  # Echo messages reception status within a PCAN-Channel\nPCAN_DEVICE_PART_NUMBER = TPCANParameter(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ATTACHED_CHANNELS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ATTACHED_CHANNELS = TPCANParameter(\n    0x2B\n)  # Get information about PCAN channels attached to a system\nPCAN_ALLOW_ECHO_FRAMES = TPCANParameter(\n    0x2C\n)  # Echo messages reception status within a PCAN-Channel\nPCAN_DEVICE_PART_NUMBER = TPCANParameter(\n    0x2D\n)  # Get the part number associated to a device\n# DEPRECATED parameters",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_ALLOW_ECHO_FRAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_ALLOW_ECHO_FRAMES = TPCANParameter(\n    0x2C\n)  # Echo messages reception status within a PCAN-Channel\nPCAN_DEVICE_PART_NUMBER = TPCANParameter(\n    0x2D\n)  # Get the part number associated to a device\n# DEPRECATED parameters\n#\nPCAN_DEVICE_NUMBER = PCAN_DEVICE_ID  # DEPRECATED. Use PCAN_DEVICE_ID instead\n# PCAN parameter values",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_DEVICE_PART_NUMBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_DEVICE_PART_NUMBER = TPCANParameter(\n    0x2D\n)  # Get the part number associated to a device\n# DEPRECATED parameters\n#\nPCAN_DEVICE_NUMBER = PCAN_DEVICE_ID  # DEPRECATED. Use PCAN_DEVICE_ID instead\n# PCAN parameter values\n#\nPCAN_PARAMETER_OFF = 0x00  # The PCAN parameter is not set (inactive)\nPCAN_PARAMETER_ON = 0x01  # The PCAN parameter is set (active)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_DEVICE_NUMBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_DEVICE_NUMBER = PCAN_DEVICE_ID  # DEPRECATED. Use PCAN_DEVICE_ID instead\n# PCAN parameter values\n#\nPCAN_PARAMETER_OFF = 0x00  # The PCAN parameter is not set (inactive)\nPCAN_PARAMETER_ON = 0x01  # The PCAN parameter is set (active)\nPCAN_FILTER_CLOSE = 0x00  # The PCAN filter is closed. No messages will be received\nPCAN_FILTER_OPEN = (\n    0x01  # The PCAN filter is fully opened. All messages will be received\n)\nPCAN_FILTER_CUSTOM = 0x02  # The PCAN filter is custom configured. Only registered messages will be received",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PARAMETER_OFF",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PARAMETER_OFF = 0x00  # The PCAN parameter is not set (inactive)\nPCAN_PARAMETER_ON = 0x01  # The PCAN parameter is set (active)\nPCAN_FILTER_CLOSE = 0x00  # The PCAN filter is closed. No messages will be received\nPCAN_FILTER_OPEN = (\n    0x01  # The PCAN filter is fully opened. All messages will be received\n)\nPCAN_FILTER_CUSTOM = 0x02  # The PCAN filter is custom configured. Only registered messages will be received\nPCAN_CHANNEL_UNAVAILABLE = 0x00  # The PCAN-Channel handle is illegal, or its associated hardware is not available\nPCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_PARAMETER_ON",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_PARAMETER_ON = 0x01  # The PCAN parameter is set (active)\nPCAN_FILTER_CLOSE = 0x00  # The PCAN filter is closed. No messages will be received\nPCAN_FILTER_OPEN = (\n    0x01  # The PCAN filter is fully opened. All messages will be received\n)\nPCAN_FILTER_CUSTOM = 0x02  # The PCAN filter is custom configured. Only registered messages will be received\nPCAN_CHANNEL_UNAVAILABLE = 0x00  # The PCAN-Channel handle is illegal, or its associated hardware is not available\nPCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_FILTER_CLOSE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_FILTER_CLOSE = 0x00  # The PCAN filter is closed. No messages will be received\nPCAN_FILTER_OPEN = (\n    0x01  # The PCAN filter is fully opened. All messages will be received\n)\nPCAN_FILTER_CUSTOM = 0x02  # The PCAN filter is custom configured. Only registered messages will be received\nPCAN_CHANNEL_UNAVAILABLE = 0x00  # The PCAN-Channel handle is illegal, or its associated hardware is not available\nPCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_FILTER_OPEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_FILTER_OPEN = (\n    0x01  # The PCAN filter is fully opened. All messages will be received\n)\nPCAN_FILTER_CUSTOM = 0x02  # The PCAN filter is custom configured. Only registered messages will be received\nPCAN_CHANNEL_UNAVAILABLE = 0x00  # The PCAN-Channel handle is illegal, or its associated hardware is not available\nPCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used\n)\nPCAN_CHANNEL_PCANVIEW = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_FILTER_CUSTOM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_FILTER_CUSTOM = 0x02  # The PCAN filter is custom configured. Only registered messages will be received\nPCAN_CHANNEL_UNAVAILABLE = 0x00  # The PCAN-Channel handle is illegal, or its associated hardware is not available\nPCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used\n)\nPCAN_CHANNEL_PCANVIEW = (\n    PCAN_CHANNEL_AVAILABLE | PCAN_CHANNEL_OCCUPIED\n)  # The PCAN-Channel handle is already being used by a PCAN-View application, but is available to connect\nLOG_FUNCTION_DEFAULT = 0x00  # Logs system exceptions / errors",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_UNAVAILABLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_UNAVAILABLE = 0x00  # The PCAN-Channel handle is illegal, or its associated hardware is not available\nPCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used\n)\nPCAN_CHANNEL_PCANVIEW = (\n    PCAN_CHANNEL_AVAILABLE | PCAN_CHANNEL_OCCUPIED\n)  # The PCAN-Channel handle is already being used by a PCAN-View application, but is available to connect\nLOG_FUNCTION_DEFAULT = 0x00  # Logs system exceptions / errors\nLOG_FUNCTION_ENTRY = 0x01  # Logs the entries to the PCAN-Basic API functions",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_AVAILABLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_AVAILABLE = 0x01  # The PCAN-Channel handle is available to be connected (PnP Hardware: it means furthermore that the hardware is plugged-in)\nPCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used\n)\nPCAN_CHANNEL_PCANVIEW = (\n    PCAN_CHANNEL_AVAILABLE | PCAN_CHANNEL_OCCUPIED\n)  # The PCAN-Channel handle is already being used by a PCAN-View application, but is available to connect\nLOG_FUNCTION_DEFAULT = 0x00  # Logs system exceptions / errors\nLOG_FUNCTION_ENTRY = 0x01  # Logs the entries to the PCAN-Basic API functions\nLOG_FUNCTION_PARAMETERS = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_OCCUPIED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_OCCUPIED = (\n    0x02  # The PCAN-Channel handle is valid, and is already being used\n)\nPCAN_CHANNEL_PCANVIEW = (\n    PCAN_CHANNEL_AVAILABLE | PCAN_CHANNEL_OCCUPIED\n)  # The PCAN-Channel handle is already being used by a PCAN-View application, but is available to connect\nLOG_FUNCTION_DEFAULT = 0x00  # Logs system exceptions / errors\nLOG_FUNCTION_ENTRY = 0x01  # Logs the entries to the PCAN-Basic API functions\nLOG_FUNCTION_PARAMETERS = (\n    0x02  # Logs the parameters passed to the PCAN-Basic API functions",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_PCANVIEW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_PCANVIEW = (\n    PCAN_CHANNEL_AVAILABLE | PCAN_CHANNEL_OCCUPIED\n)  # The PCAN-Channel handle is already being used by a PCAN-View application, but is available to connect\nLOG_FUNCTION_DEFAULT = 0x00  # Logs system exceptions / errors\nLOG_FUNCTION_ENTRY = 0x01  # Logs the entries to the PCAN-Basic API functions\nLOG_FUNCTION_PARAMETERS = (\n    0x02  # Logs the parameters passed to the PCAN-Basic API functions\n)\nLOG_FUNCTION_LEAVE = 0x04  # Logs the exits from the PCAN-Basic API functions\nLOG_FUNCTION_WRITE = 0x08  # Logs the CAN messages passed to the CAN_Write function",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_DEFAULT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_DEFAULT = 0x00  # Logs system exceptions / errors\nLOG_FUNCTION_ENTRY = 0x01  # Logs the entries to the PCAN-Basic API functions\nLOG_FUNCTION_PARAMETERS = (\n    0x02  # Logs the parameters passed to the PCAN-Basic API functions\n)\nLOG_FUNCTION_LEAVE = 0x04  # Logs the exits from the PCAN-Basic API functions\nLOG_FUNCTION_WRITE = 0x08  # Logs the CAN messages passed to the CAN_Write function\nLOG_FUNCTION_READ = 0x10  # Logs the CAN messages received within the CAN_Read function\nLOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_ENTRY",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_ENTRY = 0x01  # Logs the entries to the PCAN-Basic API functions\nLOG_FUNCTION_PARAMETERS = (\n    0x02  # Logs the parameters passed to the PCAN-Basic API functions\n)\nLOG_FUNCTION_LEAVE = 0x04  # Logs the exits from the PCAN-Basic API functions\nLOG_FUNCTION_WRITE = 0x08  # Logs the CAN messages passed to the CAN_Write function\nLOG_FUNCTION_READ = 0x10  # Logs the CAN messages received within the CAN_Read function\nLOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_PARAMETERS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_PARAMETERS = (\n    0x02  # Logs the parameters passed to the PCAN-Basic API functions\n)\nLOG_FUNCTION_LEAVE = 0x04  # Logs the exits from the PCAN-Basic API functions\nLOG_FUNCTION_WRITE = 0x08  # Logs the CAN messages passed to the CAN_Write function\nLOG_FUNCTION_READ = 0x10  # Logs the CAN messages received within the CAN_Read function\nLOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions\n)\nTRACE_FILE_SINGLE = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_LEAVE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_LEAVE = 0x04  # Logs the exits from the PCAN-Basic API functions\nLOG_FUNCTION_WRITE = 0x08  # Logs the CAN messages passed to the CAN_Write function\nLOG_FUNCTION_READ = 0x10  # Logs the CAN messages received within the CAN_Read function\nLOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions\n)\nTRACE_FILE_SINGLE = (\n    0x00  # A single file is written until it size reaches PAN_TRACE_SIZE\n)\nTRACE_FILE_SEGMENTED = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_WRITE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_WRITE = 0x08  # Logs the CAN messages passed to the CAN_Write function\nLOG_FUNCTION_READ = 0x10  # Logs the CAN messages received within the CAN_Read function\nLOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions\n)\nTRACE_FILE_SINGLE = (\n    0x00  # A single file is written until it size reaches PAN_TRACE_SIZE\n)\nTRACE_FILE_SEGMENTED = (\n    0x01  # Traced data is distributed in several files with size PAN_TRACE_SIZE",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_READ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_READ = 0x10  # Logs the CAN messages received within the CAN_Read function\nLOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions\n)\nTRACE_FILE_SINGLE = (\n    0x00  # A single file is written until it size reaches PAN_TRACE_SIZE\n)\nTRACE_FILE_SEGMENTED = (\n    0x01  # Traced data is distributed in several files with size PAN_TRACE_SIZE\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOG_FUNCTION_ALL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOG_FUNCTION_ALL = (\n    0xFFFF  # Logs all possible information within the PCAN-Basic API functions\n)\nTRACE_FILE_SINGLE = (\n    0x00  # A single file is written until it size reaches PAN_TRACE_SIZE\n)\nTRACE_FILE_SEGMENTED = (\n    0x01  # Traced data is distributed in several files with size PAN_TRACE_SIZE\n)\nTRACE_FILE_DATE = 0x02  # Includes the date into the name of the trace file",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TRACE_FILE_SINGLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TRACE_FILE_SINGLE = (\n    0x00  # A single file is written until it size reaches PAN_TRACE_SIZE\n)\nTRACE_FILE_SEGMENTED = (\n    0x01  # Traced data is distributed in several files with size PAN_TRACE_SIZE\n)\nTRACE_FILE_DATE = 0x02  # Includes the date into the name of the trace file\nTRACE_FILE_TIME = 0x04  # Includes the start time into the name of the trace file\nTRACE_FILE_OVERWRITE = 0x80  # Causes the overwriting of available traces (same name)\nFEATURE_FD_CAPABLE = 0x01  # Device supports flexible data-rate (CAN-FD)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TRACE_FILE_SEGMENTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TRACE_FILE_SEGMENTED = (\n    0x01  # Traced data is distributed in several files with size PAN_TRACE_SIZE\n)\nTRACE_FILE_DATE = 0x02  # Includes the date into the name of the trace file\nTRACE_FILE_TIME = 0x04  # Includes the start time into the name of the trace file\nTRACE_FILE_OVERWRITE = 0x80  # Causes the overwriting of available traces (same name)\nFEATURE_FD_CAPABLE = 0x01  # Device supports flexible data-rate (CAN-FD)\nFEATURE_DELAY_CAPABLE = (\n    0x02  # Device supports a delay between sending frames (FPGA based USB devices)\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TRACE_FILE_DATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TRACE_FILE_DATE = 0x02  # Includes the date into the name of the trace file\nTRACE_FILE_TIME = 0x04  # Includes the start time into the name of the trace file\nTRACE_FILE_OVERWRITE = 0x80  # Causes the overwriting of available traces (same name)\nFEATURE_FD_CAPABLE = 0x01  # Device supports flexible data-rate (CAN-FD)\nFEATURE_DELAY_CAPABLE = (\n    0x02  # Device supports a delay between sending frames (FPGA based USB devices)\n)\nFEATURE_IO_CAPABLE = (\n    0x04  # Device supports I/O functionality for electronic circuits (USB-Chip devices)\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TRACE_FILE_TIME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TRACE_FILE_TIME = 0x04  # Includes the start time into the name of the trace file\nTRACE_FILE_OVERWRITE = 0x80  # Causes the overwriting of available traces (same name)\nFEATURE_FD_CAPABLE = 0x01  # Device supports flexible data-rate (CAN-FD)\nFEATURE_DELAY_CAPABLE = (\n    0x02  # Device supports a delay between sending frames (FPGA based USB devices)\n)\nFEATURE_IO_CAPABLE = (\n    0x04  # Device supports I/O functionality for electronic circuits (USB-Chip devices)\n)\nSERVICE_STATUS_STOPPED = 0x01  # The service is not running",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "TRACE_FILE_OVERWRITE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "TRACE_FILE_OVERWRITE = 0x80  # Causes the overwriting of available traces (same name)\nFEATURE_FD_CAPABLE = 0x01  # Device supports flexible data-rate (CAN-FD)\nFEATURE_DELAY_CAPABLE = (\n    0x02  # Device supports a delay between sending frames (FPGA based USB devices)\n)\nFEATURE_IO_CAPABLE = (\n    0x04  # Device supports I/O functionality for electronic circuits (USB-Chip devices)\n)\nSERVICE_STATUS_STOPPED = 0x01  # The service is not running\nSERVICE_STATUS_RUNNING = 0x04  # The service is running",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "FEATURE_FD_CAPABLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "FEATURE_FD_CAPABLE = 0x01  # Device supports flexible data-rate (CAN-FD)\nFEATURE_DELAY_CAPABLE = (\n    0x02  # Device supports a delay between sending frames (FPGA based USB devices)\n)\nFEATURE_IO_CAPABLE = (\n    0x04  # Device supports I/O functionality for electronic circuits (USB-Chip devices)\n)\nSERVICE_STATUS_STOPPED = 0x01  # The service is not running\nSERVICE_STATUS_RUNNING = 0x04  # The service is running\n# Other constants",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "FEATURE_DELAY_CAPABLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "FEATURE_DELAY_CAPABLE = (\n    0x02  # Device supports a delay between sending frames (FPGA based USB devices)\n)\nFEATURE_IO_CAPABLE = (\n    0x04  # Device supports I/O functionality for electronic circuits (USB-Chip devices)\n)\nSERVICE_STATUS_STOPPED = 0x01  # The service is not running\nSERVICE_STATUS_RUNNING = 0x04  # The service is running\n# Other constants\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "FEATURE_IO_CAPABLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "FEATURE_IO_CAPABLE = (\n    0x04  # Device supports I/O functionality for electronic circuits (USB-Chip devices)\n)\nSERVICE_STATUS_STOPPED = 0x01  # The service is not running\nSERVICE_STATUS_RUNNING = 0x04  # The service is running\n# Other constants\n#\nMAX_LENGTH_HARDWARE_NAME = (\n    33  # Maximum length of the name of a device: 32 characters + terminator\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "SERVICE_STATUS_STOPPED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "SERVICE_STATUS_STOPPED = 0x01  # The service is not running\nSERVICE_STATUS_RUNNING = 0x04  # The service is running\n# Other constants\n#\nMAX_LENGTH_HARDWARE_NAME = (\n    33  # Maximum length of the name of a device: 32 characters + terminator\n)\nMAX_LENGTH_VERSION_STRING = (\n    256  # Maximum length of a version string: 255 characters + terminator\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "SERVICE_STATUS_RUNNING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "SERVICE_STATUS_RUNNING = 0x04  # The service is running\n# Other constants\n#\nMAX_LENGTH_HARDWARE_NAME = (\n    33  # Maximum length of the name of a device: 32 characters + terminator\n)\nMAX_LENGTH_VERSION_STRING = (\n    256  # Maximum length of a version string: 255 characters + terminator\n)\n# PCAN message types",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "MAX_LENGTH_HARDWARE_NAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "MAX_LENGTH_HARDWARE_NAME = (\n    33  # Maximum length of the name of a device: 32 characters + terminator\n)\nMAX_LENGTH_VERSION_STRING = (\n    256  # Maximum length of a version string: 255 characters + terminator\n)\n# PCAN message types\n#\nPCAN_MESSAGE_STANDARD = TPCANMessageType(\n    0x00",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "MAX_LENGTH_VERSION_STRING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "MAX_LENGTH_VERSION_STRING = (\n    256  # Maximum length of a version string: 255 characters + terminator\n)\n# PCAN message types\n#\nPCAN_MESSAGE_STANDARD = TPCANMessageType(\n    0x00\n)  # The PCAN message is a CAN Standard Frame (11-bit identifier)\nPCAN_MESSAGE_RTR = TPCANMessageType(\n    0x01",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_STANDARD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_STANDARD = TPCANMessageType(\n    0x00\n)  # The PCAN message is a CAN Standard Frame (11-bit identifier)\nPCAN_MESSAGE_RTR = TPCANMessageType(\n    0x01\n)  # The PCAN message is a CAN Remote-Transfer-Request Frame\nPCAN_MESSAGE_EXTENDED = TPCANMessageType(\n    0x02\n)  # The PCAN message is a CAN Extended Frame (29-bit identifier)\nPCAN_MESSAGE_FD = TPCANMessageType(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_RTR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_RTR = TPCANMessageType(\n    0x01\n)  # The PCAN message is a CAN Remote-Transfer-Request Frame\nPCAN_MESSAGE_EXTENDED = TPCANMessageType(\n    0x02\n)  # The PCAN message is a CAN Extended Frame (29-bit identifier)\nPCAN_MESSAGE_FD = TPCANMessageType(\n    0x04\n)  # The PCAN message represents a FD frame in terms of CiA Specs\nPCAN_MESSAGE_BRS = TPCANMessageType(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_EXTENDED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_EXTENDED = TPCANMessageType(\n    0x02\n)  # The PCAN message is a CAN Extended Frame (29-bit identifier)\nPCAN_MESSAGE_FD = TPCANMessageType(\n    0x04\n)  # The PCAN message represents a FD frame in terms of CiA Specs\nPCAN_MESSAGE_BRS = TPCANMessageType(\n    0x08\n)  # The PCAN message represents a FD bit rate switch (CAN data at a higher bit rate)\nPCAN_MESSAGE_ESI = TPCANMessageType(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_FD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_FD = TPCANMessageType(\n    0x04\n)  # The PCAN message represents a FD frame in terms of CiA Specs\nPCAN_MESSAGE_BRS = TPCANMessageType(\n    0x08\n)  # The PCAN message represents a FD bit rate switch (CAN data at a higher bit rate)\nPCAN_MESSAGE_ESI = TPCANMessageType(\n    0x10\n)  # The PCAN message represents a FD error state indicator(CAN FD transmitter was error active)\nPCAN_MESSAGE_ECHO = TPCANMessageType(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_BRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_BRS = TPCANMessageType(\n    0x08\n)  # The PCAN message represents a FD bit rate switch (CAN data at a higher bit rate)\nPCAN_MESSAGE_ESI = TPCANMessageType(\n    0x10\n)  # The PCAN message represents a FD error state indicator(CAN FD transmitter was error active)\nPCAN_MESSAGE_ECHO = TPCANMessageType(\n    0x20\n)  # The PCAN message represents an echo CAN Frame\nPCAN_MESSAGE_ERRFRAME = TPCANMessageType(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_ESI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_ESI = TPCANMessageType(\n    0x10\n)  # The PCAN message represents a FD error state indicator(CAN FD transmitter was error active)\nPCAN_MESSAGE_ECHO = TPCANMessageType(\n    0x20\n)  # The PCAN message represents an echo CAN Frame\nPCAN_MESSAGE_ERRFRAME = TPCANMessageType(\n    0x40\n)  # The PCAN message represents an error frame\nPCAN_MESSAGE_STATUS = TPCANMessageType(",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_ECHO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_ECHO = TPCANMessageType(\n    0x20\n)  # The PCAN message represents an echo CAN Frame\nPCAN_MESSAGE_ERRFRAME = TPCANMessageType(\n    0x40\n)  # The PCAN message represents an error frame\nPCAN_MESSAGE_STATUS = TPCANMessageType(\n    0x80\n)  # The PCAN message represents a PCAN status message\n# LookUp Parameters",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_ERRFRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_ERRFRAME = TPCANMessageType(\n    0x40\n)  # The PCAN message represents an error frame\nPCAN_MESSAGE_STATUS = TPCANMessageType(\n    0x80\n)  # The PCAN message represents a PCAN status message\n# LookUp Parameters\n#\nLOOKUP_DEVICE_TYPE = (\n    b\"devicetype\"  # Lookup channel by Device type (see PCAN devices e.g. PCAN_USB)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MESSAGE_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MESSAGE_STATUS = TPCANMessageType(\n    0x80\n)  # The PCAN message represents a PCAN status message\n# LookUp Parameters\n#\nLOOKUP_DEVICE_TYPE = (\n    b\"devicetype\"  # Lookup channel by Device type (see PCAN devices e.g. PCAN_USB)\n)\nLOOKUP_DEVICE_ID = b\"deviceid\"  # Lookup channel by device id\nLOOKUP_CONTROLLER_NUMBER = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOOKUP_DEVICE_TYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOOKUP_DEVICE_TYPE = (\n    b\"devicetype\"  # Lookup channel by Device type (see PCAN devices e.g. PCAN_USB)\n)\nLOOKUP_DEVICE_ID = b\"deviceid\"  # Lookup channel by device id\nLOOKUP_CONTROLLER_NUMBER = (\n    b\"controllernumber\"  # Lookup channel by CAN controller 0-based index\n)\nLOOKUP_IP_ADDRESS = b\"ipaddress\"  # Lookup channel by IP address (LAN channels only)\n# Frame Type / Initialization Mode\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOOKUP_DEVICE_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOOKUP_DEVICE_ID = b\"deviceid\"  # Lookup channel by device id\nLOOKUP_CONTROLLER_NUMBER = (\n    b\"controllernumber\"  # Lookup channel by CAN controller 0-based index\n)\nLOOKUP_IP_ADDRESS = b\"ipaddress\"  # Lookup channel by IP address (LAN channels only)\n# Frame Type / Initialization Mode\n#\nPCAN_MODE_STANDARD = PCAN_MESSAGE_STANDARD\nPCAN_MODE_EXTENDED = PCAN_MESSAGE_EXTENDED\n# Baud rate codes = BTR0/BTR1 register values for the CAN controller.",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOOKUP_CONTROLLER_NUMBER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOOKUP_CONTROLLER_NUMBER = (\n    b\"controllernumber\"  # Lookup channel by CAN controller 0-based index\n)\nLOOKUP_IP_ADDRESS = b\"ipaddress\"  # Lookup channel by IP address (LAN channels only)\n# Frame Type / Initialization Mode\n#\nPCAN_MODE_STANDARD = PCAN_MESSAGE_STANDARD\nPCAN_MODE_EXTENDED = PCAN_MESSAGE_EXTENDED\n# Baud rate codes = BTR0/BTR1 register values for the CAN controller.\n# You can define your own Baud rate with the BTROBTR1 register.",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "LOOKUP_IP_ADDRESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "LOOKUP_IP_ADDRESS = b\"ipaddress\"  # Lookup channel by IP address (LAN channels only)\n# Frame Type / Initialization Mode\n#\nPCAN_MODE_STANDARD = PCAN_MESSAGE_STANDARD\nPCAN_MODE_EXTENDED = PCAN_MESSAGE_EXTENDED\n# Baud rate codes = BTR0/BTR1 register values for the CAN controller.\n# You can define your own Baud rate with the BTROBTR1 register.\n# Take a look at www.peak-system.com for our free software \"BAUDTOOL\"\n# to calculate the BTROBTR1 register for every bit rate and sample point.\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MODE_STANDARD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MODE_STANDARD = PCAN_MESSAGE_STANDARD\nPCAN_MODE_EXTENDED = PCAN_MESSAGE_EXTENDED\n# Baud rate codes = BTR0/BTR1 register values for the CAN controller.\n# You can define your own Baud rate with the BTROBTR1 register.\n# Take a look at www.peak-system.com for our free software \"BAUDTOOL\"\n# to calculate the BTROBTR1 register for every bit rate and sample point.\n#\nPCAN_BAUD_1M = TPCANBaudrate(0x0014)  #   1 MBit/s\nPCAN_BAUD_800K = TPCANBaudrate(0x0016)  # 800 kBit/s\nPCAN_BAUD_500K = TPCANBaudrate(0x001C)  # 500 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_MODE_EXTENDED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_MODE_EXTENDED = PCAN_MESSAGE_EXTENDED\n# Baud rate codes = BTR0/BTR1 register values for the CAN controller.\n# You can define your own Baud rate with the BTROBTR1 register.\n# Take a look at www.peak-system.com for our free software \"BAUDTOOL\"\n# to calculate the BTROBTR1 register for every bit rate and sample point.\n#\nPCAN_BAUD_1M = TPCANBaudrate(0x0014)  #   1 MBit/s\nPCAN_BAUD_800K = TPCANBaudrate(0x0016)  # 800 kBit/s\nPCAN_BAUD_500K = TPCANBaudrate(0x001C)  # 500 kBit/s\nPCAN_BAUD_250K = TPCANBaudrate(0x011C)  # 250 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_1M",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_1M = TPCANBaudrate(0x0014)  #   1 MBit/s\nPCAN_BAUD_800K = TPCANBaudrate(0x0016)  # 800 kBit/s\nPCAN_BAUD_500K = TPCANBaudrate(0x001C)  # 500 kBit/s\nPCAN_BAUD_250K = TPCANBaudrate(0x011C)  # 250 kBit/s\nPCAN_BAUD_125K = TPCANBaudrate(0x031C)  # 125 kBit/s\nPCAN_BAUD_100K = TPCANBaudrate(0x432F)  # 100 kBit/s\nPCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_800K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_800K = TPCANBaudrate(0x0016)  # 800 kBit/s\nPCAN_BAUD_500K = TPCANBaudrate(0x001C)  # 500 kBit/s\nPCAN_BAUD_250K = TPCANBaudrate(0x011C)  # 250 kBit/s\nPCAN_BAUD_125K = TPCANBaudrate(0x031C)  # 125 kBit/s\nPCAN_BAUD_100K = TPCANBaudrate(0x432F)  # 100 kBit/s\nPCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_500K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_500K = TPCANBaudrate(0x001C)  # 500 kBit/s\nPCAN_BAUD_250K = TPCANBaudrate(0x011C)  # 250 kBit/s\nPCAN_BAUD_125K = TPCANBaudrate(0x031C)  # 125 kBit/s\nPCAN_BAUD_100K = TPCANBaudrate(0x432F)  # 100 kBit/s\nPCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_250K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_250K = TPCANBaudrate(0x011C)  # 250 kBit/s\nPCAN_BAUD_125K = TPCANBaudrate(0x031C)  # 125 kBit/s\nPCAN_BAUD_100K = TPCANBaudrate(0x432F)  # 100 kBit/s\nPCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_125K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_125K = TPCANBaudrate(0x031C)  # 125 kBit/s\nPCAN_BAUD_100K = TPCANBaudrate(0x432F)  # 100 kBit/s\nPCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_100K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_100K = TPCANBaudrate(0x432F)  # 100 kBit/s\nPCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_95K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_95K = TPCANBaudrate(0xC34E)  #  95,238 kBit/s\nPCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_83K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_83K = TPCANBaudrate(0x852B)  #  83,333 kBit/s\nPCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_50K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_50K = TPCANBaudrate(0x472F)  #  50 kBit/s\nPCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.\n#    * Each pair of parameter/value must be separated using ','.",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_47K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_47K = TPCANBaudrate(0x1414)  #  47,619 kBit/s\nPCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.\n#    * Each pair of parameter/value must be separated using ','.\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_33K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_33K = TPCANBaudrate(0x8B2F)  #  33,333 kBit/s\nPCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.\n#    * Each pair of parameter/value must be separated using ','.\n#\n# Example:",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_20K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_20K = TPCANBaudrate(0x532F)  #  20 kBit/s\nPCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.\n#    * Each pair of parameter/value must be separated using ','.\n#\n# Example:\n#    f_clock=80000000,nom_brp=10,nom_tseg1=5,nom_tseg2=2,nom_sjw=1,data_brp=4,data_tseg1=7,data_tseg2=2,data_sjw=1",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_10K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_10K = TPCANBaudrate(0x672F)  #  10 kBit/s\nPCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.\n#    * Each pair of parameter/value must be separated using ','.\n#\n# Example:\n#    f_clock=80000000,nom_brp=10,nom_tseg1=5,nom_tseg2=2,nom_sjw=1,data_brp=4,data_tseg1=7,data_tseg2=2,data_sjw=1\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BAUD_5K",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BAUD_5K = TPCANBaudrate(0x7F7F)  #   5 kBit/s\n# Represents the configuration for a CAN bit rate\n# Note:\n#    * Each parameter and its value must be separated with a '='.\n#    * Each pair of parameter/value must be separated using ','.\n#\n# Example:\n#    f_clock=80000000,nom_brp=10,nom_tseg1=5,nom_tseg2=2,nom_sjw=1,data_brp=4,data_tseg1=7,data_tseg2=2,data_sjw=1\n#\nPCAN_BR_CLOCK = TPCANBitrateFD(b\"f_clock\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_CLOCK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_CLOCK = TPCANBitrateFD(b\"f_clock\")\nPCAN_BR_CLOCK_MHZ = TPCANBitrateFD(b\"f_clock_mhz\")\nPCAN_BR_NOM_BRP = TPCANBitrateFD(b\"nom_brp\")\nPCAN_BR_NOM_TSEG1 = TPCANBitrateFD(b\"nom_tseg1\")\nPCAN_BR_NOM_TSEG2 = TPCANBitrateFD(b\"nom_tseg2\")\nPCAN_BR_NOM_SJW = TPCANBitrateFD(b\"nom_sjw\")\nPCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_CLOCK_MHZ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_CLOCK_MHZ = TPCANBitrateFD(b\"f_clock_mhz\")\nPCAN_BR_NOM_BRP = TPCANBitrateFD(b\"nom_brp\")\nPCAN_BR_NOM_TSEG1 = TPCANBitrateFD(b\"nom_tseg1\")\nPCAN_BR_NOM_TSEG2 = TPCANBitrateFD(b\"nom_tseg2\")\nPCAN_BR_NOM_SJW = TPCANBitrateFD(b\"nom_sjw\")\nPCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_NOM_BRP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_NOM_BRP = TPCANBitrateFD(b\"nom_brp\")\nPCAN_BR_NOM_TSEG1 = TPCANBitrateFD(b\"nom_tseg1\")\nPCAN_BR_NOM_TSEG2 = TPCANBitrateFD(b\"nom_tseg2\")\nPCAN_BR_NOM_SJW = TPCANBitrateFD(b\"nom_sjw\")\nPCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_NOM_TSEG1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_NOM_TSEG1 = TPCANBitrateFD(b\"nom_tseg1\")\nPCAN_BR_NOM_TSEG2 = TPCANBitrateFD(b\"nom_tseg2\")\nPCAN_BR_NOM_SJW = TPCANBitrateFD(b\"nom_sjw\")\nPCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_NOM_TSEG2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_NOM_TSEG2 = TPCANBitrateFD(b\"nom_tseg2\")\nPCAN_BR_NOM_SJW = TPCANBitrateFD(b\"nom_sjw\")\nPCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_NOM_SJW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_NOM_SJW = TPCANBitrateFD(b\"nom_sjw\")\nPCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_NOM_SAMPLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_NOM_SAMPLE = TPCANBitrateFD(b\"nom_sam\")\nPCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_DATA_BRP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_DATA_BRP = TPCANBitrateFD(b\"data_brp\")\nPCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_DATA_TSEG1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_DATA_TSEG1 = TPCANBitrateFD(b\"data_tseg1\")\nPCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_DATA_TSEG2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_DATA_TSEG2 = TPCANBitrateFD(b\"data_tseg2\")\nPCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_DATA_SJW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_DATA_SJW = TPCANBitrateFD(b\"data_sjw\")\nPCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BR_DATA_SAMPLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BR_DATA_SAMPLE = TPCANBitrateFD(b\"data_ssp_offset\")\n# Supported Non-PnP Hardware types\n#\nPCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_ISA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_ISA = TPCANType(0x01)  # PCAN-ISA 82C200\nPCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_ISA_SJA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_ISA_SJA = TPCANType(0x09)  # PCAN-ISA SJA1000\nPCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_ISA_PHYTEC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_ISA_PHYTEC = TPCANType(0x04)  # PHYTEC ISA\nPCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",\n    PCAN_ERROR_OVERRUN: \"OVERRUN\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_DNG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_DNG = TPCANType(0x02)  # PCAN-Dongle 82C200\nPCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",\n    PCAN_ERROR_OVERRUN: \"OVERRUN\",\n    PCAN_ERROR_BUSLIGHT: \"BUSLIGHT\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_DNG_EPP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_DNG_EPP = TPCANType(0x03)  # PCAN-Dongle EPP 82C200\nPCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",\n    PCAN_ERROR_OVERRUN: \"OVERRUN\",\n    PCAN_ERROR_BUSLIGHT: \"BUSLIGHT\",\n    PCAN_ERROR_BUSHEAVY: \"BUSHEAVY\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_DNG_SJA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_DNG_SJA = TPCANType(0x05)  # PCAN-Dongle SJA1000\nPCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",\n    PCAN_ERROR_OVERRUN: \"OVERRUN\",\n    PCAN_ERROR_BUSLIGHT: \"BUSLIGHT\",\n    PCAN_ERROR_BUSHEAVY: \"BUSHEAVY\",\n    PCAN_ERROR_BUSWARNING: \"BUSWARNING\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_TYPE_DNG_SJA_EPP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_TYPE_DNG_SJA_EPP = TPCANType(0x06)  # PCAN-Dongle EPP SJA1000\n# string description of the error codes\nPCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",\n    PCAN_ERROR_OVERRUN: \"OVERRUN\",\n    PCAN_ERROR_BUSLIGHT: \"BUSLIGHT\",\n    PCAN_ERROR_BUSHEAVY: \"BUSHEAVY\",\n    PCAN_ERROR_BUSWARNING: \"BUSWARNING\",\n    PCAN_ERROR_BUSPASSIVE: \"BUSPASSIVE\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_DICT_STATUS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_DICT_STATUS = {\n    PCAN_ERROR_OK: \"OK\",\n    PCAN_ERROR_XMTFULL: \"XMTFULL\",\n    PCAN_ERROR_OVERRUN: \"OVERRUN\",\n    PCAN_ERROR_BUSLIGHT: \"BUSLIGHT\",\n    PCAN_ERROR_BUSHEAVY: \"BUSHEAVY\",\n    PCAN_ERROR_BUSWARNING: \"BUSWARNING\",\n    PCAN_ERROR_BUSPASSIVE: \"BUSPASSIVE\",\n    PCAN_ERROR_BUSOFF: \"BUSOFF\",\n    PCAN_ERROR_ANYBUSERR: \"ANYBUSERR\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_BITRATES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_BITRATES = {\n    1000000: PCAN_BAUD_1M,\n    800000: PCAN_BAUD_800K,\n    500000: PCAN_BAUD_500K,\n    250000: PCAN_BAUD_250K,\n    125000: PCAN_BAUD_125K,\n    100000: PCAN_BAUD_100K,\n    95000: PCAN_BAUD_95K,\n    83000: PCAN_BAUD_83K,\n    50000: PCAN_BAUD_50K,",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_FD_PARAMETER_LIST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_FD_PARAMETER_LIST = (\n    \"nom_brp\",\n    \"nom_tseg1\",\n    \"nom_tseg2\",\n    \"nom_sjw\",\n    \"data_brp\",\n    \"data_tseg1\",\n    \"data_tseg2\",\n    \"data_sjw\",\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PCAN_CHANNEL_NAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "PCAN_CHANNEL_NAMES = {\n    \"PCAN_NONEBUS\": PCAN_NONEBUS,\n    \"PCAN_ISABUS1\": PCAN_ISABUS1,\n    \"PCAN_ISABUS2\": PCAN_ISABUS2,\n    \"PCAN_ISABUS3\": PCAN_ISABUS3,\n    \"PCAN_ISABUS4\": PCAN_ISABUS4,\n    \"PCAN_ISABUS5\": PCAN_ISABUS5,\n    \"PCAN_ISABUS6\": PCAN_ISABUS6,\n    \"PCAN_ISABUS7\": PCAN_ISABUS7,\n    \"PCAN_ISABUS8\": PCAN_ISABUS8,",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "VALID_PCAN_CAN_CLOCKS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "VALID_PCAN_CAN_CLOCKS = [8_000_000]\nVALID_PCAN_FD_CLOCKS = [\n    20_000_000,\n    24_000_000,\n    30_000_000,\n    40_000_000,\n    60_000_000,\n    80_000_000,\n]\n# ///////////////////////////////////////////////////////////",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "VALID_PCAN_FD_CLOCKS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "peekOfCode": "VALID_PCAN_FD_CLOCKS = [\n    20_000_000,\n    24_000_000,\n    30_000_000,\n    40_000_000,\n    60_000_000,\n    80_000_000,\n]\n# ///////////////////////////////////////////////////////////\n# PCAN-Basic API function declarations",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.basic",
        "documentation": {}
    },
    {
        "label": "PcanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "class PcanBus(BusABC):\n    def __init__(\n        self,\n        channel: str = \"PCAN_USBBUS1\",\n        device_id: Optional[int] = None,\n        state: BusState = BusState.ACTIVE,\n        timing: Optional[Union[BitTiming, BitTimingFd]] = None,\n        bitrate: int = 500000,\n        receive_own_messages: bool = False,\n        **kwargs: Any,",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "PcanError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "class PcanError(CanError):\n    \"\"\"A generic error on a PCAN bus.\"\"\"\nclass PcanCanOperationError(CanOperationError, PcanError):\n    \"\"\"Like :class:`can.exceptions.CanOperationError`, but specific to Pcan.\"\"\"\nclass PcanCanInitializationError(CanInitializationError, PcanError):\n    \"\"\"Like :class:`can.exceptions.CanInitializationError`, but specific to Pcan.\"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "PcanCanOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "class PcanCanOperationError(CanOperationError, PcanError):\n    \"\"\"Like :class:`can.exceptions.CanOperationError`, but specific to Pcan.\"\"\"\nclass PcanCanInitializationError(CanInitializationError, PcanError):\n    \"\"\"Like :class:`can.exceptions.CanInitializationError`, but specific to Pcan.\"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "PcanCanInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "class PcanCanInitializationError(CanInitializationError, PcanError):\n    \"\"\"Like :class:`can.exceptions.CanInitializationError`, but specific to Pcan.\"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "log = logging.getLogger(\"can.pcan\")\nMIN_PCAN_API_VERSION = version.parse(\"4.2.0\")\ntry:\n    # use the \"uptime\" library if available\n    import uptime\n    # boottime() and fromtimestamp() are timezone offset, so the difference is not.\n    if uptime.boottime() is None:\n        boottimeEpoch = 0\n    else:\n        boottimeEpoch = uptime.boottime().timestamp()",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "MIN_PCAN_API_VERSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "MIN_PCAN_API_VERSION = version.parse(\"4.2.0\")\ntry:\n    # use the \"uptime\" library if available\n    import uptime\n    # boottime() and fromtimestamp() are timezone offset, so the difference is not.\n    if uptime.boottime() is None:\n        boottimeEpoch = 0\n    else:\n        boottimeEpoch = uptime.boottime().timestamp()\nexcept ImportError:",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "HAS_EVENTS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "description": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "peekOfCode": "HAS_EVENTS = False\nif IS_WINDOWS:\n    try:\n        # Try builtin Python 3 Windows API\n        from _overlapped import CreateEvent\n        from _winapi import INFINITE, WAIT_OBJECT_0, WaitForSingleObject\n        HAS_EVENTS = True\n    except ImportError:\n        pass\nelif IS_LINUX:",
        "detail": "dbus-serialbattery.ext.can.interfaces.pcan.pcan",
        "documentation": {}
    },
    {
        "label": "SeeedBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.seeedstudio.seeedstudio",
        "description": "dbus-serialbattery.ext.can.interfaces.seeedstudio.seeedstudio",
        "peekOfCode": "class SeeedBus(BusABC):\n    \"\"\"\n    Enable basic can communication over a USB-CAN-Analyzer device.\n    \"\"\"\n    BITRATE = {\n        1000000: 0x01,\n        800000: 0x02,\n        500000: 0x03,\n        400000: 0x04,\n        250000: 0x05,",
        "detail": "dbus-serialbattery.ext.can.interfaces.seeedstudio.seeedstudio",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.seeedstudio.seeedstudio",
        "description": "dbus-serialbattery.ext.can.interfaces.seeedstudio.seeedstudio",
        "peekOfCode": "logger = logging.getLogger(\"seeedbus\")\ntry:\n    import serial\nexcept ImportError:\n    logger.warning(\n        \"You won't be able to use the serial can backend without \"\n        \"the serial module installed!\"\n    )\n    serial = None\nclass SeeedBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.seeedstudio.seeedstudio",
        "documentation": {}
    },
    {
        "label": "SerialBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.serial.serial_can",
        "description": "dbus-serialbattery.ext.can.interfaces.serial.serial_can",
        "peekOfCode": "class SerialBus(BusABC):\n    \"\"\"\n    Enable basic can communication over a serial device.\n    .. note:: See :meth:`~_recv_internal` for some special semantics.\n    \"\"\"\n    def __init__(\n        self,\n        channel: str,\n        baudrate: int = 115200,\n        timeout: float = 0.1,",
        "detail": "dbus-serialbattery.ext.can.interfaces.serial.serial_can",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.serial.serial_can",
        "description": "dbus-serialbattery.ext.can.interfaces.serial.serial_can",
        "peekOfCode": "logger = logging.getLogger(\"can.serial\")\ntry:\n    import serial\nexcept ImportError:\n    logger.warning(\n        \"You won't be able to use the serial can backend without \"\n        \"the serial module installed!\"\n    )\n    serial = None\ntry:",
        "detail": "dbus-serialbattery.ext.can.interfaces.serial.serial_can",
        "documentation": {}
    },
    {
        "label": "SO_TIMESTAMPNS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SO_TIMESTAMPNS = 35\nCAN_ERR_FLAG = 0x20000000\nCAN_RTR_FLAG = 0x40000000\nCAN_EFF_FLAG = 0x80000000\n# BCM opcodes\nCAN_BCM_TX_SETUP = 1\nCAN_BCM_TX_DELETE = 2\nCAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_ERR_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_ERR_FLAG = 0x20000000\nCAN_RTR_FLAG = 0x40000000\nCAN_EFF_FLAG = 0x80000000\n# BCM opcodes\nCAN_BCM_TX_SETUP = 1\nCAN_BCM_TX_DELETE = 2\nCAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001\nSTARTTIMER = 0x0002",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RTR_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RTR_FLAG = 0x40000000\nCAN_EFF_FLAG = 0x80000000\n# BCM opcodes\nCAN_BCM_TX_SETUP = 1\nCAN_BCM_TX_DELETE = 2\nCAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001\nSTARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_EFF_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_EFF_FLAG = 0x80000000\n# BCM opcodes\nCAN_BCM_TX_SETUP = 1\nCAN_BCM_TX_DELETE = 2\nCAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001\nSTARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BCM_TX_SETUP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_BCM_TX_SETUP = 1\nCAN_BCM_TX_DELETE = 2\nCAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001\nSTARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BCM_TX_DELETE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_BCM_TX_DELETE = 2\nCAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001\nSTARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BCM_TX_READ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_BCM_TX_READ = 3\n# BCM flags\nSETTIMER = 0x0001\nSTARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SETTIMER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SETTIMER = 0x0001\nSTARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "STARTTIMER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "STARTTIMER = 0x0002\nTX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "TX_COUNTEVT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "TX_COUNTEVT = 0x0004\nTX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "TX_ANNOUNCE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "TX_ANNOUNCE = 0x0008\nTX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "TX_CP_CAN_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "TX_CP_CAN_ID = 0x0010\nRX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "RX_FILTER_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "RX_FILTER_ID = 0x0020\nRX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "RX_CHECK_DLC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "RX_CHECK_DLC = 0x0040\nRX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "RX_NO_AUTOTIMER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "RX_NO_AUTOTIMER = 0x0080\nRX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "RX_ANNOUNCE_RESUME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "RX_ANNOUNCE_RESUME = 0x0100\nTX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "TX_RESET_MULTI_IDX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "TX_RESET_MULTI_IDX = 0x0200\nRX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "RX_RTR_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "RX_RTR_FRAME = 0x0400\nCAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_FD_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_FD_FRAME = 0x0800\nCAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RAW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RAW = 1\nCAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_BCM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_BCM = 2\nSOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SOL_CAN_BASE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SOL_CAN_BASE = 100\nSOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SOL_CAN_RAW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SOL_CAN_RAW = SOL_CAN_BASE + CAN_RAW\nCAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RAW_FILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RAW_FILTER = 1\nCAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RAW_ERR_FILTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RAW_ERR_FILTER = 2\nCAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RAW_LOOPBACK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RAW_LOOPBACK = 3\nCAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RAW_RECV_OWN_MSGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RAW_RECV_OWN_MSGS = 4\nCAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CAN_RAW_FD_FRAMES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CAN_RAW_FD_FRAMES = 5\nMSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "MSK_ARBID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "MSK_ARBID = 0x1FFFFFFF\nMSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "MSK_FLAGS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "MSK_FLAGS = 0xE0000000\nPF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "PF_CAN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "PF_CAN = 29\nSOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SOCK_RAW",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SOCK_RAW = 3\nSOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SOCK_DGRAM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SOCK_DGRAM = 2\nAF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "AF_CAN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "AF_CAN = PF_CAN\nSIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SIOCGIFNAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SIOCGIFNAME = 0x8910\nSIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SIOCGIFINDEX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SIOCGIFINDEX = 0x8933\nSIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "SIOCGSTAMP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "SIOCGSTAMP = 0x8906\nEXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "EXTFLG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "EXTFLG = 0x0004\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CANFD_BRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CANFD_BRS = 0x01\nCANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CANFD_ESI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CANFD_ESI = 0x02\nCANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CANFD_MTU",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "CANFD_MTU = 72\nSTD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "STD_ACCEPTANCE_MASK_ALL_BITS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "STD_ACCEPTANCE_MASK_ALL_BITS = 2**11 - 1\nMAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "MAX_11_BIT_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "MAX_11_BIT_ID = STD_ACCEPTANCE_MASK_ALL_BITS\nEXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "EXT_ACCEPTANCE_MASK_ALL_BITS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "EXT_ACCEPTANCE_MASK_ALL_BITS = 2**29 - 1\nMAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "MAX_29_BIT_ID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "peekOfCode": "MAX_29_BIT_ID = EXT_ACCEPTANCE_MASK_ALL_BITS",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.constants",
        "documentation": {}
    },
    {
        "label": "CyclicSendTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "class CyclicSendTask(\n    LimitedDurationCyclicSendTaskABC, ModifiableCyclicTaskABC, RestartableCyclicTaskABC\n):\n    \"\"\"\n    A SocketCAN cyclic send task supports:\n        - setting of a task duration\n        - modifying the data\n        - stopping then subsequent restarting of the task\n    \"\"\"\n    def __init__(",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "MultiRateCyclicSendTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "class MultiRateCyclicSendTask(CyclicSendTask):\n    \"\"\"Exposes more of the full power of the TX_SETUP opcode.\"\"\"\n    def __init__(\n        self,\n        channel: socket.socket,\n        task_id: int,\n        messages: Sequence[Message],\n        count: int,\n        initial_period: float,\n        subsequent_period: float,",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "SocketcanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "class SocketcanBus(BusABC):  # pylint: disable=abstract-method\n    \"\"\"A SocketCAN interface to CAN.\n    It implements :meth:`can.BusABC._detect_available_configs` to search for\n    available interfaces.\n    \"\"\"\n    def __init__(\n        self,\n        channel: str = \"\",\n        receive_own_messages: bool = False,\n        local_loopback: bool = True,",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "bcm_header_factory",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def bcm_header_factory(\n    fields: List[Tuple[str, Union[Type[ctypes.c_uint32], Type[ctypes.c_long]]]],\n    alignment: int = 8,\n):\n    curr_stride = 0\n    results: List[\n        Tuple[\n            str, Union[Type[ctypes.c_uint8], Type[ctypes.c_uint32], Type[ctypes.c_long]]\n        ]\n    ] = []",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "build_can_frame",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def build_can_frame(msg: Message) -> bytes:\n    \"\"\"CAN frame packing/unpacking (see 'struct can_frame' in <linux/can.h>)\n    /**\n     * struct can_frame - basic CAN frame structure\n     * @can_id:  the CAN ID of the frame and CAN_*_FLAG flags, see above.\n     * @can_dlc: the data length field of the CAN frame\n     * @data:    the CAN frame payload.\n     */\n    struct can_frame {\n        canid_t can_id;  /* 32 bit CAN_ID + EFF/RTR/ERR flags */",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "build_bcm_header",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def build_bcm_header(\n    opcode: int,\n    flags: int,\n    count: int,\n    ival1_seconds: int,\n    ival1_usec: int,\n    ival2_seconds: int,\n    ival2_usec: int,\n    can_id: int,\n    nframes: int,",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "build_bcm_tx_delete_header",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def build_bcm_tx_delete_header(can_id: int, flags: int) -> bytes:\n    opcode = constants.CAN_BCM_TX_DELETE\n    return build_bcm_header(opcode, flags, 0, 0, 0, 0, 0, can_id, 1)\ndef build_bcm_transmit_header(\n    can_id: int,\n    count: int,\n    initial_period: float,\n    subsequent_period: float,\n    msg_flags: int,\n    nframes: int = 1,",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "build_bcm_transmit_header",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def build_bcm_transmit_header(\n    can_id: int,\n    count: int,\n    initial_period: float,\n    subsequent_period: float,\n    msg_flags: int,\n    nframes: int = 1,\n) -> bytes:\n    opcode = constants.CAN_BCM_TX_SETUP\n    flags = msg_flags | constants.SETTIMER | constants.STARTTIMER",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "build_bcm_update_header",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def build_bcm_update_header(can_id: int, msg_flags: int, nframes: int = 1) -> bytes:\n    return build_bcm_header(\n        constants.CAN_BCM_TX_SETUP, msg_flags, 0, 0, 0, 0, 0, can_id, nframes\n    )\ndef dissect_can_frame(frame: bytes) -> Tuple[int, int, int, bytes]:\n    can_id, can_dlc, flags = CAN_FRAME_HEADER_STRUCT.unpack_from(frame)\n    if len(frame) != constants.CANFD_MTU:\n        # Flags not valid in non-FD frames\n        flags = 0\n    return can_id, can_dlc, flags, frame[8 : 8 + can_dlc]",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "dissect_can_frame",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def dissect_can_frame(frame: bytes) -> Tuple[int, int, int, bytes]:\n    can_id, can_dlc, flags = CAN_FRAME_HEADER_STRUCT.unpack_from(frame)\n    if len(frame) != constants.CANFD_MTU:\n        # Flags not valid in non-FD frames\n        flags = 0\n    return can_id, can_dlc, flags, frame[8 : 8 + can_dlc]\ndef create_bcm_socket(channel: str) -> socket.socket:\n    \"\"\"create a broadcast manager socket and connect to the given interface\"\"\"\n    s = socket.socket(constants.PF_CAN, socket.SOCK_DGRAM, constants.CAN_BCM)\n    s.connect((channel,))",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "create_bcm_socket",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def create_bcm_socket(channel: str) -> socket.socket:\n    \"\"\"create a broadcast manager socket and connect to the given interface\"\"\"\n    s = socket.socket(constants.PF_CAN, socket.SOCK_DGRAM, constants.CAN_BCM)\n    s.connect((channel,))\n    return s\ndef send_bcm(bcm_socket: socket.socket, data: bytes) -> int:\n    \"\"\"\n    Send raw frame to a BCM socket and handle errors.\n    \"\"\"\n    try:",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "send_bcm",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def send_bcm(bcm_socket: socket.socket, data: bytes) -> int:\n    \"\"\"\n    Send raw frame to a BCM socket and handle errors.\n    \"\"\"\n    try:\n        return bcm_socket.send(data)\n    except OSError as error:\n        base = f\"Couldn't send CAN BCM frame due to OS Error: {error.strerror}\"\n        if error.errno == errno.EINVAL:\n            specific_message = \" You are probably referring to a non-existing frame.\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "create_socket",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def create_socket() -> socket.socket:\n    \"\"\"Creates a raw CAN socket. The socket will\n    be returned unbound to any interface.\n    \"\"\"\n    sock = socket.socket(constants.PF_CAN, socket.SOCK_RAW, constants.CAN_RAW)\n    log.info(\"Created a socket\")\n    return sock\ndef bind_socket(sock: socket.socket, channel: str = \"can0\") -> None:\n    \"\"\"\n    Binds the given socket to the given interface.",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "bind_socket",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def bind_socket(sock: socket.socket, channel: str = \"can0\") -> None:\n    \"\"\"\n    Binds the given socket to the given interface.\n    :param sock:\n        The socket to be bound\n    :param channel:\n        The channel / interface to bind to\n    :raises OSError:\n        If the specified interface isn't found.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "capture_message",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "def capture_message(\n    sock: socket.socket, get_channel: bool = False\n) -> Optional[Message]:\n    \"\"\"\n    Captures a message from given socket.\n    :param sock:\n        The socket to read a message from.\n    :param get_channel:\n        Find out which channel the message comes from.\n    :return: The received message, or None on failure.",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "log = logging.getLogger(__name__)\nlog_tx = log.getChild(\"tx\")\nlog_rx = log.getChild(\"rx\")\ntry:\n    from socket import CMSG_SPACE\n    CMSG_SPACE_available = True\nexcept ImportError:\n    CMSG_SPACE_available = False\n    log.error(\"socket.CMSG_SPACE not available on this platform\")\n# Constants needed for precise handling of timestamps",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "log_tx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "log_tx = log.getChild(\"tx\")\nlog_rx = log.getChild(\"rx\")\ntry:\n    from socket import CMSG_SPACE\n    CMSG_SPACE_available = True\nexcept ImportError:\n    CMSG_SPACE_available = False\n    log.error(\"socket.CMSG_SPACE not available on this platform\")\n# Constants needed for precise handling of timestamps\nRECEIVED_TIMESTAMP_STRUCT = struct.Struct(\"@ll\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "log_rx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "log_rx = log.getChild(\"rx\")\ntry:\n    from socket import CMSG_SPACE\n    CMSG_SPACE_available = True\nexcept ImportError:\n    CMSG_SPACE_available = False\n    log.error(\"socket.CMSG_SPACE not available on this platform\")\n# Constants needed for precise handling of timestamps\nRECEIVED_TIMESTAMP_STRUCT = struct.Struct(\"@ll\")\nRECEIVED_ANCILLARY_BUFFER_SIZE = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "RECEIVED_TIMESTAMP_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "RECEIVED_TIMESTAMP_STRUCT = struct.Struct(\"@ll\")\nRECEIVED_ANCILLARY_BUFFER_SIZE = (\n    CMSG_SPACE(RECEIVED_TIMESTAMP_STRUCT.size) if CMSG_SPACE_available else 0\n)\n# Setup BCM struct\ndef bcm_header_factory(\n    fields: List[Tuple[str, Union[Type[ctypes.c_uint32], Type[ctypes.c_long]]]],\n    alignment: int = 8,\n):\n    curr_stride = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "RECEIVED_ANCILLARY_BUFFER_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "RECEIVED_ANCILLARY_BUFFER_SIZE = (\n    CMSG_SPACE(RECEIVED_TIMESTAMP_STRUCT.size) if CMSG_SPACE_available else 0\n)\n# Setup BCM struct\ndef bcm_header_factory(\n    fields: List[Tuple[str, Union[Type[ctypes.c_uint32], Type[ctypes.c_long]]]],\n    alignment: int = 8,\n):\n    curr_stride = 0\n    results: List[",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "BcmMsgHead",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "BcmMsgHead = bcm_header_factory(\n    fields=[\n        (\"opcode\", ctypes.c_uint32),\n        (\"flags\", ctypes.c_uint32),\n        (\"count\", ctypes.c_uint32),\n        (\"ival1_tv_sec\", ctypes.c_long),\n        (\"ival1_tv_usec\", ctypes.c_long),\n        (\"ival2_tv_sec\", ctypes.c_long),\n        (\"ival2_tv_usec\", ctypes.c_long),\n        (\"can_id\", ctypes.c_uint32),",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "CAN_FRAME_HEADER_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "peekOfCode": "CAN_FRAME_HEADER_STRUCT = struct.Struct(\"=IBB2x\")\ndef build_can_frame(msg: Message) -> bytes:\n    \"\"\"CAN frame packing/unpacking (see 'struct can_frame' in <linux/can.h>)\n    /**\n     * struct can_frame - basic CAN frame structure\n     * @can_id:  the CAN ID of the frame and CAN_*_FLAG flags, see above.\n     * @can_dlc: the data length field of the CAN frame\n     * @data:    the CAN frame payload.\n     */\n    struct can_frame {",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.socketcan",
        "documentation": {}
    },
    {
        "label": "pack_filters",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "peekOfCode": "def pack_filters(can_filters: Optional[typechecking.CanFilters] = None) -> bytes:\n    if can_filters is None:\n        # Pass all messages\n        can_filters = [{\"can_id\": 0, \"can_mask\": 0}]\n    can_filter_fmt = f\"={2 * len(can_filters)}I\"\n    filter_data = []\n    for can_filter in can_filters:\n        can_id = can_filter[\"can_id\"]\n        can_mask = can_filter[\"can_mask\"]\n        if \"extended\" in can_filter:",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "documentation": {}
    },
    {
        "label": "find_available_interfaces",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "peekOfCode": "def find_available_interfaces() -> List[str]:\n    \"\"\"Returns the names of all open can/vcan interfaces\n    The function calls the ``ip link list`` command. If the lookup fails, an error\n    is logged to the console and an empty list is returned.\n    :return: The list of available and active CAN interfaces or an empty list of the command failed\n    \"\"\"\n    if sys.platform != \"linux\":\n        return []\n    try:\n        command = [\"ip\", \"-json\", \"link\", \"list\", \"up\"]",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "documentation": {}
    },
    {
        "label": "error_code_to_str",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "peekOfCode": "def error_code_to_str(code: Optional[int]) -> str:\n    \"\"\"\n    Converts a given error code (errno) to a useful and human readable string.\n    :param code: a possibly invalid/unknown error code\n    :returns: a string explaining and containing the given error code, or a string\n              explaining that the errorcode is unknown if that is the case\n    \"\"\"\n    name = errno.errorcode.get(code, \"UNKNOWN\")  # type: ignore\n    description = os.strerror(code) if code is not None else \"NO DESCRIPTION AVAILABLE\"\n    return f\"{name} (errno {code}): {description}\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "peekOfCode": "log = logging.getLogger(__name__)\ndef pack_filters(can_filters: Optional[typechecking.CanFilters] = None) -> bytes:\n    if can_filters is None:\n        # Pass all messages\n        can_filters = [{\"can_id\": 0, \"can_mask\": 0}]\n    can_filter_fmt = f\"={2 * len(can_filters)}I\"\n    filter_data = []\n    for can_filter in can_filters:\n        can_id = can_filter[\"can_id\"]\n        can_mask = can_filter[\"can_mask\"]",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcan.utils",
        "documentation": {}
    },
    {
        "label": "SocketCanDaemonBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "class SocketCanDaemonBus(can.BusABC):\n    def __init__(self, channel, host, port, tcp_tune=False, can_filters=None, **kwargs):\n        \"\"\"Connects to a CAN bus served by socketcand.\n        It implements :meth:`can.BusABC._detect_available_configs` to search for\n        available interfaces.\n        It will attempt to connect to the server for up to 10s, after which a\n        TimeoutError exception will be thrown.\n        If the handshake with the socketcand server fails, a CanError exception\n        is thrown.\n        :param channel:",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "detect_beacon",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "def detect_beacon(timeout_ms: int = 3100) -> List[can.typechecking.AutoDetectedConfig]:\n    \"\"\"\n    Detects socketcand servers\n    This is what :meth:`can.detect_available_configs` ends up calling to search\n    for available socketcand servers with a default timeout of 3100ms\n    (socketcand sends a beacon packet every 3000ms).\n    Using this method directly allows for adjusting the timeout. Extending\n    the timeout beyond the default time period could be useful if UDP\n    packet loss is a concern.\n    :param timeout_ms:",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "convert_ascii_message_to_can_message",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "def convert_ascii_message_to_can_message(ascii_msg: str) -> can.Message:\n    if not ascii_msg.startswith(\"< frame \") or not ascii_msg.endswith(\" >\"):\n        log.warning(f\"Could not parse ascii message: {ascii_msg}\")\n        return None\n    else:\n        # frame_string = ascii_msg.removeprefix(\"< frame \").removesuffix(\" >\")\n        frame_string = ascii_msg[8:-2]\n        parts = frame_string.split(\" \", 3)\n        can_id, timestamp = int(parts[0], 16), float(parts[1])\n        is_ext = len(parts[0]) != 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "convert_can_message_to_ascii_message",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "def convert_can_message_to_ascii_message(can_message: can.Message) -> str:\n    # Note: socketcan bus adds extended flag, remote_frame_flag & error_flag to id\n    # not sure if that is necessary here\n    can_id = can_message.arbitration_id\n    if can_message.is_extended_id:\n        can_id_string = f\"{(can_id&0x1FFFFFFF):08X}\"\n    else:\n        can_id_string = f\"{(can_id&0x7FF):03X}\"\n    # Note: seems like we cannot add CANFD_BRS (bitrate_switch) and CANFD_ESI (error_state_indicator) flags\n    data = can_message.data",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "connect_to_server",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "def connect_to_server(s, host, port):\n    timeout_ms = 10000\n    now = time.time() * 1000\n    end_time = now + timeout_ms\n    while now < end_time:\n        try:\n            s.connect((host, port))\n            return\n        except Exception as e:\n            log.warning(f\"Failed to connect to server: {type(e)} Message: {e}\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "log = logging.getLogger(__name__)\nDEFAULT_SOCKETCAND_DISCOVERY_ADDRESS = \"\"\nDEFAULT_SOCKETCAND_DISCOVERY_PORT = 42000\ndef detect_beacon(timeout_ms: int = 3100) -> List[can.typechecking.AutoDetectedConfig]:\n    \"\"\"\n    Detects socketcand servers\n    This is what :meth:`can.detect_available_configs` ends up calling to search\n    for available socketcand servers with a default timeout of 3100ms\n    (socketcand sends a beacon packet every 3000ms).\n    Using this method directly allows for adjusting the timeout. Extending",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SOCKETCAND_DISCOVERY_ADDRESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "DEFAULT_SOCKETCAND_DISCOVERY_ADDRESS = \"\"\nDEFAULT_SOCKETCAND_DISCOVERY_PORT = 42000\ndef detect_beacon(timeout_ms: int = 3100) -> List[can.typechecking.AutoDetectedConfig]:\n    \"\"\"\n    Detects socketcand servers\n    This is what :meth:`can.detect_available_configs` ends up calling to search\n    for available socketcand servers with a default timeout of 3100ms\n    (socketcand sends a beacon packet every 3000ms).\n    Using this method directly allows for adjusting the timeout. Extending\n    the timeout beyond the default time period could be useful if UDP",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SOCKETCAND_DISCOVERY_PORT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "description": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "peekOfCode": "DEFAULT_SOCKETCAND_DISCOVERY_PORT = 42000\ndef detect_beacon(timeout_ms: int = 3100) -> List[can.typechecking.AutoDetectedConfig]:\n    \"\"\"\n    Detects socketcand servers\n    This is what :meth:`can.detect_available_configs` ends up calling to search\n    for available socketcand servers with a default timeout of 3100ms\n    (socketcand sends a beacon packet every 3000ms).\n    Using this method directly allows for adjusting the timeout. Extending\n    the timeout beyond the default time period could be useful if UDP\n    packet loss is a concern.",
        "detail": "dbus-serialbattery.ext.can.interfaces.socketcand.socketcand",
        "documentation": {}
    },
    {
        "label": "Baudrate",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class Baudrate(WORD):\n    \"\"\"\n    Specifies pre-defined baud rate values for GW-001, GW-002 and all systec USB-CANmoduls.\n    .. seealso::\n       :meth:`UcanServer.init_can`\n       :meth:`UcanServer.set_baudrate`\n       :meth:`UcanServer.get_baudrate_message`\n       :class:`BaudrateEx`\n    \"\"\"\n    #: 1000 kBit/sec",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "BaudrateEx",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class BaudrateEx(DWORD):\n    \"\"\"\n    Specifies pre-defined baud rate values for all systec USB-CANmoduls.\n    These values cannot be used for GW-001 and GW-002! Use values from enum :class:`Baudrate` instead.\n    .. seealso::\n       :meth:`UcanServer.init_can`\n       :meth:`UcanServer.set_baudrate`\n       :meth:`UcanServer.get_baudrate_ex_message`\n       :class:`Baudrate`\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "MsgFrameFormat",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class MsgFrameFormat(BYTE):\n    \"\"\"\n    Specifies values for the frame format of CAN messages for member :attr:`CanMsg.m_bFF` in structure\n    :class:`CanMsg`. These values can be combined.\n    .. seealso:: :class:`CanMsg`\n    \"\"\"\n    #: standard CAN data frame with 11 bit ID (CAN2.0A spec.)\n    MSG_FF_STD = 0x0\n    #: transmit echo\n    MSG_FF_ECHO = 0x20",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "ReturnCode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class ReturnCode(BYTE):\n    \"\"\"\n    Specifies all return codes of all methods of this class.\n    \"\"\"\n    #: no error\n    SUCCESSFUL = 0x0\n    # start of error codes coming from USB-CAN-library\n    ERR = 0x1\n    # start of error codes coming from command interface between host and USB-CANmodul\n    ERRCMD = 0x40",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "CbEvent",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class CbEvent(BYTE):\n    \"\"\"\n    This enum defines events for the callback functions of the library.\n    .. seealso:: :meth:`UcanServer.get_status`\n    \"\"\"\n    #: The USB-CANmodul has been initialized.\n    EVENT_INITHW = 0\n    #: The CAN interface has been initialized.\n    EVENT_init_can = 1\n    #: A new CAN message has been received.",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "CanStatus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class CanStatus(WORD):\n    \"\"\"\n    CAN error status bits. These bit values occurs in combination with the method :meth:`UcanServer.get_status`.\n    .. seealso::\n       :meth:`UcanServer.get_status`\n       :meth:`UcanServer.get_can_status_message`\n    \"\"\"\n    #: No error.\n    CANERR_OK = 0x0\n    #: Transmit buffer of the CAN controller is full.",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "UsbStatus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class UsbStatus(WORD):\n    \"\"\"\n    USB error status bits. These bit values occurs in combination with the method :meth:`UcanServer.get_status`.\n    .. seealso:: :meth:`UcanServer.get_status`\n    \"\"\"\n    #: No error.\n    USBERR_OK = 0x0\n#: Specifies the acceptance mask for receiving all CAN messages.\n#:\n#: .. seealso::",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "OutputControl",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class OutputControl(BYTE):\n    \"\"\"\n    Specifies pre-defined values for the Output Control Register of SJA1000 on GW-001 and GW-002.\n    These values are only important for GW-001 and GW-002.\n    They does not have an effect on systec USB-CANmoduls.\n    \"\"\"\n    #: default OCR value for the standard USB-CANmodul GW-001/GW-002\n    OCR_DEFAULT = 0x1A\n    #: OCR value for RS485 interface and galvanic isolation\n    OCR_RS485_ISOLATED = 0x1E",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "Channel",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class Channel(BYTE):\n    \"\"\"\n    Specifies values for the CAN channel to be used on multi-channel USB-CANmoduls.\n    \"\"\"\n    #: Specifies the first CAN channel (GW-001/GW-002 and USB-CANmodul1 only can be used with this channel).\n    CHANNEL_CH0 = 0\n    #: Specifies the second CAN channel (this channel cannot be used with GW-001/GW-002 and USB-CANmodul1).\n    CHANNEL_CH1 = 1\n    #: Specifies all CAN channels (can only be used with the method :meth:`UcanServer.shutdown`).\n    CHANNEL_ALL = 254",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "ResetFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class ResetFlags(DWORD):\n    \"\"\"\n    Specifies flags for resetting USB-CANmodul with method :meth:`UcanServer.reset_can`.\n    These flags can be used in combination.\n    .. seealso:: :meth:`UcanServer.reset_can`\n    \"\"\"\n    #: reset everything\n    RESET_ALL = 0x0\n    #: no CAN status reset (only supported for systec USB-CANmoduls)\n    RESET_NO_STATUS = 0x1",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "ProductCode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`\n    with method :meth:`UcanServer.get_hardware_info`.\n    .. seealso::\n       :meth:`UcanServer.get_hardware_info`\n       :class:`HardwareInfoEx`\n    \"\"\"\n    #: Product code for GW-001 (outdated).",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "CyclicFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class CyclicFlags(DWORD):\n    \"\"\"\n    Specifies flags for cyclical CAN messages.\n    These flags can be used in combinations with method :meth:`UcanServer.enable_cyclic_can_msg`.\n    .. seealso:: :meth:`UcanServer.enable_cyclic_can_msg`\n    \"\"\"\n    #: Stops the transmission of cyclic CAN messages.\n    CYCLIC_FLAG_STOPP = 0x0\n    #: Global enable of transmission of cyclic CAN messages.\n    CYCLIC_FLAG_START = 0x80000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PendingFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class PendingFlags(BYTE):\n    \"\"\"\n    Specifies flags for method :meth:`UcanServer.get_msg_pending`.\n    These flags can be uses in combinations.\n    .. seealso:: :meth:`UcanServer.get_msg_pending`\n    \"\"\"\n    #: number of pending CAN messages in receive buffer of USB-CAN-library\n    PENDING_FLAG_RX_DLL = 0x1\n    #: reserved\n    PENDING_FLAG_RX_SYS = 0x2",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "Mode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class Mode(BYTE):\n    \"\"\"\n    Specifies values for operation mode of a CAN channel.\n    These values can be combined by OR operation with the method :meth:`UcanServer.init_can`.\n    \"\"\"\n    #: normal operation mode (transmitting and receiving)\n    MODE_NORMAL = 0\n    #: listen only mode (receiving only, no ACK at CAN bus)\n    MODE_LISTEN_ONLY = 1\n    #: CAN messages which was sent will be received back with method :meth:`UcanServer.read_can_msg`",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "VersionType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "class VersionType(BYTE):\n    \"\"\"\n    Specifies values for receiving the version information of several driver files.\n    .. note:: This structure is only used internally.\n    \"\"\"\n    #: version of the USB-CAN-library\n    VER_TYPE_USER_LIB = 1\n    #: equivalent to :attr:`VER_TYPE_USER_LIB`\n    VER_TYPE_USER_DLL = 1\n    #: version of USBCAN.SYS (not supported in this version)",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "MAX_MODULES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "MAX_MODULES = 64\n#: Maximum number of applications that can use the USB-CAN-library.\nMAX_INSTANCES = 64\n#: With the method :meth:`UcanServer.init_can` the module is used, which is detected at first.\n#: This value only should be used in case only one module is connected to the computer.\nANY_MODULE = 255\n#: No valid USB-CAN Handle (only used internally).\nINVALID_HANDLE = 0xFF\nclass Baudrate(WORD):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "MAX_INSTANCES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "MAX_INSTANCES = 64\n#: With the method :meth:`UcanServer.init_can` the module is used, which is detected at first.\n#: This value only should be used in case only one module is connected to the computer.\nANY_MODULE = 255\n#: No valid USB-CAN Handle (only used internally).\nINVALID_HANDLE = 0xFF\nclass Baudrate(WORD):\n    \"\"\"\n    Specifies pre-defined baud rate values for GW-001, GW-002 and all systec USB-CANmoduls.\n    .. seealso::",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "ANY_MODULE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "ANY_MODULE = 255\n#: No valid USB-CAN Handle (only used internally).\nINVALID_HANDLE = 0xFF\nclass Baudrate(WORD):\n    \"\"\"\n    Specifies pre-defined baud rate values for GW-001, GW-002 and all systec USB-CANmoduls.\n    .. seealso::\n       :meth:`UcanServer.init_can`\n       :meth:`UcanServer.set_baudrate`\n       :meth:`UcanServer.get_baudrate_message`",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "INVALID_HANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "INVALID_HANDLE = 0xFF\nclass Baudrate(WORD):\n    \"\"\"\n    Specifies pre-defined baud rate values for GW-001, GW-002 and all systec USB-CANmoduls.\n    .. seealso::\n       :meth:`UcanServer.init_can`\n       :meth:`UcanServer.set_baudrate`\n       :meth:`UcanServer.get_baudrate_message`\n       :class:`BaudrateEx`\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "AMR_ALL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "AMR_ALL = 0xFFFFFFFF\n#: Specifies the acceptance code for receiving all CAN messages.\n#:\n#: .. seealso::\n#:\n#:    :const:`AMR_ALL`\n#:\n#:    :meth:`UcanServer.init_can`\n#:\n#:    :meth:`UcanServer.set_acceptance`",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "ACR_ALL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "ACR_ALL = 0x0\nclass OutputControl(BYTE):\n    \"\"\"\n    Specifies pre-defined values for the Output Control Register of SJA1000 on GW-001 and GW-002.\n    These values are only important for GW-001 and GW-002.\n    They does not have an effect on systec USB-CANmoduls.\n    \"\"\"\n    #: default OCR value for the standard USB-CANmodul GW-001/GW-002\n    OCR_DEFAULT = 0x1A\n    #: OCR value for RS485 interface and galvanic isolation",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BUFFER_ENTRIES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "DEFAULT_BUFFER_ENTRIES = 4096\nclass Channel(BYTE):\n    \"\"\"\n    Specifies values for the CAN channel to be used on multi-channel USB-CANmoduls.\n    \"\"\"\n    #: Specifies the first CAN channel (GW-001/GW-002 and USB-CANmodul1 only can be used with this channel).\n    CHANNEL_CH0 = 0\n    #: Specifies the second CAN channel (this channel cannot be used with GW-001/GW-002 and USB-CANmodul1).\n    CHANNEL_CH1 = 1\n    #: Specifies all CAN channels (can only be used with the method :meth:`UcanServer.shutdown`).",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_PID_TWO_CHA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_PID_TWO_CHA = 0x1\nPRODCODE_PID_TERM = 0x1\nPRODCODE_PID_RBUSER = 0x1\nPRODCODE_PID_RBCAN = 0x1\nPRODCODE_PID_G4 = 0x20\nPRODCODE_PID_RESVD = 0x40\nPRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_PID_TERM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_PID_TERM = 0x1\nPRODCODE_PID_RBUSER = 0x1\nPRODCODE_PID_RBCAN = 0x1\nPRODCODE_PID_G4 = 0x20\nPRODCODE_PID_RESVD = 0x40\nPRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_PID_RBUSER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_PID_RBUSER = 0x1\nPRODCODE_PID_RBCAN = 0x1\nPRODCODE_PID_G4 = 0x20\nPRODCODE_PID_RESVD = 0x40\nPRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_PID_RBCAN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_PID_RBCAN = 0x1\nPRODCODE_PID_G4 = 0x20\nPRODCODE_PID_RESVD = 0x40\nPRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_PID_G4",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_PID_G4 = 0x20\nPRODCODE_PID_RESVD = 0x40\nPRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`\n    with method :meth:`UcanServer.get_hardware_info`.",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_PID_RESVD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_PID_RESVD = 0x40\nPRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`\n    with method :meth:`UcanServer.get_hardware_info`.\n    .. seealso::",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_MASK_DID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_MASK_DID = 0xFFFF0000\nPRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`\n    with method :meth:`UcanServer.get_hardware_info`.\n    .. seealso::\n       :meth:`UcanServer.get_hardware_info`",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_MASK_PID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_MASK_PID = 0xFFFF\nPRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`\n    with method :meth:`UcanServer.get_hardware_info`.\n    .. seealso::\n       :meth:`UcanServer.get_hardware_info`\n       :class:`HardwareInfoEx`",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "PRODCODE_MASK_PIDG3",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "PRODCODE_MASK_PIDG3 = PRODCODE_MASK_PID & 0xFFFFFFBF\nclass ProductCode(WORD):\n    \"\"\"\n    These values defines product codes for all known USB-CANmodul derivatives received in member\n    :attr:`HardwareInfoEx.m_dwProductCode` of structure :class:`HardwareInfoEx`\n    with method :meth:`UcanServer.get_hardware_info`.\n    .. seealso::\n       :meth:`UcanServer.get_hardware_info`\n       :class:`HardwareInfoEx`\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "MAX_CYCLIC_CAN_MSG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "peekOfCode": "MAX_CYCLIC_CAN_MSG = 16\nclass CyclicFlags(DWORD):\n    \"\"\"\n    Specifies flags for cyclical CAN messages.\n    These flags can be used in combinations with method :meth:`UcanServer.enable_cyclic_can_msg`.\n    .. seealso:: :meth:`UcanServer.enable_cyclic_can_msg`\n    \"\"\"\n    #: Stops the transmission of cyclic CAN messages.\n    CYCLIC_FLAG_STOPP = 0x0\n    #: Global enable of transmission of cyclic CAN messages.",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.constants",
        "documentation": {}
    },
    {
        "label": "UcanException",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "peekOfCode": "class UcanException(CanError, ABC):\n    \"\"\"Base class for USB can errors.\"\"\"\n    def __init__(self, result, func, arguments):\n        self.result = result\n        self.func = func\n        self.arguments = arguments\n        message = self._error_message_mapping.get(result, \"unknown\")\n        super().__init__(\n            message=f\"Function {func.__name__} (called with {arguments}): {message}\",\n            error_code=result.value,",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "documentation": {}
    },
    {
        "label": "UcanError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "peekOfCode": "class UcanError(UcanException):\n    \"\"\"Exception class for errors from USB-CAN-library.\"\"\"\n    _ERROR_MESSAGES = {\n        ReturnCode.ERR_RESOURCE: \"could not created a resource (memory, handle, ...)\",\n        ReturnCode.ERR_MAXMODULES: \"the maximum number of opened modules is reached\",\n        ReturnCode.ERR_HWINUSE: \"the specified module is already in use\",\n        ReturnCode.ERR_ILLVERSION: \"the software versions of the module and library are incompatible\",\n        ReturnCode.ERR_ILLHW: \"the module with the specified device number is not connected \"\n        \"(or used by an other application)\",\n        ReturnCode.ERR_ILLHANDLE: \"wrong USB-CAN-Handle handed over to the function\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "documentation": {}
    },
    {
        "label": "UcanCmdError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "peekOfCode": "class UcanCmdError(UcanException):\n    \"\"\"Exception class for errors from firmware in USB-CANmodul.\"\"\"\n    _ERROR_MESSAGES = {\n        ReturnCode.ERRCMD_NOTEQU: \"the received response does not match to the transmitted command\",\n        ReturnCode.ERRCMD_REGTST: \"no access to the CAN controller\",\n        ReturnCode.ERRCMD_ILLCMD: \"the module could not interpret the command\",\n        ReturnCode.ERRCMD_EEPROM: \"error while reading the EEPROM\",\n        ReturnCode.ERRCMD_RESERVED1: \"reserved\",\n        ReturnCode.ERRCMD_RESERVED2: \"reserved\",\n        ReturnCode.ERRCMD_RESERVED3: \"reserved\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "documentation": {}
    },
    {
        "label": "UcanWarning",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "peekOfCode": "class UcanWarning(UcanException):\n    \"\"\"Exception class for warnings, the function has been executed anyway.\"\"\"\n    _ERROR_MESSAGES = {\n        ReturnCode.WARN_NODATA: \"no CAN messages received\",\n        ReturnCode.WARN_SYS_RXOVERRUN: \"overrun in receive buffer of the kernel driver\",\n        ReturnCode.WARN_DLL_RXOVERRUN: \"overrun in receive buffer of the USB-CAN-library\",\n        ReturnCode.WARN_RESERVED1: \"reserved\",\n        ReturnCode.WARN_RESERVED2: \"reserved\",\n        ReturnCode.WARN_FW_TXOVERRUN: \"overrun in transmit buffer of the firmware (but this CAN message \"\n        \"was successfully stored in buffer of the ibrary)\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.exceptions",
        "documentation": {}
    },
    {
        "label": "CanMsg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class CanMsg(Structure):\n    \"\"\"\n    Structure of a CAN message.\n    .. seealso::\n       :meth:`UcanServer.read_can_msg`\n       :meth:`UcanServer.write_can_msg`\n       :meth:`UcanServer.define_cyclic_can_msg`\n       :meth:`UcanServer.read_cyclic_can_msg`\n    \"\"\"\n    _pack_ = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "Status",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class Status(Structure):\n    \"\"\"\n    Structure with the error status of CAN and USB.\n    Use this structure with the method :meth:`UcanServer.get_status`\n    .. seealso::\n       :meth:`UcanServer.get_status`\n       :meth:`UcanServer.get_can_status_message`\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "InitCanParam",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class InitCanParam(Structure):\n    \"\"\"\n    Structure including initialisation parameters used internally in :meth:`UcanServer.init_can`.\n    .. note:: This structure is only used internally.\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [\n        (\"m_dwSize\", DWORD),  # size of this structure (only used internally)\n        (\n            \"m_bMode\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "Handle",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class Handle(BYTE):\n    pass\nclass HardwareInfoEx(Structure):\n    \"\"\"\n    Structure including hardware information about the USB-CANmodul.\n    This structure is used with the method :meth:`UcanServer.get_hardware_info`.\n    .. seealso:: :meth:`UcanServer.get_hardware_info`\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "HardwareInfoEx",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class HardwareInfoEx(Structure):\n    \"\"\"\n    Structure including hardware information about the USB-CANmodul.\n    This structure is used with the method :meth:`UcanServer.get_hardware_info`.\n    .. seealso:: :meth:`UcanServer.get_hardware_info`\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [\n        (\"m_dwSize\", DWORD),  # size of this structure (only used internally)\n        (\"m_UcanHandle\", Handle),  # USB-CAN-Handle assigned by the DLL",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "HardwareInitInfo",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class HardwareInitInfo(Structure):\n    \"\"\"\n    Structure including information about the enumeration of USB-CANmoduls.\n    .. seealso:: :meth:`UcanServer.enumerate_hardware`\n    .. note:: This structure is only used internally.\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [\n        (\"m_dwSize\", DWORD),  # size of this structure\n        (",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "ChannelInfo",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class ChannelInfo(Structure):\n    \"\"\"\n    Structure including CAN channel information.\n    This structure is used with the method :meth:`UcanServer.get_hardware_info`.\n    .. seealso:: :meth:`UcanServer.get_hardware_info`\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [\n        (\"m_dwSize\", DWORD),  # size of this structure\n        (\"m_bMode\", BYTE),  # operation mode of CAN controller (see enum :class:`Mode`)",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "MsgCountInfo",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "class MsgCountInfo(Structure):\n    \"\"\"\n    Structure including the number of sent and received CAN messages.\n    This structure is used with the method :meth:`UcanServer.get_msg_count_info`.\n    .. seealso:: :meth:`UcanServer.get_msg_count_info`\n    .. note:: This structure is only used internally.\n    \"\"\"\n    _fields_ = [\n        (\"m_wSentMsgCount\", WORD),  # number of sent CAN messages\n        (\"m_wRecvdMsgCount\", WORD),  # number of received CAN messages",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "CallbackFktEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "CallbackFktEx = FUNCTYPE(None, Handle, DWORD, BYTE, LPVOID)\nclass HardwareInitInfo(Structure):\n    \"\"\"\n    Structure including information about the enumeration of USB-CANmoduls.\n    .. seealso:: :meth:`UcanServer.enumerate_hardware`\n    .. note:: This structure is only used internally.\n    \"\"\"\n    _pack_ = 1\n    _fields_ = [\n        (\"m_dwSize\", DWORD),  # size of this structure",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "ConnectControlFktEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "ConnectControlFktEx = FUNCTYPE(None, DWORD, DWORD, LPVOID)\n# typedef void (PUBLIC *EnumCallback) (DWORD dwIndex_p, BOOL fIsUsed_p,\n#    HardwareInfoEx* pHwInfoEx_p, HardwareInitInfo* pInitInfo_p, void* pArg_p);\nEnumCallback = FUNCTYPE(\n    None, DWORD, BOOL, POINTER(HardwareInfoEx), POINTER(HardwareInitInfo), LPVOID\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "EnumCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "peekOfCode": "EnumCallback = FUNCTYPE(\n    None, DWORD, BOOL, POINTER(HardwareInfoEx), POINTER(HardwareInitInfo), LPVOID\n)",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.structures",
        "documentation": {}
    },
    {
        "label": "UcanServer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "class UcanServer:\n    \"\"\"\n    UcanServer is a Python wrapper class for using the usbcan32.dll / usbcan64.dll.\n    \"\"\"\n    _modules_found = []\n    _connect_control_ref = None\n    def __init__(self):\n        if not _UCAN_INITIALIZED:\n            raise CanInterfaceNotImplementedError(\n                \"The interface could not be loaded on the current platform\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_valid_rx_can_msg",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_valid_rx_can_msg(result):\n    \"\"\"\n    Checks if function :meth:`UcanServer.read_can_msg` returns a valid CAN message.\n    :param ReturnCode result: Error code of the function.\n    :return: True if a valid CAN messages was received, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return (result.value == ReturnCode.SUCCESSFUL) or (\n        result.value > ReturnCode.WARNING\n    )",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_tx_ok",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_tx_ok(result):\n    \"\"\"\n    Checks if function :meth:`UcanServer.write_can_msg` successfully wrote CAN message(s).\n    While using :meth:`UcanServer.write_can_msg_ex` the number of sent CAN messages can be less than\n    the number of CAN messages which should be sent.\n    :param ReturnCode result: Error code of the function.\n    :return: True if CAN message(s) was(were) written successfully, otherwise False.\n    :rtype: bool\n    .. :seealso: :const:`ReturnCode.WARN_TXLIMIT`\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_tx_success",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_tx_success(result):\n    \"\"\"\n    Checks if function :meth:`UcanServer.write_can_msg_ex` successfully wrote all CAN message(s).\n    :param ReturnCode result: Error code of the function.\n    :return: True if CAN message(s) was(were) written successfully, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return result.value == ReturnCode.SUCCESSFUL\ndef check_tx_not_all(result):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_tx_not_all",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_tx_not_all(result):\n    \"\"\"\n    Checks if function :meth:`UcanServer.write_can_msg_ex` did not sent all CAN messages.\n    :param ReturnCode result: Error code of the function.\n    :return: True if not all CAN messages were written, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return result.value == ReturnCode.WARN_TXLIMIT\ndef check_warning(result):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_warning",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_warning(result):\n    \"\"\"\n    Checks if any function returns a warning.\n    :param ReturnCode result: Error code of the function.\n    :return: True if a function returned warning, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return result.value >= ReturnCode.WARNING\ndef check_error(result):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_error",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_error(result):\n    \"\"\"\n    Checks if any function returns an error from USB-CAN-library.\n    :param ReturnCode result: Error code of the function.\n    :return: True if a function returned error, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return (result.value != ReturnCode.SUCCESSFUL) and (\n        result.value < ReturnCode.WARNING\n    )",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_error_cmd",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_error_cmd(result):\n    \"\"\"\n    Checks if any function returns an error from firmware in USB-CANmodul.\n    :param ReturnCode result: Error code of the function.\n    :return: True if a function returned error from firmware, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return (result.value >= ReturnCode.ERRCMD) and (result.value < ReturnCode.WARNING)\ndef check_result(result, func, arguments):\n    if check_warning(result) and (result.value != ReturnCode.WARN_NODATA):",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "check_result",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "def check_result(result, func, arguments):\n    if check_warning(result) and (result.value != ReturnCode.WARN_NODATA):\n        log.warning(UcanWarning(result, func, arguments))\n    elif check_error(result):\n        if check_error_cmd(result):\n            raise UcanCmdError(result, func, arguments)\n        else:\n            raise UcanError(result, func, arguments)\n    return result\n_UCAN_INITIALIZED = False",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "log = logging.getLogger(\"can.systec\")\ndef check_valid_rx_can_msg(result):\n    \"\"\"\n    Checks if function :meth:`UcanServer.read_can_msg` returns a valid CAN message.\n    :param ReturnCode result: Error code of the function.\n    :return: True if a valid CAN messages was received, otherwise False.\n    :rtype: bool\n    \"\"\"\n    return (result.value == ReturnCode.SUCCESSFUL) or (\n        result.value > ReturnCode.WARNING",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "_UCAN_INITIALIZED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "_UCAN_INITIALIZED = False\nif os.name != \"nt\":\n    log.warning(\"SYSTEC ucan library does not work on %s platform.\", sys.platform)\nelse:\n    from ctypes import WinDLL\n    try:\n        # Select the proper dll architecture\n        lib = WinDLL(\"usbcan64.dll\" if sys.maxsize > 2**32 else \"usbcan32.dll\")\n        # BOOL PUBLIC UcanSetDebugMode (DWORD dwDbgLevel_p, _TCHAR* pszFilePathName_p, DWORD dwFlags_p);\n        UcanSetDebugMode = lib.UcanSetDebugMode",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "UcanServer._enum_callback_ref",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "peekOfCode": "UcanServer._enum_callback_ref = EnumCallback(UcanServer._enum_callback)",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucan",
        "documentation": {}
    },
    {
        "label": "Ucan",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "peekOfCode": "class Ucan(UcanServer):\n    \"\"\"\n    Wrapper around UcanServer to read messages with timeout using events.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._msg_received_event = Event()\n    def can_msg_received_event(self, channel):\n        self._msg_received_event.set()\n    def read_can_msg(self, channel, count, timeout):",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "documentation": {}
    },
    {
        "label": "UcanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "peekOfCode": "class UcanBus(BusABC):\n    \"\"\"\n    The CAN Bus implemented for the SYSTEC interface.\n    \"\"\"\n    BITRATES = {\n        10000: Baudrate.BAUD_10kBit,\n        20000: Baudrate.BAUD_20kBit,\n        50000: Baudrate.BAUD_50kBit,\n        100000: Baudrate.BAUD_100kBit,\n        125000: Baudrate.BAUD_125kBit,",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "description": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "peekOfCode": "log = logging.getLogger(\"can.systec\")\nclass Ucan(UcanServer):\n    \"\"\"\n    Wrapper around UcanServer to read messages with timeout using events.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._msg_received_event = Event()\n    def can_msg_received_event(self, channel):\n        self._msg_received_event.set()",
        "detail": "dbus-serialbattery.ext.can.interfaces.systec.ucanbus",
        "documentation": {}
    },
    {
        "label": "UdpMulticastBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "class UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.\n    It supports IPv4 and IPv6, specified via the channel (which really is just a multicast IP address as a\n    string). You can also specify the port and the IPv6 *hop limit*/the IPv4 *time to live* (TTL).\n    This bus does not support filtering based on message IDs on the kernel level but instead provides it in\n    user space (in Python) as a fallback.\n    Both default addresses should allow for multi-host CAN networks in a normal local area network (LAN) where\n    multicast is enabled.\n    .. note::\n        The auto-detection of available interfaces (see) is implemented using heuristic that checks if the",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "GeneralPurposeUdpMulticastBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "class GeneralPurposeUdpMulticastBus:\n    \"\"\"A general purpose send and receive handler for multicast over IP/UDP.\n    However, it raises CAN-specific exceptions for convenience.\n    \"\"\"\n    def __init__(\n        self, group: str, port: int, hop_limit: int, max_buffer: int = 4096\n    ) -> None:\n        self.group = group\n        self.port = port\n        self.hop_limit = hop_limit",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "log = logging.getLogger(__name__)\n# see socket.getaddrinfo()\nIPv4_ADDRESS_INFO = Tuple[str, int]  # address, port\nIPv6_ADDRESS_INFO = Tuple[str, int, int, int]  # address, port, flowinfo, scope_id\nIP_ADDRESS_INFO = Union[IPv4_ADDRESS_INFO, IPv6_ADDRESS_INFO]\n# Additional constants for the interaction with Unix kernels\nSO_TIMESTAMPNS = 35\nSIOCGSTAMP = 0x8906\nclass UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "IPv4_ADDRESS_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "IPv4_ADDRESS_INFO = Tuple[str, int]  # address, port\nIPv6_ADDRESS_INFO = Tuple[str, int, int, int]  # address, port, flowinfo, scope_id\nIP_ADDRESS_INFO = Union[IPv4_ADDRESS_INFO, IPv6_ADDRESS_INFO]\n# Additional constants for the interaction with Unix kernels\nSO_TIMESTAMPNS = 35\nSIOCGSTAMP = 0x8906\nclass UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.\n    It supports IPv4 and IPv6, specified via the channel (which really is just a multicast IP address as a\n    string). You can also specify the port and the IPv6 *hop limit*/the IPv4 *time to live* (TTL).",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "IPv6_ADDRESS_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "IPv6_ADDRESS_INFO = Tuple[str, int, int, int]  # address, port, flowinfo, scope_id\nIP_ADDRESS_INFO = Union[IPv4_ADDRESS_INFO, IPv6_ADDRESS_INFO]\n# Additional constants for the interaction with Unix kernels\nSO_TIMESTAMPNS = 35\nSIOCGSTAMP = 0x8906\nclass UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.\n    It supports IPv4 and IPv6, specified via the channel (which really is just a multicast IP address as a\n    string). You can also specify the port and the IPv6 *hop limit*/the IPv4 *time to live* (TTL).\n    This bus does not support filtering based on message IDs on the kernel level but instead provides it in",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "IP_ADDRESS_INFO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "IP_ADDRESS_INFO = Union[IPv4_ADDRESS_INFO, IPv6_ADDRESS_INFO]\n# Additional constants for the interaction with Unix kernels\nSO_TIMESTAMPNS = 35\nSIOCGSTAMP = 0x8906\nclass UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.\n    It supports IPv4 and IPv6, specified via the channel (which really is just a multicast IP address as a\n    string). You can also specify the port and the IPv6 *hop limit*/the IPv4 *time to live* (TTL).\n    This bus does not support filtering based on message IDs on the kernel level but instead provides it in\n    user space (in Python) as a fallback.",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "SO_TIMESTAMPNS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "SO_TIMESTAMPNS = 35\nSIOCGSTAMP = 0x8906\nclass UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.\n    It supports IPv4 and IPv6, specified via the channel (which really is just a multicast IP address as a\n    string). You can also specify the port and the IPv6 *hop limit*/the IPv4 *time to live* (TTL).\n    This bus does not support filtering based on message IDs on the kernel level but instead provides it in\n    user space (in Python) as a fallback.\n    Both default addresses should allow for multi-host CAN networks in a normal local area network (LAN) where\n    multicast is enabled.",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "SIOCGSTAMP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "peekOfCode": "SIOCGSTAMP = 0x8906\nclass UdpMulticastBus(BusABC):\n    \"\"\"A virtual interface for CAN communications between multiple processes using UDP over Multicast IP.\n    It supports IPv4 and IPv6, specified via the channel (which really is just a multicast IP address as a\n    string). You can also specify the port and the IPv6 *hop limit*/the IPv4 *time to live* (TTL).\n    This bus does not support filtering based on message IDs on the kernel level but instead provides it in\n    user space (in Python) as a fallback.\n    Both default addresses should allow for multi-host CAN networks in a normal local area network (LAN) where\n    multicast is enabled.\n    .. note::",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.bus",
        "documentation": {}
    },
    {
        "label": "check_msgpack_installed",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "peekOfCode": "def check_msgpack_installed() -> None:\n    \"\"\"Raises a :class:`can.CanInterfaceNotImplementedError` if `msgpack` is not installed.\"\"\"\n    if msgpack is None:\n        raise CanInterfaceNotImplementedError(\"msgpack not installed\")\ndef pack_message(message: Message) -> bytes:\n    \"\"\"\n    Pack a can.Message into a msgpack byte blob.\n    :param message: the message to be packed\n    \"\"\"\n    check_msgpack_installed()",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "documentation": {}
    },
    {
        "label": "pack_message",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "peekOfCode": "def pack_message(message: Message) -> bytes:\n    \"\"\"\n    Pack a can.Message into a msgpack byte blob.\n    :param message: the message to be packed\n    \"\"\"\n    check_msgpack_installed()\n    as_dict = {\n        \"timestamp\": message.timestamp,\n        \"arbitration_id\": message.arbitration_id,\n        \"is_extended_id\": message.is_extended_id,",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "documentation": {}
    },
    {
        "label": "unpack_message",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "description": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "peekOfCode": "def unpack_message(\n    data: ReadableBytesLike,\n    replace: Optional[Dict[str, Any]] = None,\n    check: bool = False,\n) -> Message:\n    \"\"\"Unpack a can.Message from a msgpack byte blob.\n    :param data: the raw data\n    :param replace: a mapping from field names to values to be replaced after decoding the new message, or\n                    `None` to disable this feature\n    :param check: this is passed to :meth:`can.Message.__init__` to specify whether to validate the message",
        "detail": "dbus-serialbattery.ext.can.interfaces.udp_multicast.utils",
        "documentation": {}
    },
    {
        "label": "WMIDateStringToDate",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "peekOfCode": "def WMIDateStringToDate(dtmDate) -> str:\n    if dtmDate[4] == 0:\n        strDateTime = dtmDate[5] + \"/\"\n    else:\n        strDateTime = dtmDate[4] + dtmDate[5] + \"/\"\n    if dtmDate[6] == 0:\n        strDateTime = strDateTime + dtmDate[7] + \"/\"\n    else:\n        strDateTime = strDateTime + dtmDate[6] + dtmDate[7] + \"/\"\n        strDateTime = (",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "documentation": {}
    },
    {
        "label": "find_serial_devices",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "peekOfCode": "def find_serial_devices(serial_matcher: str = \"\") -> List[str]:\n    \"\"\"\n    Finds a list of USB devices where the serial number (partially) matches the given string.\n    :param serial_matcher:\n        only device IDs starting with this string are returned\n    \"\"\"\n    serial_numbers = []\n    wmi = win32com.client.GetObject(\"winmgmts:\")\n    for usb_controller in wmi.InstancesOf(\"Win32_USBControllerDevice\"):\n        usb_device = wmi.Get(usb_controller.Dependent)",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "peekOfCode": "log = logging.getLogger(\"can.usb2can\")\ntry:\n    import win32com.client\nexcept ImportError:\n    log.warning(\n        \"win32com.client module required for usb2can. Install the 'pywin32' package.\"\n    )\n    raise\ndef WMIDateStringToDate(dtmDate) -> str:\n    if dtmDate[4] == 0:",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.serial_selector",
        "documentation": {}
    },
    {
        "label": "Usb2canBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "peekOfCode": "class Usb2canBus(BusABC):\n    \"\"\"Interface to a USB2CAN Bus.\n    This interface only works on Windows.\n    Please use socketcan on Linux.\n    :param channel:\n        The device's serial number. If not provided, Windows Management Instrumentation\n        will be used to identify the first such device.\n    :param bitrate:\n        Bitrate of channel in bit/s. Values will be limited to a maximum of 1000 Kb/s.\n        Default is 500 Kbs",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "documentation": {}
    },
    {
        "label": "message_convert_tx",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "peekOfCode": "def message_convert_tx(msg):\n    message_tx = CanalMsg()\n    length = msg.dlc\n    message_tx.sizeData = length\n    message_tx.id = msg.arbitration_id\n    for i in range(length):\n        message_tx.data[i] = msg.data[i]\n    message_tx.flags = 0x80000000\n    if msg.is_error_frame:\n        message_tx.flags |= IS_ERROR_FRAME",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "documentation": {}
    },
    {
        "label": "message_convert_rx",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "peekOfCode": "def message_convert_rx(message_rx):\n    \"\"\"convert the message from the CANAL type to pythoncan type\"\"\"\n    is_extended_id = bool(message_rx.flags & IS_ID_TYPE)\n    is_remote_frame = bool(message_rx.flags & IS_REMOTE_FRAME)\n    is_error_frame = bool(message_rx.flags & IS_ERROR_FRAME)\n    return Message(\n        timestamp=message_rx.timestamp,\n        is_remote_frame=is_remote_frame,\n        is_extended_id=is_extended_id,\n        is_error_frame=is_error_frame,",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "peekOfCode": "log = logging.getLogger(\"can.usb2can\")\ndef message_convert_tx(msg):\n    message_tx = CanalMsg()\n    length = msg.dlc\n    message_tx.sizeData = length\n    message_tx.id = msg.arbitration_id\n    for i in range(length):\n        message_tx.data[i] = msg.data[i]\n    message_tx.flags = 0x80000000\n    if msg.is_error_frame:",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canInterface",
        "documentation": {}
    },
    {
        "label": "CanalError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "class CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1\n    BUS_OFF = 2\n    BUS_PASSIVE = 3\n    BUS_WARNING = 4\n    CAN_ID = 5\n    CAN_MESSAGE = 6\n    CHANNEL = 7\n    FIFO_EMPTY = 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "CanalStatistics",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "class CanalStatistics(Structure):\n    _fields_ = [\n        (\"ReceiveFrams\", c_ulong),\n        (\"TransmistFrams\", c_ulong),\n        (\"ReceiveData\", c_ulong),\n        (\"TransmitData\", c_ulong),\n        (\"Overruns\", c_ulong),\n        (\"BusWarnings\", c_ulong),\n        (\"BusOff\", c_ulong),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "CanalStatus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "class CanalStatus(Structure):\n    _fields_ = [\n        (\"channel_status\", c_ulong),\n        (\"lasterrorcode\", c_ulong),\n        (\"lasterrorsubcode\", c_ulong),\n        (\"lasterrorstr\", c_byte * 80),\n    ]\n# data type for the CAN Message\nclass CanalMsg(Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "CanalMsg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "class CanalMsg(Structure):\n    _fields_ = [\n        (\"flags\", c_ulong),\n        (\"obid\", c_ulong),\n        (\"id\", c_ulong),\n        (\"sizeData\", c_ubyte),\n        (\"data\", c_ubyte * 8),\n        (\"timestamp\", c_ulong),\n    ]\nclass Usb2CanAbstractionLayer:",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "Usb2CanAbstractionLayer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "class Usb2CanAbstractionLayer:\n    \"\"\"A low level wrapper around the usb2can library.\n    Documentation: http://www.8devices.com/media/products/usb2can/downloads/CANAL_API.pdf\n    \"\"\"\n    def __init__(self, dll: StringPathLike = \"usb2can.dll\") -> None:\n        \"\"\"\n        :param dll:\n            the path to the usb2can DLL to load\n        :raises ~can.exceptions.CanInterfaceNotImplementedError:\n            if the DLL could not be loaded",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "log = logging.getLogger(\"can.usb2can\")\n# type definitions\nflags_t = c_ulong\npConfigureStr = c_char_p\nhandle_t = c_long\ntimeout_t = c_ulong\nfilter_t = c_ulong\n# flags mappings\nIS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "flags_t",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "flags_t = c_ulong\npConfigureStr = c_char_p\nhandle_t = c_long\ntimeout_t = c_ulong\nfilter_t = c_ulong\n# flags mappings\nIS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "pConfigureStr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "pConfigureStr = c_char_p\nhandle_t = c_long\ntimeout_t = c_ulong\nfilter_t = c_ulong\n# flags mappings\nIS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "handle_t",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "handle_t = c_long\ntimeout_t = c_ulong\nfilter_t = c_ulong\n# flags mappings\nIS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "timeout_t",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "timeout_t = c_ulong\nfilter_t = c_ulong\n# flags mappings\nIS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1\n    BUS_OFF = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "filter_t",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "filter_t = c_ulong\n# flags mappings\nIS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1\n    BUS_OFF = 2\n    BUS_PASSIVE = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "IS_ERROR_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "IS_ERROR_FRAME = 4\nIS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1\n    BUS_OFF = 2\n    BUS_PASSIVE = 3\n    BUS_WARNING = 4\n    CAN_ID = 5",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "IS_REMOTE_FRAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "IS_REMOTE_FRAME = 2\nIS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1\n    BUS_OFF = 2\n    BUS_PASSIVE = 3\n    BUS_WARNING = 4\n    CAN_ID = 5\n    CAN_MESSAGE = 6",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "IS_ID_TYPE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "IS_ID_TYPE = 1\nclass CanalError(IntEnum):\n    SUCCESS = 0\n    BAUDRATE = 1\n    BUS_OFF = 2\n    BUS_PASSIVE = 3\n    BUS_WARNING = 4\n    CAN_ID = 5\n    CAN_MESSAGE = 6\n    CHANNEL = 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "description": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "peekOfCode": "stat = CanalStatistics\nclass CanalStatus(Structure):\n    _fields_ = [\n        (\"channel_status\", c_ulong),\n        (\"lasterrorcode\", c_ulong),\n        (\"lasterrorsubcode\", c_ulong),\n        (\"lasterrorstr\", c_byte * 80),\n    ]\n# data type for the CAN Message\nclass CanalMsg(Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.usb2can.usb2canabstractionlayer",
        "documentation": {}
    },
    {
        "label": "VectorBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "class VectorBus(BusABC):\n    \"\"\"The CAN Bus implemented for the Vector interface.\"\"\"\n    @deprecated_args_alias(\n        deprecation_start=\"4.0.0\",\n        deprecation_end=\"5.0.0\",\n        **{\n            \"sjwAbr\": \"sjw_abr\",\n            \"tseg1Abr\": \"tseg1_abr\",\n            \"tseg2Abr\": \"tseg2_abr\",\n            \"sjwDbr\": \"sjw_dbr\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "VectorCanParams",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "class VectorCanParams(NamedTuple):\n    bitrate: int\n    sjw: int\n    tseg1: int\n    tseg2: int\n    sam: int\n    output_mode: xldefine.XL_OutputMode\n    can_op_mode: xldefine.XL_CANFD_BusParams_CanOpMode\nclass VectorCanFdParams(NamedTuple):\n    bitrate: int",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "VectorCanFdParams",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "class VectorCanFdParams(NamedTuple):\n    bitrate: int\n    data_bitrate: int\n    sjw_abr: int\n    tseg1_abr: int\n    tseg2_abr: int\n    sam_abr: int\n    sjw_dbr: int\n    tseg1_dbr: int\n    tseg2_dbr: int",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "VectorBusParams",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "class VectorBusParams(NamedTuple):\n    bus_type: xldefine.XL_BusTypes\n    can: VectorCanParams\n    canfd: VectorCanFdParams\nclass VectorChannelConfig(NamedTuple):\n    \"\"\"NamedTuple which contains the channel properties from Vector XL API.\"\"\"\n    name: str\n    hw_type: Union[int, xldefine.XL_HardwareType]\n    hw_index: int\n    hw_channel: int",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "VectorChannelConfig",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "class VectorChannelConfig(NamedTuple):\n    \"\"\"NamedTuple which contains the channel properties from Vector XL API.\"\"\"\n    name: str\n    hw_type: Union[int, xldefine.XL_HardwareType]\n    hw_index: int\n    hw_channel: int\n    channel_index: int\n    channel_mask: int\n    channel_capabilities: xldefine.XL_ChannelCapabilities\n    channel_bus_capabilities: xldefine.XL_BusCapabilities",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "get_channel_configs",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "def get_channel_configs() -> List[VectorChannelConfig]:\n    \"\"\"Read channel properties from Vector XL API.\"\"\"\n    try:\n        driver_config = _get_xl_driver_config()\n    except VectorError:\n        return []\n    channel_list: List[VectorChannelConfig] = []\n    for i in range(driver_config.channelCount):\n        xlcc: xlclass.XLchannelConfig = driver_config.channel[i]\n        vcc = VectorChannelConfig(",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "peekOfCode": "LOG = logging.getLogger(__name__)\n# Import safely Vector API module for Travis tests\nxldriver: Optional[ModuleType] = None\ntry:\n    from . import xldriver\nexcept FileNotFoundError as exc:\n    LOG.warning(\"Could not import vxlapi: %s\", exc)\nWaitForSingleObject: Optional[Callable[[int, int], int]]\nINFINITE: Optional[int]\ntry:",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.canlib",
        "documentation": {}
    },
    {
        "label": "VectorError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "peekOfCode": "class VectorError(CanError):\n    def __init__(self, error_code, error_string, function):\n        super().__init__(\n            message=f\"{function} failed ({error_string})\", error_code=error_code\n        )\n        # keep reference to args for pickling\n        self._args = error_code, error_string, function\n    def __reduce__(self):\n        return type(self), self._args, {}\nclass VectorInitializationError(VectorError, CanInitializationError):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "documentation": {}
    },
    {
        "label": "VectorInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "peekOfCode": "class VectorInitializationError(VectorError, CanInitializationError):\n    @staticmethod\n    def from_generic(error: VectorError) -> \"VectorInitializationError\":\n        return VectorInitializationError(*error._args)\nclass VectorOperationError(VectorError, CanOperationError):\n    @staticmethod\n    def from_generic(error: VectorError) -> \"VectorOperationError\":\n        return VectorOperationError(*error._args)",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "documentation": {}
    },
    {
        "label": "VectorOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "peekOfCode": "class VectorOperationError(VectorError, CanOperationError):\n    @staticmethod\n    def from_generic(error: VectorError) -> \"VectorOperationError\":\n        return VectorOperationError(*error._args)",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.exceptions",
        "documentation": {}
    },
    {
        "label": "s_xl_can_msg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),\n        (\"flags\", ctypes.c_ushort),\n        (\"dlc\", ctypes.c_ushort),\n        (\"res1\", XLuint64),\n        (\"data\", ctypes.c_ubyte * xldefine.MAX_MSG_LEN),\n        (\"res2\", XLuint64),\n    ]\nclass s_xl_can_ev_error(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_can_ev_error",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_ev_error(ctypes.Structure):\n    _fields_ = [(\"errorCode\", ctypes.c_ubyte), (\"reserved\", ctypes.c_ubyte * 95)]\nclass s_xl_chip_state(ctypes.Structure):\n    _fields_ = [\n        (\"busStatus\", ctypes.c_ubyte),\n        (\"txErrorCounter\", ctypes.c_ubyte),\n        (\"rxErrorCounter\", ctypes.c_ubyte),\n    ]\nclass s_xl_sync_pulse(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_chip_state",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_chip_state(ctypes.Structure):\n    _fields_ = [\n        (\"busStatus\", ctypes.c_ubyte),\n        (\"txErrorCounter\", ctypes.c_ubyte),\n        (\"rxErrorCounter\", ctypes.c_ubyte),\n    ]\nclass s_xl_sync_pulse(ctypes.Structure):\n    _fields_ = [\n        (\"pulseCode\", ctypes.c_ubyte),\n        (\"time\", XLuint64),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_sync_pulse",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_sync_pulse(ctypes.Structure):\n    _fields_ = [\n        (\"pulseCode\", ctypes.c_ubyte),\n        (\"time\", XLuint64),\n    ]\nclass s_xl_can_ev_chip_state(ctypes.Structure):\n    _fields_ = [\n        (\"busStatus\", ctypes.c_ubyte),\n        (\"txErrorCounter\", ctypes.c_ubyte),\n        (\"rxErrorCounter\", ctypes.c_ubyte),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_can_ev_chip_state",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_ev_chip_state(ctypes.Structure):\n    _fields_ = [\n        (\"busStatus\", ctypes.c_ubyte),\n        (\"txErrorCounter\", ctypes.c_ubyte),\n        (\"rxErrorCounter\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte),\n        (\"reserved0\", ctypes.c_uint),\n    ]\nclass s_xl_can_ev_sync_pulse(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_can_ev_sync_pulse",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_ev_sync_pulse(ctypes.Structure):\n    _fields_ = [\n        (\"triggerSource\", ctypes.c_uint),\n        (\"reserved\", ctypes.c_uint),\n        (\"time\", XLuint64),\n    ]\n# BASIC bus message structure\nclass s_xl_tag_data(ctypes.Union):\n    _fields_ = [\n        (\"msg\", s_xl_can_msg),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_tag_data",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_tag_data(ctypes.Union):\n    _fields_ = [\n        (\"msg\", s_xl_can_msg),\n        (\"chipState\", s_xl_chip_state),\n        (\"syncPulse\", s_xl_sync_pulse),\n    ]\n# CAN FD messages\nclass s_xl_can_ev_rx_msg(ctypes.Structure):\n    _fields_ = [\n        (\"canId\", ctypes.c_uint),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_can_ev_rx_msg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_ev_rx_msg(ctypes.Structure):\n    _fields_ = [\n        (\"canId\", ctypes.c_uint),\n        (\"msgFlags\", ctypes.c_uint),\n        (\"crc\", ctypes.c_uint),\n        (\"reserved1\", ctypes.c_ubyte * 12),\n        (\"totalBitCnt\", ctypes.c_ushort),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte * 5),\n        (\"data\", ctypes.c_ubyte * xldefine.XL_CAN_MAX_DATA_LEN),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_can_ev_tx_request",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_ev_tx_request(ctypes.Structure):\n    _fields_ = [\n        (\"canId\", ctypes.c_uint),\n        (\"msgFlags\", ctypes.c_uint),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"txAttemptConf\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ushort),\n        (\"data\", ctypes.c_ubyte * xldefine.XL_CAN_MAX_DATA_LEN),\n    ]\nclass s_xl_can_tx_msg(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_can_tx_msg",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_can_tx_msg(ctypes.Structure):\n    _fields_ = [\n        (\"canId\", ctypes.c_uint),\n        (\"msgFlags\", ctypes.c_uint),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte * 7),\n        (\"data\", ctypes.c_ubyte * xldefine.XL_CAN_MAX_DATA_LEN),\n    ]\nclass s_rxTagData(ctypes.Union):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_rxTagData",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_rxTagData(ctypes.Union):\n    _fields_ = [\n        (\"canRxOkMsg\", s_xl_can_ev_rx_msg),\n        (\"canTxOkMsg\", s_xl_can_ev_rx_msg),\n        (\"canTxRequest\", s_xl_can_ev_tx_request),\n        (\"canError\", s_xl_can_ev_error),\n        (\"canChipState\", s_xl_can_ev_chip_state),\n        (\"canSyncPulse\", s_xl_can_ev_sync_pulse),\n    ]\nclass s_txTagData(ctypes.Union):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_txTagData",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_txTagData(ctypes.Union):\n    _fields_ = [(\"canMsg\", s_xl_can_tx_msg)]\nclass XLevent(ctypes.Structure):\n    _fields_ = [\n        (\"tag\", XLeventTag),\n        (\"chanIndex\", ctypes.c_ubyte),\n        (\"transId\", ctypes.c_ushort),\n        (\"portHandle\", ctypes.c_ushort),\n        (\"flags\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLevent",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLevent(ctypes.Structure):\n    _fields_ = [\n        (\"tag\", XLeventTag),\n        (\"chanIndex\", ctypes.c_ubyte),\n        (\"transId\", ctypes.c_ushort),\n        (\"portHandle\", ctypes.c_ushort),\n        (\"flags\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte),\n        (\"timeStamp\", XLuint64),\n        (\"tagData\", s_xl_tag_data),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLcanRxEvent",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLcanRxEvent(ctypes.Structure):\n    _fields_ = [\n        (\"size\", ctypes.c_int),\n        (\"tag\", ctypes.c_ushort),\n        (\"chanIndex\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte),\n        (\"userHandle\", ctypes.c_int),\n        (\"flagsChip\", ctypes.c_ushort),\n        (\"reserved0\", ctypes.c_ushort),\n        (\"reserved1\", XLuint64),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLcanTxEvent",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLcanTxEvent(ctypes.Structure):\n    _fields_ = [\n        (\"tag\", ctypes.c_ushort),\n        (\"transId\", ctypes.c_ushort),\n        (\"chanIndex\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte * 3),\n        (\"tagData\", s_txTagData),\n    ]\n# CAN configuration structure\nclass XLchipParams(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLchipParams",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLchipParams(ctypes.Structure):\n    _fields_ = [\n        (\"bitRate\", ctypes.c_ulong),\n        (\"sjw\", ctypes.c_ubyte),\n        (\"tseg1\", ctypes.c_ubyte),\n        (\"tseg2\", ctypes.c_ubyte),\n        (\"sam\", ctypes.c_ubyte),\n    ]\n# CAN FD configuration structure\nclass XLcanFdConf(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLcanFdConf",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLcanFdConf(ctypes.Structure):\n    _fields_ = [\n        (\"arbitrationBitRate\", ctypes.c_uint),\n        (\"sjwAbr\", ctypes.c_uint),\n        (\"tseg1Abr\", ctypes.c_uint),\n        (\"tseg2Abr\", ctypes.c_uint),\n        (\"dataBitRate\", ctypes.c_uint),\n        (\"sjwDbr\", ctypes.c_uint),\n        (\"tseg1Dbr\", ctypes.c_uint),\n        (\"tseg2Dbr\", ctypes.c_uint),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_bus_params_data_can",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_bus_params_data_can(ctypes.Structure):\n    _fields_ = [\n        (\"bitRate\", ctypes.c_uint),\n        (\"sjw\", ctypes.c_ubyte),\n        (\"tseg1\", ctypes.c_ubyte),\n        (\"tseg2\", ctypes.c_ubyte),\n        (\"sam\", ctypes.c_ubyte),\n        (\"outputMode\", ctypes.c_ubyte),\n        (\"reserved\", ctypes.c_ubyte * 7),\n        (\"canOpMode\", ctypes.c_ubyte),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_bus_params_data_canfd",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_bus_params_data_canfd(ctypes.Structure):\n    _fields_ = [\n        (\"arbitrationBitRate\", ctypes.c_uint),\n        (\"sjwAbr\", ctypes.c_ubyte),\n        (\"tseg1Abr\", ctypes.c_ubyte),\n        (\"tseg2Abr\", ctypes.c_ubyte),\n        (\"samAbr\", ctypes.c_ubyte),\n        (\"outputMode\", ctypes.c_ubyte),\n        (\"sjwDbr\", ctypes.c_ubyte),\n        (\"tseg1Dbr\", ctypes.c_ubyte),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "s_xl_bus_params_data",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class s_xl_bus_params_data(ctypes.Union):\n    _fields_ = [\n        (\"can\", s_xl_bus_params_data_can),\n        (\"canFD\", s_xl_bus_params_data_canfd),\n        (\"most\", ctypes.c_ubyte * 12),\n        (\"flexray\", ctypes.c_ubyte * 12),\n        (\"ethernet\", ctypes.c_ubyte * 12),\n        (\"a429\", ctypes.c_ubyte * 28),\n    ]\nclass XLbusParams(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLbusParams",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLbusParams(ctypes.Structure):\n    _fields_ = [(\"busType\", ctypes.c_uint), (\"data\", s_xl_bus_params_data)]\nclass XLchannelConfig(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"name\", ctypes.c_char * 32),\n        (\"hwType\", ctypes.c_ubyte),\n        (\"hwIndex\", ctypes.c_ubyte),\n        (\"hwChannel\", ctypes.c_ubyte),\n        (\"transceiverType\", ctypes.c_ushort),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLchannelConfig",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLchannelConfig(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"name\", ctypes.c_char * 32),\n        (\"hwType\", ctypes.c_ubyte),\n        (\"hwIndex\", ctypes.c_ubyte),\n        (\"hwChannel\", ctypes.c_ubyte),\n        (\"transceiverType\", ctypes.c_ushort),\n        (\"transceiverState\", ctypes.c_ushort),\n        (\"configError\", ctypes.c_ushort),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLdriverConfig",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "class XLdriverConfig(ctypes.Structure):\n    _fields_ = [\n        (\"dllVersion\", ctypes.c_uint),\n        (\"channelCount\", ctypes.c_uint),\n        (\"reserved\", ctypes.c_uint * 10),\n        (\"channel\", XLchannelConfig * 64),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLuint64",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLuint64 = ctypes.c_int64\nXLaccess = XLuint64\nXLhandle = ctypes.c_void_p\nXLstatus = ctypes.c_short\nXLportHandle = ctypes.c_long\nXLeventTag = ctypes.c_ubyte\nXLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLaccess",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLaccess = XLuint64\nXLhandle = ctypes.c_void_p\nXLstatus = ctypes.c_short\nXLportHandle = ctypes.c_long\nXLeventTag = ctypes.c_ubyte\nXLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLhandle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLhandle = ctypes.c_void_p\nXLstatus = ctypes.c_short\nXLportHandle = ctypes.c_long\nXLeventTag = ctypes.c_ubyte\nXLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),\n        (\"flags\", ctypes.c_ushort),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLstatus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLstatus = ctypes.c_short\nXLportHandle = ctypes.c_long\nXLeventTag = ctypes.c_ubyte\nXLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),\n        (\"flags\", ctypes.c_ushort),\n        (\"dlc\", ctypes.c_ushort),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLportHandle",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLportHandle = ctypes.c_long\nXLeventTag = ctypes.c_ubyte\nXLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),\n        (\"flags\", ctypes.c_ushort),\n        (\"dlc\", ctypes.c_ushort),\n        (\"res1\", XLuint64),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLeventTag",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLeventTag = ctypes.c_ubyte\nXLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),\n        (\"flags\", ctypes.c_ushort),\n        (\"dlc\", ctypes.c_ushort),\n        (\"res1\", XLuint64),\n        (\"data\", ctypes.c_ubyte * xldefine.MAX_MSG_LEN),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XLstringType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "peekOfCode": "XLstringType = ctypes.c_char_p\n# structure for XL_RECEIVE_MSG, XL_TRANSMIT_MSG\nclass s_xl_can_msg(ctypes.Structure):\n    _fields_ = [\n        (\"id\", ctypes.c_ulong),\n        (\"flags\", ctypes.c_ushort),\n        (\"dlc\", ctypes.c_ushort),\n        (\"res1\", XLuint64),\n        (\"data\", ctypes.c_ubyte * xldefine.MAX_MSG_LEN),\n        (\"res2\", XLuint64),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xlclass",
        "documentation": {}
    },
    {
        "label": "XL_AC_Flags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_AC_Flags(IntEnum):\n    XL_ACTIVATE_NONE = 0\n    XL_ACTIVATE_RESET_CLOCK = 8\nclass XL_AcceptanceFilter(IntEnum):\n    XL_CAN_STD = 1\n    XL_CAN_EXT = 2\nclass XL_BusCapabilities(IntFlag):\n    XL_BUS_COMPATIBLE_CAN = 1\n    XL_BUS_ACTIVE_CAP_CAN = 1 << 16\n    XL_BUS_COMPATIBLE_LIN = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_AcceptanceFilter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_AcceptanceFilter(IntEnum):\n    XL_CAN_STD = 1\n    XL_CAN_EXT = 2\nclass XL_BusCapabilities(IntFlag):\n    XL_BUS_COMPATIBLE_CAN = 1\n    XL_BUS_ACTIVE_CAP_CAN = 1 << 16\n    XL_BUS_COMPATIBLE_LIN = 2\n    XL_BUS_ACTIVE_CAP_LIN = 2 << 16\n    XL_BUS_COMPATIBLE_FLEXRAY = 4\n    XL_BUS_ACTIVE_CAP_FLEXRAY = 4 << 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_BusCapabilities",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_BusCapabilities(IntFlag):\n    XL_BUS_COMPATIBLE_CAN = 1\n    XL_BUS_ACTIVE_CAP_CAN = 1 << 16\n    XL_BUS_COMPATIBLE_LIN = 2\n    XL_BUS_ACTIVE_CAP_LIN = 2 << 16\n    XL_BUS_COMPATIBLE_FLEXRAY = 4\n    XL_BUS_ACTIVE_CAP_FLEXRAY = 4 << 16\n    XL_BUS_COMPATIBLE_MOST = 16\n    XL_BUS_ACTIVE_CAP_MOST = 16 << 16\n    XL_BUS_COMPATIBLE_DAIO = 64",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_BusStatus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_BusStatus(IntEnum):\n    XL_CHIPSTAT_BUSOFF = 1\n    XL_CHIPSTAT_ERROR_PASSIVE = 2\n    XL_CHIPSTAT_ERROR_WARNING = 4\n    XL_CHIPSTAT_ERROR_ACTIVE = 8\nclass XL_BusTypes(IntFlag):\n    XL_BUS_TYPE_NONE = 0  # =0x00000000\n    XL_BUS_TYPE_CAN = 1  # =0x00000001\n    XL_BUS_TYPE_LIN = 2  # =0x00000002\n    XL_BUS_TYPE_FLEXRAY = 4  # =0x00000004",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_BusTypes",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_BusTypes(IntFlag):\n    XL_BUS_TYPE_NONE = 0  # =0x00000000\n    XL_BUS_TYPE_CAN = 1  # =0x00000001\n    XL_BUS_TYPE_LIN = 2  # =0x00000002\n    XL_BUS_TYPE_FLEXRAY = 4  # =0x00000004\n    XL_BUS_TYPE_AFDX = 8  # =0x00000008\n    XL_BUS_TYPE_MOST = 16  # =0x00000010\n    XL_BUS_TYPE_DAIO = 64  # =0x00000040\n    XL_BUS_TYPE_J1708 = 256  # =0x00000100\n    XL_BUS_TYPE_KLINE = 2048  # =0x00000800",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_BusParams_CanOpMode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_BusParams_CanOpMode(IntFlag):\n    XL_BUS_PARAMS_CANOPMODE_CAN20 = 1\n    XL_BUS_PARAMS_CANOPMODE_CANFD = 2\n    XL_BUS_PARAMS_CANOPMODE_CANFD_NO_ISO = 8\nclass XL_CANFD_ConfigOptions(IntEnum):\n    CANFD_CONFOPT_NO_ISO = 8\nclass XL_CANFD_RX_EV_ERROR_errorCode(IntEnum):\n    XL_CAN_ERRC_BIT_ERROR = 1\n    XL_CAN_ERRC_FORM_ERROR = 2\n    XL_CAN_ERRC_STUFF_ERROR = 3",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_ConfigOptions",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_ConfigOptions(IntEnum):\n    CANFD_CONFOPT_NO_ISO = 8\nclass XL_CANFD_RX_EV_ERROR_errorCode(IntEnum):\n    XL_CAN_ERRC_BIT_ERROR = 1\n    XL_CAN_ERRC_FORM_ERROR = 2\n    XL_CAN_ERRC_STUFF_ERROR = 3\n    XL_CAN_ERRC_OTHER_ERROR = 4\n    XL_CAN_ERRC_CRC_ERROR = 5\n    XL_CAN_ERRC_ACK_ERROR = 6\n    XL_CAN_ERRC_NACK_ERROR = 7",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_RX_EV_ERROR_errorCode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_RX_EV_ERROR_errorCode(IntEnum):\n    XL_CAN_ERRC_BIT_ERROR = 1\n    XL_CAN_ERRC_FORM_ERROR = 2\n    XL_CAN_ERRC_STUFF_ERROR = 3\n    XL_CAN_ERRC_OTHER_ERROR = 4\n    XL_CAN_ERRC_CRC_ERROR = 5\n    XL_CAN_ERRC_ACK_ERROR = 6\n    XL_CAN_ERRC_NACK_ERROR = 7\n    XL_CAN_ERRC_OVLD_ERROR = 8\n    XL_CAN_ERRC_EXCPT_ERROR = 9",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_RX_EventTags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_RX_EventTags(IntEnum):\n    XL_SYNC_PULSE = 11\n    XL_CAN_EV_TAG_RX_OK = 1024\n    XL_CAN_EV_TAG_RX_ERROR = 1025\n    XL_CAN_EV_TAG_TX_ERROR = 1026\n    XL_CAN_EV_TAG_TX_REQUEST = 1027\n    XL_CAN_EV_TAG_TX_OK = 1028\n    XL_CAN_EV_TAG_CHIP_STATE = 1033\nclass XL_CANFD_RX_MessageFlags(IntFlag):\n    XL_CAN_RXMSG_FLAG_NONE = 0",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_RX_MessageFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_RX_MessageFlags(IntFlag):\n    XL_CAN_RXMSG_FLAG_NONE = 0\n    XL_CAN_RXMSG_FLAG_EDL = 1\n    XL_CAN_RXMSG_FLAG_BRS = 2\n    XL_CAN_RXMSG_FLAG_ESI = 4\n    XL_CAN_RXMSG_FLAG_RTR = 16\n    XL_CAN_RXMSG_FLAG_EF = 512\n    XL_CAN_RXMSG_FLAG_ARB_LOST = 1024\n    XL_CAN_RXMSG_FLAG_WAKEUP = 8192\n    XL_CAN_RXMSG_FLAG_TE = 16384",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_TX_EventTags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_TX_EventTags(IntEnum):\n    XL_CAN_EV_TAG_TX_MSG = 1088  # =0x0440\n    XL_CAN_EV_TAG_TX_ERRFR = 1089  # =0x0441\nclass XL_CANFD_TX_MessageFlags(IntFlag):\n    XL_CAN_TXMSG_FLAG_NONE = 0\n    XL_CAN_TXMSG_FLAG_EDL = 1\n    XL_CAN_TXMSG_FLAG_BRS = 2\n    XL_CAN_TXMSG_FLAG_RTR = 16\n    XL_CAN_TXMSG_FLAG_HIGHPRIO = 128\n    XL_CAN_TXMSG_FLAG_WAKEUP = 512",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CANFD_TX_MessageFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_CANFD_TX_MessageFlags(IntFlag):\n    XL_CAN_TXMSG_FLAG_NONE = 0\n    XL_CAN_TXMSG_FLAG_EDL = 1\n    XL_CAN_TXMSG_FLAG_BRS = 2\n    XL_CAN_TXMSG_FLAG_RTR = 16\n    XL_CAN_TXMSG_FLAG_HIGHPRIO = 128\n    XL_CAN_TXMSG_FLAG_WAKEUP = 512\nclass XL_ChannelCapabilities(IntFlag):\n    XL_CHANNEL_FLAG_TIME_SYNC_RUNNING = 1\n    XL_CHANNEL_FLAG_NO_HWSYNC_SUPPORT = 1024",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_ChannelCapabilities",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_ChannelCapabilities(IntFlag):\n    XL_CHANNEL_FLAG_TIME_SYNC_RUNNING = 1\n    XL_CHANNEL_FLAG_NO_HWSYNC_SUPPORT = 1024\n    XL_CHANNEL_FLAG_SPDIF_CAPABLE = 16384\n    XL_CHANNEL_FLAG_CANFD_BOSCH_SUPPORT = 536870912\n    XL_CHANNEL_FLAG_CMACTLICENSE_SUPPORT = 1073741824\n    XL_CHANNEL_FLAG_CANFD_ISO_SUPPORT = 2147483648\nclass XL_EventFlags(IntEnum):\n    XL_EVENT_FLAG_OVERRUN = 1\nclass XL_EventTags(IntEnum):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_EventFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_EventFlags(IntEnum):\n    XL_EVENT_FLAG_OVERRUN = 1\nclass XL_EventTags(IntEnum):\n    XL_NO_COMMAND = 0\n    XL_RECEIVE_MSG = 1\n    XL_CHIP_STATE = 4\n    XL_TRANSCEIVER = 6\n    XL_TIMER = 8\n    XL_TRANSMIT_MSG = 10\n    XL_SYNC_PULSE = 11",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_EventTags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_EventTags(IntEnum):\n    XL_NO_COMMAND = 0\n    XL_RECEIVE_MSG = 1\n    XL_CHIP_STATE = 4\n    XL_TRANSCEIVER = 6\n    XL_TIMER = 8\n    XL_TRANSMIT_MSG = 10\n    XL_SYNC_PULSE = 11\n    XL_APPLICATION_NOTIFICATION = 15\nclass XL_InterfaceVersion(IntEnum):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_InterfaceVersion",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_InterfaceVersion(IntEnum):\n    XL_INTERFACE_VERSION_V2 = 2\n    XL_INTERFACE_VERSION_V3 = 3\n    XL_INTERFACE_VERSION = XL_INTERFACE_VERSION_V3\n    XL_INTERFACE_VERSION_V4 = 4\nclass XL_MessageFlags(IntEnum):\n    XL_CAN_MSG_FLAG_NONE = 0\n    XL_CAN_MSG_FLAG_ERROR_FRAME = 1\n    XL_CAN_MSG_FLAG_OVERRUN = 2\n    XL_CAN_MSG_FLAG_NERR = 4",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_MessageFlags",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_MessageFlags(IntEnum):\n    XL_CAN_MSG_FLAG_NONE = 0\n    XL_CAN_MSG_FLAG_ERROR_FRAME = 1\n    XL_CAN_MSG_FLAG_OVERRUN = 2\n    XL_CAN_MSG_FLAG_NERR = 4\n    XL_CAN_MSG_FLAG_WAKEUP = 8\n    XL_CAN_MSG_FLAG_REMOTE_FRAME = 16\n    XL_CAN_MSG_FLAG_RESERVED_1 = 32\n    XL_CAN_MSG_FLAG_TX_COMPLETED = 64\n    XL_CAN_MSG_FLAG_TX_REQUEST = 128",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_MessageFlagsExtended",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_MessageFlagsExtended(IntEnum):\n    XL_CAN_EXT_MSG_ID = 2147483648\nclass XL_OutputMode(IntEnum):\n    XL_OUTPUT_MODE_SILENT = 0\n    XL_OUTPUT_MODE_NORMAL = 1\n    XL_OUTPUT_MODE_TX_OFF = 2\n    XL_OUTPUT_MODE_SJA_1000_SILENT = 3\nclass XL_Sizes(IntEnum):\n    XL_MAX_LENGTH = 31\n    XL_MAX_APPNAME = 32",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_OutputMode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_OutputMode(IntEnum):\n    XL_OUTPUT_MODE_SILENT = 0\n    XL_OUTPUT_MODE_NORMAL = 1\n    XL_OUTPUT_MODE_TX_OFF = 2\n    XL_OUTPUT_MODE_SJA_1000_SILENT = 3\nclass XL_Sizes(IntEnum):\n    XL_MAX_LENGTH = 31\n    XL_MAX_APPNAME = 32\n    XL_MAX_NAME_LENGTH = 48\n    XLEVENT_SIZE = 48",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_Sizes",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_Sizes(IntEnum):\n    XL_MAX_LENGTH = 31\n    XL_MAX_APPNAME = 32\n    XL_MAX_NAME_LENGTH = 48\n    XLEVENT_SIZE = 48\n    XL_CONFIG_MAX_CHANNELS = 64\n    XL_APPLCONFIG_MAX_CHANNELS = 256\nclass XL_Status(IntEnum):\n    XL_SUCCESS = 0  # =0x0000\n    XL_PENDING = 1  # =0x0001",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_Status",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_Status(IntEnum):\n    XL_SUCCESS = 0  # =0x0000\n    XL_PENDING = 1  # =0x0001\n    XL_ERR_QUEUE_IS_EMPTY = 10  # =0x000A\n    XL_ERR_QUEUE_IS_FULL = 11  # =0x000B\n    XL_ERR_TX_NOT_POSSIBLE = 12  # =0x000C\n    XL_ERR_NO_LICENSE = 14  # =0x000E\n    XL_ERR_WRONG_PARAMETER = 101  # =0x0065\n    XL_ERR_TWICE_REGISTER = 110  # =0x006E\n    XL_ERR_INVALID_CHAN_INDEX = 111  # =0x006F",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_TimeSyncNewValue",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_TimeSyncNewValue(IntEnum):\n    XL_SET_TIMESYNC_NO_CHANGE = 0\n    XL_SET_TIMESYNC_ON = 1\n    XL_SET_TIMESYNC_OFF = 2\nclass XL_HardwareType(IntEnum):\n    XL_HWTYPE_NONE = 0\n    XL_HWTYPE_VIRTUAL = 1\n    XL_HWTYPE_CANCARDX = 2\n    XL_HWTYPE_CANAC2PCI = 6\n    XL_HWTYPE_CANCARDY = 12",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_HardwareType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_HardwareType(IntEnum):\n    XL_HWTYPE_NONE = 0\n    XL_HWTYPE_VIRTUAL = 1\n    XL_HWTYPE_CANCARDX = 2\n    XL_HWTYPE_CANAC2PCI = 6\n    XL_HWTYPE_CANCARDY = 12\n    XL_HWTYPE_CANCARDXL = 15\n    XL_HWTYPE_CANCASEXL = 21\n    XL_HWTYPE_CANCASEXL_LOG_OBSOLETE = 23\n    XL_HWTYPE_CANBOARDXL = 25",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_SyncPulseSource",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "class XL_SyncPulseSource(IntEnum):\n    XL_SYNC_PULSE_EXTERNAL = 0\n    XL_SYNC_PULSE_OUR = 1\n    XL_SYNC_PULSE_OUR_SHARED = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "MAX_MSG_LEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "MAX_MSG_LEN = 8\nXL_CAN_MAX_DATA_LEN = 64\nXL_INVALID_PORTHANDLE = -1\nclass XL_AC_Flags(IntEnum):\n    XL_ACTIVATE_NONE = 0\n    XL_ACTIVATE_RESET_CLOCK = 8\nclass XL_AcceptanceFilter(IntEnum):\n    XL_CAN_STD = 1\n    XL_CAN_EXT = 2\nclass XL_BusCapabilities(IntFlag):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_CAN_MAX_DATA_LEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "XL_CAN_MAX_DATA_LEN = 64\nXL_INVALID_PORTHANDLE = -1\nclass XL_AC_Flags(IntEnum):\n    XL_ACTIVATE_NONE = 0\n    XL_ACTIVATE_RESET_CLOCK = 8\nclass XL_AcceptanceFilter(IntEnum):\n    XL_CAN_STD = 1\n    XL_CAN_EXT = 2\nclass XL_BusCapabilities(IntFlag):\n    XL_BUS_COMPATIBLE_CAN = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "XL_INVALID_PORTHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "peekOfCode": "XL_INVALID_PORTHANDLE = -1\nclass XL_AC_Flags(IntEnum):\n    XL_ACTIVATE_NONE = 0\n    XL_ACTIVATE_RESET_CLOCK = 8\nclass XL_AcceptanceFilter(IntEnum):\n    XL_CAN_STD = 1\n    XL_CAN_EXT = 2\nclass XL_BusCapabilities(IntFlag):\n    XL_BUS_COMPATIBLE_CAN = 1\n    XL_BUS_ACTIVE_CAP_CAN = 1 << 16",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldefine",
        "documentation": {}
    },
    {
        "label": "check_status_operation",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "def check_status_operation(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorOperationError` on error.\"\"\"\n    if result > 0:\n        raise VectorOperationError(\n            result, xlGetErrorString(result).decode(), function.__name__\n        )\n    return result\ndef check_status_initialization(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorInitializationError` on error.\"\"\"\n    if result > 0:",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "check_status_initialization",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "def check_status_initialization(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorInitializationError` on error.\"\"\"\n    if result > 0:\n        raise VectorInitializationError(\n            result, xlGetErrorString(result).decode(), function.__name__\n        )\n    return result\nxlGetDriverConfig = _xlapi_dll.xlGetDriverConfig\nxlGetDriverConfig.argtypes = [ctypes.POINTER(xlclass.XLdriverConfig)]\nxlGetDriverConfig.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "LOG = logging.getLogger(__name__)\n# Load Windows DLL\nDLL_NAME = \"vxlapi64\" if platform.architecture()[0] == \"64bit\" else \"vxlapi\"\nif dll_path := find_library(DLL_NAME):\n    _xlapi_dll = ctypes.windll.LoadLibrary(dll_path)\nelse:\n    raise FileNotFoundError(f\"Vector XL library not found: {DLL_NAME}\")\n# ctypes wrapping for API functions\nxlGetErrorString = _xlapi_dll.xlGetErrorString\nxlGetErrorString.argtypes = [xlclass.XLstatus]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "DLL_NAME",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "DLL_NAME = \"vxlapi64\" if platform.architecture()[0] == \"64bit\" else \"vxlapi\"\nif dll_path := find_library(DLL_NAME):\n    _xlapi_dll = ctypes.windll.LoadLibrary(dll_path)\nelse:\n    raise FileNotFoundError(f\"Vector XL library not found: {DLL_NAME}\")\n# ctypes wrapping for API functions\nxlGetErrorString = _xlapi_dll.xlGetErrorString\nxlGetErrorString.argtypes = [xlclass.XLstatus]\nxlGetErrorString.restype = xlclass.XLstringType\ndef check_status_operation(result, function, arguments):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetErrorString",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetErrorString = _xlapi_dll.xlGetErrorString\nxlGetErrorString.argtypes = [xlclass.XLstatus]\nxlGetErrorString.restype = xlclass.XLstringType\ndef check_status_operation(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorOperationError` on error.\"\"\"\n    if result > 0:\n        raise VectorOperationError(\n            result, xlGetErrorString(result).decode(), function.__name__\n        )\n    return result",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetErrorString.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetErrorString.argtypes = [xlclass.XLstatus]\nxlGetErrorString.restype = xlclass.XLstringType\ndef check_status_operation(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorOperationError` on error.\"\"\"\n    if result > 0:\n        raise VectorOperationError(\n            result, xlGetErrorString(result).decode(), function.__name__\n        )\n    return result\ndef check_status_initialization(result, function, arguments):",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetErrorString.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetErrorString.restype = xlclass.XLstringType\ndef check_status_operation(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorOperationError` on error.\"\"\"\n    if result > 0:\n        raise VectorOperationError(\n            result, xlGetErrorString(result).decode(), function.__name__\n        )\n    return result\ndef check_status_initialization(result, function, arguments):\n    \"\"\"Check the status and raise a :class:`VectorInitializationError` on error.\"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetDriverConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetDriverConfig = _xlapi_dll.xlGetDriverConfig\nxlGetDriverConfig.argtypes = [ctypes.POINTER(xlclass.XLdriverConfig)]\nxlGetDriverConfig.restype = xlclass.XLstatus\nxlGetDriverConfig.errcheck = check_status_operation\nxlOpenDriver = _xlapi_dll.xlOpenDriver\nxlOpenDriver.argtypes = []\nxlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetDriverConfig.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetDriverConfig.argtypes = [ctypes.POINTER(xlclass.XLdriverConfig)]\nxlGetDriverConfig.restype = xlclass.XLstatus\nxlGetDriverConfig.errcheck = check_status_operation\nxlOpenDriver = _xlapi_dll.xlOpenDriver\nxlOpenDriver.argtypes = []\nxlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetDriverConfig.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetDriverConfig.restype = xlclass.XLstatus\nxlGetDriverConfig.errcheck = check_status_operation\nxlOpenDriver = _xlapi_dll.xlOpenDriver\nxlOpenDriver.argtypes = []\nxlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetDriverConfig.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetDriverConfig.errcheck = check_status_operation\nxlOpenDriver = _xlapi_dll.xlOpenDriver\nxlOpenDriver.argtypes = []\nxlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenDriver",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenDriver = _xlapi_dll.xlOpenDriver\nxlOpenDriver.argtypes = []\nxlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenDriver.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenDriver.argtypes = []\nxlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenDriver.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenDriver.restype = xlclass.XLstatus\nxlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenDriver.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenDriver.errcheck = check_status_initialization\nxlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCloseDriver",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCloseDriver = _xlapi_dll.xlCloseDriver\nxlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCloseDriver.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCloseDriver.argtypes = []\nxlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCloseDriver.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCloseDriver.restype = xlclass.XLstatus\nxlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCloseDriver.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCloseDriver.errcheck = check_status_operation\nxlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.c_uint,\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetApplConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetApplConfig = _xlapi_dll.xlGetApplConfig\nxlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.c_uint,\n]\nxlGetApplConfig.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetApplConfig.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.c_uint,\n]\nxlGetApplConfig.restype = xlclass.XLstatus\nxlGetApplConfig.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetApplConfig.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetApplConfig.restype = xlclass.XLstatus\nxlGetApplConfig.errcheck = check_status_initialization\nxlSetApplConfig = _xlapi_dll.xlSetApplConfig\nxlSetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetApplConfig.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetApplConfig.errcheck = check_status_initialization\nxlSetApplConfig = _xlapi_dll.xlSetApplConfig\nxlSetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetApplConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetApplConfig = _xlapi_dll.xlSetApplConfig\nxlSetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlSetApplConfig.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetApplConfig.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetApplConfig.argtypes = [\n    ctypes.c_char_p,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlSetApplConfig.restype = xlclass.XLstatus\nxlSetApplConfig.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetApplConfig.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetApplConfig.restype = xlclass.XLstatus\nxlSetApplConfig.errcheck = check_status_initialization\nxlGetChannelIndex = _xlapi_dll.xlGetChannelIndex\nxlGetChannelIndex.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelIndex.restype = ctypes.c_int\nxlGetChannelMask = _xlapi_dll.xlGetChannelMask\nxlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetApplConfig.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetApplConfig.errcheck = check_status_initialization\nxlGetChannelIndex = _xlapi_dll.xlGetChannelIndex\nxlGetChannelIndex.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelIndex.restype = ctypes.c_int\nxlGetChannelMask = _xlapi_dll.xlGetChannelMask\nxlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelIndex",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelIndex = _xlapi_dll.xlGetChannelIndex\nxlGetChannelIndex.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelIndex.restype = ctypes.c_int\nxlGetChannelMask = _xlapi_dll.xlGetChannelMask\nxlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelIndex.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelIndex.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelIndex.restype = ctypes.c_int\nxlGetChannelMask = _xlapi_dll.xlGetChannelMask\nxlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelIndex.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelIndex.restype = ctypes.c_int\nxlGetChannelMask = _xlapi_dll.xlGetChannelMask\nxlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLaccess),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelMask",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelMask = _xlapi_dll.xlGetChannelMask\nxlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLaccess),\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelMask.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelMask.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int]\nxlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLaccess),\n    ctypes.c_uint,\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelMask.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelMask.restype = xlclass.XLaccess\nxlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLaccess),\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenPort",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenPort = _xlapi_dll.xlOpenPort\nxlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLaccess),\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenPort.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenPort.argtypes = [\n    ctypes.POINTER(xlclass.XLportHandle),\n    ctypes.c_char_p,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLaccess),\n    ctypes.c_uint,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlOpenPort.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenPort.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenPort.restype = xlclass.XLstatus\nxlOpenPort.errcheck = check_status_initialization\nxlGetSyncTime = _xlapi_dll.xlGetSyncTime\nxlGetSyncTime.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLuint64)]\nxlGetSyncTime.restype = xlclass.XLstatus\nxlGetSyncTime.errcheck = check_status_initialization\nxlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlOpenPort.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlOpenPort.errcheck = check_status_initialization\nxlGetSyncTime = _xlapi_dll.xlGetSyncTime\nxlGetSyncTime.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLuint64)]\nxlGetSyncTime.restype = xlclass.XLstatus\nxlGetSyncTime.errcheck = check_status_initialization\nxlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetSyncTime",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetSyncTime = _xlapi_dll.xlGetSyncTime\nxlGetSyncTime.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLuint64)]\nxlGetSyncTime.restype = xlclass.XLstatus\nxlGetSyncTime.errcheck = check_status_initialization\nxlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetSyncTime.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetSyncTime.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLuint64)]\nxlGetSyncTime.restype = xlclass.XLstatus\nxlGetSyncTime.errcheck = check_status_initialization\nxlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),\n]\nxlGetChannelTime.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetSyncTime.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetSyncTime.restype = xlclass.XLstatus\nxlGetSyncTime.errcheck = check_status_initialization\nxlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),\n]\nxlGetChannelTime.restype = xlclass.XLstatus\nxlGetChannelTime.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetSyncTime.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetSyncTime.errcheck = check_status_initialization\nxlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),\n]\nxlGetChannelTime.restype = xlclass.XLstatus\nxlGetChannelTime.errcheck = check_status_initialization\nxlClosePort = _xlapi_dll.xlClosePort",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelTime",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelTime = _xlapi_dll.xlGetChannelTime\nxlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),\n]\nxlGetChannelTime.restype = xlclass.XLstatus\nxlGetChannelTime.errcheck = check_status_initialization\nxlClosePort = _xlapi_dll.xlClosePort\nxlClosePort.argtypes = [xlclass.XLportHandle]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelTime.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelTime.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLuint64),\n]\nxlGetChannelTime.restype = xlclass.XLstatus\nxlGetChannelTime.errcheck = check_status_initialization\nxlClosePort = _xlapi_dll.xlClosePort\nxlClosePort.argtypes = [xlclass.XLportHandle]\nxlClosePort.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelTime.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelTime.restype = xlclass.XLstatus\nxlGetChannelTime.errcheck = check_status_initialization\nxlClosePort = _xlapi_dll.xlClosePort\nxlClosePort.argtypes = [xlclass.XLportHandle]\nxlClosePort.restype = xlclass.XLstatus\nxlClosePort.errcheck = check_status_operation\nxlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetChannelTime.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetChannelTime.errcheck = check_status_initialization\nxlClosePort = _xlapi_dll.xlClosePort\nxlClosePort.argtypes = [xlclass.XLportHandle]\nxlClosePort.restype = xlclass.XLstatus\nxlClosePort.errcheck = check_status_operation\nxlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlClosePort",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlClosePort = _xlapi_dll.xlClosePort\nxlClosePort.argtypes = [xlclass.XLportHandle]\nxlClosePort.restype = xlclass.XLstatus\nxlClosePort.errcheck = check_status_operation\nxlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlClosePort.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlClosePort.argtypes = [xlclass.XLportHandle]\nxlClosePort.restype = xlclass.XLstatus\nxlClosePort.errcheck = check_status_operation\nxlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,\n]\nxlSetNotification.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlClosePort.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlClosePort.restype = xlclass.XLstatus\nxlClosePort.errcheck = check_status_operation\nxlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,\n]\nxlSetNotification.restype = xlclass.XLstatus\nxlSetNotification.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlClosePort.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlClosePort.errcheck = check_status_operation\nxlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,\n]\nxlSetNotification.restype = xlclass.XLstatus\nxlSetNotification.errcheck = check_status_initialization\nxlCanSetChannelMode = _xlapi_dll.xlCanSetChannelMode",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetNotification",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetNotification = _xlapi_dll.xlSetNotification\nxlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,\n]\nxlSetNotification.restype = xlclass.XLstatus\nxlSetNotification.errcheck = check_status_initialization\nxlCanSetChannelMode = _xlapi_dll.xlCanSetChannelMode\nxlCanSetChannelMode.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetNotification.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetNotification.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(xlclass.XLhandle),\n    ctypes.c_int,\n]\nxlSetNotification.restype = xlclass.XLstatus\nxlSetNotification.errcheck = check_status_initialization\nxlCanSetChannelMode = _xlapi_dll.xlCanSetChannelMode\nxlCanSetChannelMode.argtypes = [\n    xlclass.XLportHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetNotification.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetNotification.restype = xlclass.XLstatus\nxlSetNotification.errcheck = check_status_initialization\nxlCanSetChannelMode = _xlapi_dll.xlCanSetChannelMode\nxlCanSetChannelMode.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_int,\n    ctypes.c_int,\n]\nxlCanSetChannelMode.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetNotification.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetNotification.errcheck = check_status_initialization\nxlCanSetChannelMode = _xlapi_dll.xlCanSetChannelMode\nxlCanSetChannelMode.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_int,\n    ctypes.c_int,\n]\nxlCanSetChannelMode.restype = xlclass.XLstatus\nxlCanSetChannelMode.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelMode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelMode = _xlapi_dll.xlCanSetChannelMode\nxlCanSetChannelMode.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_int,\n    ctypes.c_int,\n]\nxlCanSetChannelMode.restype = xlclass.XLstatus\nxlCanSetChannelMode.errcheck = check_status_initialization\nxlActivateChannel = _xlapi_dll.xlActivateChannel",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelMode.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelMode.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_int,\n    ctypes.c_int,\n]\nxlCanSetChannelMode.restype = xlclass.XLstatus\nxlCanSetChannelMode.errcheck = check_status_initialization\nxlActivateChannel = _xlapi_dll.xlActivateChannel\nxlActivateChannel.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelMode.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelMode.restype = xlclass.XLstatus\nxlCanSetChannelMode.errcheck = check_status_initialization\nxlActivateChannel = _xlapi_dll.xlActivateChannel\nxlActivateChannel.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlActivateChannel.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelMode.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelMode.errcheck = check_status_initialization\nxlActivateChannel = _xlapi_dll.xlActivateChannel\nxlActivateChannel.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlActivateChannel.restype = xlclass.XLstatus\nxlActivateChannel.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlActivateChannel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlActivateChannel = _xlapi_dll.xlActivateChannel\nxlActivateChannel.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlActivateChannel.restype = xlclass.XLstatus\nxlActivateChannel.errcheck = check_status_operation\nxlDeactivateChannel = _xlapi_dll.xlDeactivateChannel",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlActivateChannel.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlActivateChannel.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.c_uint,\n]\nxlActivateChannel.restype = xlclass.XLstatus\nxlActivateChannel.errcheck = check_status_operation\nxlDeactivateChannel = _xlapi_dll.xlDeactivateChannel\nxlDeactivateChannel.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlActivateChannel.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlActivateChannel.restype = xlclass.XLstatus\nxlActivateChannel.errcheck = check_status_operation\nxlDeactivateChannel = _xlapi_dll.xlDeactivateChannel\nxlDeactivateChannel.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlDeactivateChannel.restype = xlclass.XLstatus\nxlDeactivateChannel.errcheck = check_status_operation\nxlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlActivateChannel.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlActivateChannel.errcheck = check_status_operation\nxlDeactivateChannel = _xlapi_dll.xlDeactivateChannel\nxlDeactivateChannel.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlDeactivateChannel.restype = xlclass.XLstatus\nxlDeactivateChannel.errcheck = check_status_operation\nxlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlDeactivateChannel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlDeactivateChannel = _xlapi_dll.xlDeactivateChannel\nxlDeactivateChannel.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlDeactivateChannel.restype = xlclass.XLstatus\nxlDeactivateChannel.errcheck = check_status_operation\nxlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlDeactivateChannel.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlDeactivateChannel.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlDeactivateChannel.restype = xlclass.XLstatus\nxlDeactivateChannel.errcheck = check_status_operation\nxlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),\n]\nxlCanFdSetConfiguration.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlDeactivateChannel.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlDeactivateChannel.restype = xlclass.XLstatus\nxlDeactivateChannel.errcheck = check_status_operation\nxlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),\n]\nxlCanFdSetConfiguration.restype = xlclass.XLstatus\nxlCanFdSetConfiguration.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlDeactivateChannel.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlDeactivateChannel.errcheck = check_status_operation\nxlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),\n]\nxlCanFdSetConfiguration.restype = xlclass.XLstatus\nxlCanFdSetConfiguration.errcheck = check_status_initialization\nxlReceive = _xlapi_dll.xlReceive",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFdSetConfiguration",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFdSetConfiguration = _xlapi_dll.xlCanFdSetConfiguration\nxlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),\n]\nxlCanFdSetConfiguration.restype = xlclass.XLstatus\nxlCanFdSetConfiguration.errcheck = check_status_initialization\nxlReceive = _xlapi_dll.xlReceive\nxlReceive.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFdSetConfiguration.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFdSetConfiguration.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLcanFdConf),\n]\nxlCanFdSetConfiguration.restype = xlclass.XLstatus\nxlCanFdSetConfiguration.errcheck = check_status_initialization\nxlReceive = _xlapi_dll.xlReceive\nxlReceive.argtypes = [\n    xlclass.XLportHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFdSetConfiguration.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFdSetConfiguration.restype = xlclass.XLstatus\nxlCanFdSetConfiguration.errcheck = check_status_initialization\nxlReceive = _xlapi_dll.xlReceive\nxlReceive.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlReceive.restype = xlclass.XLstatus\nxlReceive.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFdSetConfiguration.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFdSetConfiguration.errcheck = check_status_initialization\nxlReceive = _xlapi_dll.xlReceive\nxlReceive.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlReceive.restype = xlclass.XLstatus\nxlReceive.errcheck = check_status_operation\nxlCanReceive = _xlapi_dll.xlCanReceive",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlReceive",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlReceive = _xlapi_dll.xlReceive\nxlReceive.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlReceive.restype = xlclass.XLstatus\nxlReceive.errcheck = check_status_operation\nxlCanReceive = _xlapi_dll.xlCanReceive\nxlCanReceive.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLcanRxEvent)]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlReceive.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlReceive.argtypes = [\n    xlclass.XLportHandle,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlReceive.restype = xlclass.XLstatus\nxlReceive.errcheck = check_status_operation\nxlCanReceive = _xlapi_dll.xlCanReceive\nxlCanReceive.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanReceive.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlReceive.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlReceive.restype = xlclass.XLstatus\nxlReceive.errcheck = check_status_operation\nxlCanReceive = _xlapi_dll.xlCanReceive\nxlCanReceive.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanReceive.restype = xlclass.XLstatus\nxlCanReceive.errcheck = check_status_operation\nxlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlReceive.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlReceive.errcheck = check_status_operation\nxlCanReceive = _xlapi_dll.xlCanReceive\nxlCanReceive.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanReceive.restype = xlclass.XLstatus\nxlCanReceive.errcheck = check_status_operation\nxlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanReceive",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanReceive = _xlapi_dll.xlCanReceive\nxlCanReceive.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanReceive.restype = xlclass.XLstatus\nxlCanReceive.errcheck = check_status_operation\nxlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanReceive.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanReceive.argtypes = [xlclass.XLportHandle, ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanReceive.restype = xlclass.XLstatus\nxlCanReceive.errcheck = check_status_operation\nxlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n]\nxlCanSetChannelBitrate.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanReceive.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanReceive.restype = xlclass.XLstatus\nxlCanReceive.errcheck = check_status_operation\nxlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n]\nxlCanSetChannelBitrate.restype = xlclass.XLstatus\nxlCanSetChannelBitrate.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanReceive.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanReceive.errcheck = check_status_operation\nxlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n]\nxlCanSetChannelBitrate.restype = xlclass.XLstatus\nxlCanSetChannelBitrate.errcheck = check_status_initialization\nxlCanSetChannelParams = _xlapi_dll.xlCanSetChannelParams",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelBitrate",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelBitrate = _xlapi_dll.xlCanSetChannelBitrate\nxlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n]\nxlCanSetChannelBitrate.restype = xlclass.XLstatus\nxlCanSetChannelBitrate.errcheck = check_status_initialization\nxlCanSetChannelParams = _xlapi_dll.xlCanSetChannelParams\nxlCanSetChannelParams.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelBitrate.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelBitrate.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n]\nxlCanSetChannelBitrate.restype = xlclass.XLstatus\nxlCanSetChannelBitrate.errcheck = check_status_initialization\nxlCanSetChannelParams = _xlapi_dll.xlCanSetChannelParams\nxlCanSetChannelParams.argtypes = [\n    xlclass.XLportHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelBitrate.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelBitrate.restype = xlclass.XLstatus\nxlCanSetChannelBitrate.errcheck = check_status_initialization\nxlCanSetChannelParams = _xlapi_dll.xlCanSetChannelParams\nxlCanSetChannelParams.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLchipParams),\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelBitrate.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelBitrate.errcheck = check_status_initialization\nxlCanSetChannelParams = _xlapi_dll.xlCanSetChannelParams\nxlCanSetChannelParams.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLchipParams),\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanSetChannelParamsC200 = _xlapi_dll.xlCanSetChannelParamsC200",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParams",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParams = _xlapi_dll.xlCanSetChannelParams\nxlCanSetChannelParams.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLchipParams),\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanSetChannelParamsC200 = _xlapi_dll.xlCanSetChannelParamsC200\nxlCanSetChannelParamsC200.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParams.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParams.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(xlclass.XLchipParams),\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanSetChannelParamsC200 = _xlapi_dll.xlCanSetChannelParamsC200\nxlCanSetChannelParamsC200.argtypes = [\n    xlclass.XLportHandle,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParams.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanSetChannelParamsC200 = _xlapi_dll.xlCanSetChannelParamsC200\nxlCanSetChannelParamsC200.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ubyte,\n    ctypes.c_ubyte,\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParams.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParams.errcheck = check_status_initialization\nxlCanSetChannelParamsC200 = _xlapi_dll.xlCanSetChannelParamsC200\nxlCanSetChannelParamsC200.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ubyte,\n    ctypes.c_ubyte,\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParamsC200",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParamsC200 = _xlapi_dll.xlCanSetChannelParamsC200\nxlCanSetChannelParamsC200.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ubyte,\n    ctypes.c_ubyte,\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanTransmit = _xlapi_dll.xlCanTransmit",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParamsC200.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParamsC200.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ubyte,\n    ctypes.c_ubyte,\n]\nxlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanTransmit = _xlapi_dll.xlCanTransmit\nxlCanTransmit.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParams.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParams.restype = xlclass.XLstatus\nxlCanSetChannelParams.errcheck = check_status_initialization\nxlCanTransmit = _xlapi_dll.xlCanTransmit\nxlCanTransmit.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlCanTransmit.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelParams.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelParams.errcheck = check_status_initialization\nxlCanTransmit = _xlapi_dll.xlCanTransmit\nxlCanTransmit.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlCanTransmit.restype = xlclass.XLstatus\nxlCanTransmit.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmit",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmit = _xlapi_dll.xlCanTransmit\nxlCanTransmit.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlCanTransmit.restype = xlclass.XLstatus\nxlCanTransmit.errcheck = check_status_operation\nxlCanTransmitEx = _xlapi_dll.xlCanTransmitEx",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmit.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmit.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLevent),\n]\nxlCanTransmit.restype = xlclass.XLstatus\nxlCanTransmit.errcheck = check_status_operation\nxlCanTransmitEx = _xlapi_dll.xlCanTransmitEx\nxlCanTransmitEx.argtypes = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmit.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmit.restype = xlclass.XLstatus\nxlCanTransmit.errcheck = check_status_operation\nxlCanTransmitEx = _xlapi_dll.xlCanTransmitEx\nxlCanTransmitEx.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLcanTxEvent),\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmit.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmit.errcheck = check_status_operation\nxlCanTransmitEx = _xlapi_dll.xlCanTransmitEx\nxlCanTransmitEx.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLcanTxEvent),\n]\nxlCanTransmitEx.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmitEx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmitEx = _xlapi_dll.xlCanTransmitEx\nxlCanTransmitEx.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLcanTxEvent),\n]\nxlCanTransmitEx.restype = xlclass.XLstatus\nxlCanTransmitEx.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmitEx.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmitEx.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_uint,\n    ctypes.POINTER(ctypes.c_uint),\n    ctypes.POINTER(xlclass.XLcanTxEvent),\n]\nxlCanTransmitEx.restype = xlclass.XLstatus\nxlCanTransmitEx.errcheck = check_status_operation\nxlCanFlushTransmitQueue = _xlapi_dll.xlCanFlushTransmitQueue",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmitEx.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmitEx.restype = xlclass.XLstatus\nxlCanTransmitEx.errcheck = check_status_operation\nxlCanFlushTransmitQueue = _xlapi_dll.xlCanFlushTransmitQueue\nxlCanFlushTransmitQueue.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanFlushTransmitQueue.restype = xlclass.XLstatus\nxlCanFlushTransmitQueue.errcheck = check_status_operation\nxlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanTransmitEx.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanTransmitEx.errcheck = check_status_operation\nxlCanFlushTransmitQueue = _xlapi_dll.xlCanFlushTransmitQueue\nxlCanFlushTransmitQueue.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanFlushTransmitQueue.restype = xlclass.XLstatus\nxlCanFlushTransmitQueue.errcheck = check_status_operation\nxlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFlushTransmitQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFlushTransmitQueue = _xlapi_dll.xlCanFlushTransmitQueue\nxlCanFlushTransmitQueue.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanFlushTransmitQueue.restype = xlclass.XLstatus\nxlCanFlushTransmitQueue.errcheck = check_status_operation\nxlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n    ctypes.c_ulong,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFlushTransmitQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFlushTransmitQueue.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanFlushTransmitQueue.restype = xlclass.XLstatus\nxlCanFlushTransmitQueue.errcheck = check_status_operation\nxlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n    ctypes.c_ulong,\n    ctypes.c_uint,",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFlushTransmitQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFlushTransmitQueue.restype = xlclass.XLstatus\nxlCanFlushTransmitQueue.errcheck = check_status_operation\nxlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n    ctypes.c_ulong,\n    ctypes.c_uint,\n]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanFlushTransmitQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanFlushTransmitQueue.errcheck = check_status_operation\nxlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n    ctypes.c_ulong,\n    ctypes.c_uint,\n]\nxlCanSetChannelAcceptance.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelAcceptance",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelAcceptance = _xlapi_dll.xlCanSetChannelAcceptance\nxlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n    ctypes.c_ulong,\n    ctypes.c_uint,\n]\nxlCanSetChannelAcceptance.restype = xlclass.XLstatus\nxlCanSetChannelAcceptance.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelAcceptance.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelAcceptance.argtypes = [\n    xlclass.XLportHandle,\n    xlclass.XLaccess,\n    ctypes.c_ulong,\n    ctypes.c_ulong,\n    ctypes.c_uint,\n]\nxlCanSetChannelAcceptance.restype = xlclass.XLstatus\nxlCanSetChannelAcceptance.errcheck = check_status_operation\nxlCanResetAcceptance = _xlapi_dll.xlCanResetAcceptance",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelAcceptance.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelAcceptance.restype = xlclass.XLstatus\nxlCanSetChannelAcceptance.errcheck = check_status_operation\nxlCanResetAcceptance = _xlapi_dll.xlCanResetAcceptance\nxlCanResetAcceptance.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_uint]\nxlCanResetAcceptance.restype = xlclass.XLstatus\nxlCanResetAcceptance.errcheck = check_status_operation\nxlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelAcceptance.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelAcceptance.errcheck = check_status_operation\nxlCanResetAcceptance = _xlapi_dll.xlCanResetAcceptance\nxlCanResetAcceptance.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_uint]\nxlCanResetAcceptance.restype = xlclass.XLstatus\nxlCanResetAcceptance.errcheck = check_status_operation\nxlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanResetAcceptance",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanResetAcceptance = _xlapi_dll.xlCanResetAcceptance\nxlCanResetAcceptance.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_uint]\nxlCanResetAcceptance.restype = xlclass.XLstatus\nxlCanResetAcceptance.errcheck = check_status_operation\nxlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanResetAcceptance.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanResetAcceptance.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_uint]\nxlCanResetAcceptance.restype = xlclass.XLstatus\nxlCanResetAcceptance.errcheck = check_status_operation\nxlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanResetAcceptance.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanResetAcceptance.restype = xlclass.XLstatus\nxlCanResetAcceptance.errcheck = check_status_operation\nxlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanResetAcceptance.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanResetAcceptance.errcheck = check_status_operation\nxlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanRequestChipState",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanRequestChipState = _xlapi_dll.xlCanRequestChipState\nxlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanRequestChipState.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanRequestChipState.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanRequestChipState.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanRequestChipState.restype = xlclass.XLstatus\nxlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanRequestChipState.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanRequestChipState.errcheck = check_status_operation\nxlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelOutput",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelOutput = _xlapi_dll.xlCanSetChannelOutput\nxlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelOutput.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelOutput.argtypes = [xlclass.XLportHandle, xlclass.XLaccess, ctypes.c_char]\nxlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelOutput.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelOutput.restype = xlclass.XLstatus\nxlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanSetChannelOutput.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanSetChannelOutput.errcheck = check_status_operation\nxlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlPopupHwConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlPopupHwConfig = _xlapi_dll.xlPopupHwConfig\nxlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlPopupHwConfig.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlPopupHwConfig.argtypes = [ctypes.c_char_p, ctypes.c_uint]\nxlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlPopupHwConfig.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlPopupHwConfig.restype = xlclass.XLstatus\nxlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlPopupHwConfig.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlPopupHwConfig.errcheck = check_status_operation\nxlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetTimerRate",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetTimerRate = _xlapi_dll.xlSetTimerRate\nxlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetTimerRate.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetTimerRate.argtypes = [xlclass.XLportHandle, ctypes.c_ulong]\nxlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetTimerRate.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetTimerRate.restype = xlclass.XLstatus\nxlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlSetTimerRate.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlSetTimerRate.errcheck = check_status_operation\nxlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetEventString",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetEventString = _xlapi_dll.xlGetEventString\nxlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetEventString.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetEventString.argtypes = [ctypes.POINTER(xlclass.XLevent)]\nxlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetEventString.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetEventString.restype = xlclass.XLstringType\nxlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanGetEventString",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanGetEventString = _xlapi_dll.xlCanGetEventString\nxlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanGetEventString.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanGetEventString.argtypes = [ctypes.POINTER(xlclass.XLcanRxEvent)]\nxlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlCanGetEventString.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlCanGetEventString.restype = xlclass.XLstringType\nxlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetReceiveQueueLevel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetReceiveQueueLevel = _xlapi_dll.xlGetReceiveQueueLevel\nxlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetReceiveQueueLevel.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetReceiveQueueLevel.argtypes = [xlclass.XLportHandle, ctypes.POINTER(ctypes.c_int)]\nxlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetReceiveQueueLevel.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetReceiveQueueLevel.restype = xlclass.XLstatus\nxlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGetReceiveQueueLevel.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGetReceiveQueueLevel.errcheck = check_status_operation\nxlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGenerateSyncPulse",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGenerateSyncPulse = _xlapi_dll.xlGenerateSyncPulse\nxlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGenerateSyncPulse.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGenerateSyncPulse.argtypes = [xlclass.XLportHandle, xlclass.XLaccess]\nxlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGenerateSyncPulse.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGenerateSyncPulse.restype = xlclass.XLstatus\nxlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlGenerateSyncPulse.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlGenerateSyncPulse.errcheck = check_status_operation\nxlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlFlushReceiveQueue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlFlushReceiveQueue = _xlapi_dll.xlFlushReceiveQueue\nxlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlFlushReceiveQueue.argtypes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlFlushReceiveQueue.argtypes = [xlclass.XLportHandle]\nxlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlFlushReceiveQueue.restype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlFlushReceiveQueue.restype = xlclass.XLstatus\nxlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "xlFlushReceiveQueue.errcheck",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "description": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "peekOfCode": "xlFlushReceiveQueue.errcheck = check_status_operation",
        "detail": "dbus-serialbattery.ext.can.interfaces.vector.xldriver",
        "documentation": {}
    },
    {
        "label": "CANalystIIBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.canalystii",
        "description": "dbus-serialbattery.ext.can.interfaces.canalystii",
        "peekOfCode": "class CANalystIIBus(BusABC):\n    @deprecated_args_alias(\n        deprecation_start=\"4.2.0\", deprecation_end=\"5.0.0\", bit_timing=\"timing\"\n    )\n    def __init__(\n        self,\n        channel: Union[int, Sequence[int], str] = (0, 1),\n        device: int = 0,\n        bitrate: Optional[int] = None,\n        timing: Optional[Union[BitTiming, BitTimingFd]] = None,",
        "detail": "dbus-serialbattery.ext.can.interfaces.canalystii",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.canalystii",
        "description": "dbus-serialbattery.ext.can.interfaces.canalystii",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CANalystIIBus(BusABC):\n    @deprecated_args_alias(\n        deprecation_start=\"4.2.0\", deprecation_end=\"5.0.0\", bit_timing=\"timing\"\n    )\n    def __init__(\n        self,\n        channel: Union[int, Sequence[int], str] = (0, 1),\n        device: int = 0,\n        bitrate: Optional[int] = None,",
        "detail": "dbus-serialbattery.ext.can.interfaces.canalystii",
        "documentation": {}
    },
    {
        "label": "CantactBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.cantact",
        "description": "dbus-serialbattery.ext.can.interfaces.cantact",
        "peekOfCode": "class CantactBus(BusABC):\n    \"\"\"CANtact interface\"\"\"\n    @staticmethod\n    def _detect_available_configs():\n        try:\n            interface = cantact.Interface()\n        except (NameError, SystemError, AttributeError):\n            logger.debug(\n                \"Could not import or instantiate cantact, so no configurations are available\"\n            )",
        "detail": "dbus-serialbattery.ext.can.interfaces.cantact",
        "documentation": {}
    },
    {
        "label": "MockInterface",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.cantact",
        "description": "dbus-serialbattery.ext.can.interfaces.cantact",
        "peekOfCode": "class MockInterface:\n    \"\"\"\n    Mock interface to replace real interface when testing.\n    This allows for tests to run without actual hardware.\n    \"\"\"\n    start = Mock()\n    set_bitrate = Mock()\n    set_bit_timing = Mock()\n    set_enabled = Mock()\n    set_monitor = Mock()",
        "detail": "dbus-serialbattery.ext.can.interfaces.cantact",
        "documentation": {}
    },
    {
        "label": "mock_recv",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.cantact",
        "description": "dbus-serialbattery.ext.can.interfaces.cantact",
        "peekOfCode": "def mock_recv(timeout):\n    if timeout > 0:\n        return {\n            \"id\": 0x123,\n            \"extended\": False,\n            \"timestamp\": time.time(),\n            \"loopback\": False,\n            \"rtr\": False,\n            \"dlc\": 8,\n            \"data\": [1, 2, 3, 4, 5, 6, 7, 8],",
        "detail": "dbus-serialbattery.ext.can.interfaces.cantact",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.cantact",
        "description": "dbus-serialbattery.ext.can.interfaces.cantact",
        "peekOfCode": "logger = logging.getLogger(__name__)\ntry:\n    import cantact\nexcept ImportError:\n    cantact = None\n    logger.warning(\n        \"The CANtact module is not installed. Install it using `pip install cantact`\"\n    )\nclass CantactBus(BusABC):\n    \"\"\"CANtact interface\"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.cantact",
        "documentation": {}
    },
    {
        "label": "GsUsbBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.gs_usb",
        "description": "dbus-serialbattery.ext.can.interfaces.gs_usb",
        "peekOfCode": "class GsUsbBus(can.BusABC):\n    def __init__(\n        self,\n        channel,\n        bitrate: int = 500_000,\n        index=None,\n        bus=None,\n        address=None,\n        can_filters=None,\n        **kwargs,",
        "detail": "dbus-serialbattery.ext.can.interfaces.gs_usb",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.gs_usb",
        "description": "dbus-serialbattery.ext.can.interfaces.gs_usb",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GsUsbBus(can.BusABC):\n    def __init__(\n        self,\n        channel,\n        bitrate: int = 500_000,\n        index=None,\n        bus=None,\n        address=None,\n        can_filters=None,",
        "detail": "dbus-serialbattery.ext.can.interfaces.gs_usb",
        "documentation": {}
    },
    {
        "label": "MessageExStruct",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "class MessageExStruct(ctypes.Structure):\n    _fields_ = [\n        (\"message_id\", ctypes.c_ulong),\n        (\"is_extended\", ctypes.c_ubyte),\n        (\"remote_req\", ctypes.c_ubyte),\n        (\"data_len\", ctypes.c_ubyte),\n        (\"data\", CanData),\n    ]\ndef check_status_initialization(result: int, function, arguments) -> int:\n    if result > 0:",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "IscanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "class IscanBus(BusABC):\n    \"\"\"isCAN interface\"\"\"\n    BAUDRATES = {\n        5000: 0,\n        10000: 1,\n        20000: 2,\n        50000: 3,\n        100000: 4,\n        125000: 5,\n        250000: 6,",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "IscanError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "class IscanError(CanError):\n    ERROR_CODES = {\n        0: \"Success\",\n        1: \"No access to device\",\n        2: \"Device with ID not found\",\n        3: \"Driver operation failed\",\n        4: \"Invalid parameter\",\n        5: \"Operation allowed only in online state\",\n        6: \"Device timeout\",\n        7: \"Device is transmitting a message\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "IscanOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "class IscanOperationError(IscanError, CanOperationError):\n    pass\nclass IscanInitializationError(IscanError, CanInitializationError):\n    pass",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "IscanInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "class IscanInitializationError(IscanError, CanInitializationError):\n    pass",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "check_status_initialization",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "def check_status_initialization(result: int, function, arguments) -> int:\n    if result > 0:\n        raise IscanInitializationError(function, result, arguments)\n    return result\ndef check_status(result: int, function, arguments) -> int:\n    if result > 0:\n        raise IscanOperationError(function, result, arguments)\n    return result\ntry:\n    iscan = ctypes.cdll.LoadLibrary(\"iscandrv\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "check_status",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "def check_status(result: int, function, arguments) -> int:\n    if result > 0:\n        raise IscanOperationError(function, result, arguments)\n    return result\ntry:\n    iscan = ctypes.cdll.LoadLibrary(\"iscandrv\")\nexcept OSError as e:\n    iscan = None\n    logger.warning(\"Failed to load IS-CAN driver: %s\", e)\nelse:",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "logger = logging.getLogger(__name__)\nCanData = ctypes.c_ubyte * 8\nclass MessageExStruct(ctypes.Structure):\n    _fields_ = [\n        (\"message_id\", ctypes.c_ulong),\n        (\"is_extended\", ctypes.c_ubyte),\n        (\"remote_req\", ctypes.c_ubyte),\n        (\"data_len\", ctypes.c_ubyte),\n        (\"data\", CanData),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "CanData",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.iscan",
        "description": "dbus-serialbattery.ext.can.interfaces.iscan",
        "peekOfCode": "CanData = ctypes.c_ubyte * 8\nclass MessageExStruct(ctypes.Structure):\n    _fields_ = [\n        (\"message_id\", ctypes.c_ulong),\n        (\"is_extended\", ctypes.c_ubyte),\n        (\"remote_req\", ctypes.c_ubyte),\n        (\"data_len\", ctypes.c_ubyte),\n        (\"data\", CanData),\n    ]\ndef check_status_initialization(result: int, function, arguments) -> int:",
        "detail": "dbus-serialbattery.ext.can.interfaces.iscan",
        "documentation": {}
    },
    {
        "label": "RxMessageStruct",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "class RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),\n        (\"arb_id\", ctypes.c_ulong),\n        (\"frame_type\", ctypes.c_ubyte),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"data\", CanData),\n    ]\nclass TxMessageStruct(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "TxMessageStruct",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "class TxMessageStruct(ctypes.Structure):\n    _fields_ = [\n        (\"arb_id\", ctypes.c_ulong),\n        (\"is_remote\", ctypes.c_ubyte),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"data\", CanData),\n    ]\nclass NicanError(CanError):\n    \"\"\"Error from NI-CAN driver.\"\"\"\n    def __init__(self, function, error_code: int, arguments) -> None:",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NicanError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "class NicanError(CanError):\n    \"\"\"Error from NI-CAN driver.\"\"\"\n    def __init__(self, function, error_code: int, arguments) -> None:\n        super().__init__(\n            message=f\"{function} failed: {get_error_message(error_code)}\",\n            error_code=error_code,\n        )\n        #: Function that failed\n        self.function = function\n        #: Arguments passed to function",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NicanInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "class NicanInitializationError(NicanError, CanInitializationError):\n    pass\nclass NicanOperationError(NicanError, CanOperationError):\n    pass\ndef check_status(\n    result: int,\n    function,\n    arguments,\n    error_class: Type[NicanError] = NicanOperationError,\n) -> int:",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NicanOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "class NicanOperationError(NicanError, CanOperationError):\n    pass\ndef check_status(\n    result: int,\n    function,\n    arguments,\n    error_class: Type[NicanError] = NicanOperationError,\n) -> int:\n    if result > 0:\n        logger.warning(get_error_message(result))",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NicanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "class NicanBus(BusABC):\n    \"\"\"\n    The CAN Bus implemented for the NI-CAN interface.\n    .. warning::\n        This interface does implement efficient filtering of messages, but\n        the filters have to be set in ``__init__`` using the ``can_filters`` parameter.\n        Using :meth:`~can.BusABC.set_filters` does not work.\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "check_status",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "def check_status(\n    result: int,\n    function,\n    arguments,\n    error_class: Type[NicanError] = NicanOperationError,\n) -> int:\n    if result > 0:\n        logger.warning(get_error_message(result))\n    elif result < 0:\n        raise error_class(function, result, arguments)",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "check_status_init",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "def check_status_init(*args, **kwargs) -> int:\n    return check_status(*args, **kwargs, error_class=NicanInitializationError)\ndef get_error_message(status_code: int) -> str:\n    \"\"\"Convert status code to descriptive string.\"\"\"\n    errmsg = ctypes.create_string_buffer(1024)\n    nican.ncStatusToString(status_code, len(errmsg), errmsg)\n    return errmsg.value.decode(\"ascii\")\nif sys.platform == \"win32\":\n    try:\n        nican = ctypes.windll.LoadLibrary(\"nican\")",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "get_error_message",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "def get_error_message(status_code: int) -> str:\n    \"\"\"Convert status code to descriptive string.\"\"\"\n    errmsg = ctypes.create_string_buffer(1024)\n    nican.ncStatusToString(status_code, len(errmsg), errmsg)\n    return errmsg.value.decode(\"ascii\")\nif sys.platform == \"win32\":\n    try:\n        nican = ctypes.windll.LoadLibrary(\"nican\")\n    except Exception as e:\n        nican = None",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "logger = logging.getLogger(__name__)\nNC_SUCCESS = 0\nNC_ERR_TIMEOUT = 1\nTIMEOUT_ERROR_CODE = -1074388991\nNC_DURATION_INFINITE = 0xFFFFFFFF\nNC_OP_START = 0x80000001\nNC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_SUCCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_SUCCESS = 0\nNC_ERR_TIMEOUT = 1\nTIMEOUT_ERROR_CODE = -1074388991\nNC_DURATION_INFINITE = 0xFFFFFFFF\nNC_OP_START = 0x80000001\nNC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ERR_TIMEOUT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ERR_TIMEOUT = 1\nTIMEOUT_ERROR_CODE = -1074388991\nNC_DURATION_INFINITE = 0xFFFFFFFF\nNC_OP_START = 0x80000001\nNC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "TIMEOUT_ERROR_CODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "TIMEOUT_ERROR_CODE = -1074388991\nNC_DURATION_INFINITE = 0xFFFFFFFF\nNC_OP_START = 0x80000001\nNC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_DURATION_INFINITE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_DURATION_INFINITE = 0xFFFFFFFF\nNC_OP_START = 0x80000001\nNC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_OP_START",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_OP_START = 0x80000001\nNC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_OP_STOP",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_OP_STOP = 0x80000002\nNC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_OP_RESET",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_OP_RESET = 0x80000003\nNC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_FRMTYPE_REMOTE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_FRMTYPE_REMOTE = 1\nNC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_FRMTYPE_COMM_ERR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_FRMTYPE_COMM_ERR = 2\nNC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ST_READ_AVAIL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ST_READ_AVAIL = 0x00000001\nNC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ST_WRITE_SUCCESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ST_WRITE_SUCCESS = 0x00000002\nNC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ST_ERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ST_ERROR = 0x00000010\nNC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ST_WARNING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ST_WARNING = 0x00000020\nNC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_BAUD_RATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_BAUD_RATE = 0x80000007\nNC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_START_ON_OPEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_START_ON_OPEN = 0x80000006\nNC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_READ_Q_LEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_READ_Q_LEN = 0x80000013\nNC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_WRITE_Q_LEN",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_WRITE_Q_LEN = 0x80000014\nNC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_CAN_COMP_STD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_CAN_COMP_STD = 0x80010001\nNC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_CAN_MASK_STD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_CAN_MASK_STD = 0x80010002\nNC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_CAN_COMP_XTD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_CAN_COMP_XTD = 0x80010003\nNC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),\n        (\"arb_id\", ctypes.c_ulong),",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_CAN_MASK_XTD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_CAN_MASK_XTD = 0x80010004\nNC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),\n        (\"arb_id\", ctypes.c_ulong),\n        (\"frame_type\", ctypes.c_ubyte),",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_ATTR_LOG_COMM_ERRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_ATTR_LOG_COMM_ERRS = 0x8001000A\nNC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),\n        (\"arb_id\", ctypes.c_ulong),\n        (\"frame_type\", ctypes.c_ubyte),\n        (\"dlc\", ctypes.c_ubyte),",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NC_FL_CAN_ARBID_XTD",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "NC_FL_CAN_ARBID_XTD = 0x20000000\nCanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),\n        (\"arb_id\", ctypes.c_ulong),\n        (\"frame_type\", ctypes.c_ubyte),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"data\", CanData),",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "CanData",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nican",
        "description": "dbus-serialbattery.ext.can.interfaces.nican",
        "peekOfCode": "CanData = ctypes.c_ubyte * 8\nclass RxMessageStruct(ctypes.Structure):\n    _pack_ = 1\n    _fields_ = [\n        (\"timestamp\", ctypes.c_ulonglong),\n        (\"arb_id\", ctypes.c_ulong),\n        (\"frame_type\", ctypes.c_ubyte),\n        (\"dlc\", ctypes.c_ubyte),\n        (\"data\", CanData),\n    ]",
        "detail": "dbus-serialbattery.ext.can.interfaces.nican",
        "documentation": {}
    },
    {
        "label": "NiXNETcanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nixnet",
        "description": "dbus-serialbattery.ext.can.interfaces.nixnet",
        "peekOfCode": "class NiXNETcanBus(BusABC):\n    \"\"\"\n    The CAN Bus implemented for the NI-XNET interface.\n    \"\"\"\n    @deprecated_args_alias(\n        deprecation_start=\"4.2.0\",\n        deprecation_end=\"5.0.0\",\n        brs=None,\n        log_errors=None,\n    )",
        "detail": "dbus-serialbattery.ext.can.interfaces.nixnet",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.nixnet",
        "description": "dbus-serialbattery.ext.can.interfaces.nixnet",
        "peekOfCode": "logger = logging.getLogger(__name__)\nnixnet: Optional[ModuleType] = None\ntry:\n    import nixnet  # type: ignore\n    import nixnet.constants  # type: ignore\n    import nixnet.system  # type: ignore\n    import nixnet.types  # type: ignore\nexcept Exception as exc:\n    logger.warning(\"Could not import nixnet: %s\", exc)\nclass NiXNETcanBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.nixnet",
        "documentation": {}
    },
    {
        "label": "robotellBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.robotell",
        "description": "dbus-serialbattery.ext.can.interfaces.robotell",
        "peekOfCode": "class robotellBus(BusABC):\n    \"\"\"\n    robotell interface\n    \"\"\"\n    _PACKET_HEAD = 0xAA  # Frame starts with 2x FRAME_HEAD bytes\n    _PACKET_TAIL = 0x55  # Frame ends with 2x FRAME_END bytes\n    _PACKET_ESC = (\n        0xA5  # Escape char before any HEAD, TAIL or ESC chat (including in checksum)\n    )\n    _CAN_CONFIG_CHANNEL = 0xFF  # Configuration channel of CAN",
        "detail": "dbus-serialbattery.ext.can.interfaces.robotell",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.robotell",
        "description": "dbus-serialbattery.ext.can.interfaces.robotell",
        "peekOfCode": "logger = logging.getLogger(__name__)\ntry:\n    import serial\nexcept ImportError:\n    logger.warning(\n        \"You won't be able to use the Robotell can backend without \"\n        \"the serial module installed!\"\n    )\n    serial = None\nclass robotellBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.robotell",
        "documentation": {}
    },
    {
        "label": "slcanBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.slcan",
        "description": "dbus-serialbattery.ext.can.interfaces.slcan",
        "peekOfCode": "class slcanBus(BusABC):\n    \"\"\"\n    slcan interface\n    \"\"\"\n    # the supported bitrates and their commands\n    _BITRATES = {\n        10000: \"S0\",\n        20000: \"S1\",\n        50000: \"S2\",\n        100000: \"S3\",",
        "detail": "dbus-serialbattery.ext.can.interfaces.slcan",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.slcan",
        "description": "dbus-serialbattery.ext.can.interfaces.slcan",
        "peekOfCode": "logger = logging.getLogger(__name__)\ntry:\n    import serial\nexcept ImportError:\n    logger.warning(\n        \"You won't be able to use the slcan can backend without \"\n        \"the serial module installed!\"\n    )\n    serial = None\nclass slcanBus(BusABC):",
        "detail": "dbus-serialbattery.ext.can.interfaces.slcan",
        "documentation": {}
    },
    {
        "label": "VirtualBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.interfaces.virtual",
        "description": "dbus-serialbattery.ext.can.interfaces.virtual",
        "peekOfCode": "class VirtualBus(BusABC):\n    \"\"\"\n    A virtual CAN bus using an internal message queue. It can be used for\n    example for testing.\n    In this interface, a channel is an arbitrary object used as\n    an identifier for connected buses.\n    Implements :meth:`can.BusABC._detect_available_configs`; see\n    :meth:`_detect_available_configs` for how it\n    behaves here.\n    .. note::",
        "detail": "dbus-serialbattery.ext.can.interfaces.virtual",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.virtual",
        "description": "dbus-serialbattery.ext.can.interfaces.virtual",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Channels are lists of queues, one for each connection\nif TYPE_CHECKING:\n    # https://mypy.readthedocs.io/en/stable/runtime_troubles.html#using-classes-that-are-generic-in-stubs-but-not-at-runtime\n    channels: Dict[Optional[Any], List[queue.Queue[Message]]] = {}\nelse:\n    channels = {}\nchannels_lock = RLock()\nclass VirtualBus(BusABC):\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interfaces.virtual",
        "documentation": {}
    },
    {
        "label": "channels_lock",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interfaces.virtual",
        "description": "dbus-serialbattery.ext.can.interfaces.virtual",
        "peekOfCode": "channels_lock = RLock()\nclass VirtualBus(BusABC):\n    \"\"\"\n    A virtual CAN bus using an internal message queue. It can be used for\n    example for testing.\n    In this interface, a channel is an arbitrary object used as\n    an identifier for connected buses.\n    Implements :meth:`can.BusABC._detect_available_configs`; see\n    :meth:`_detect_available_configs` for how it\n    behaves here.",
        "detail": "dbus-serialbattery.ext.can.interfaces.virtual",
        "documentation": {}
    },
    {
        "label": "ASCReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "class ASCReader(TextIOMessageReader):\n    \"\"\"\n    Iterator of CAN messages from a ASC logging file. Meta data (comments,\n    bus statistics, J1939 Transport Protocol messages) is ignored.\n    \"\"\"\n    file: TextIO\n    def __init__(\n        self,\n        file: Union[StringPathLike, TextIO],\n        base: str = \"hex\",",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "ASCWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "class ASCWriter(TextIOMessageWriter):\n    \"\"\"Logs CAN data to an ASCII log file (.asc).\n    The measurement starts with the timestamp of the first registered message.\n    If a message has a timestamp smaller than the previous one or None,\n    it gets assigned the timestamp that was written for the last message.\n    It the first message does not have a timestamp, it is set to zero.\n    \"\"\"\n    file: TextIO\n    FORMAT_MESSAGE = \"{channel}  {id:<15} {dir:<4} {dtype} {data}\"\n    FORMAT_MESSAGE_FD = \" \".join(",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "CAN_MSG_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "CAN_MSG_EXT = 0x80000000\nCAN_ID_MASK = 0x1FFFFFFF\nBASE_HEX = 16\nBASE_DEC = 10\nASC_TRIGGER_REGEX: Final = re.compile(\n    r\"begin\\s+triggerblock\\s+\\w+\\s+(?P<datetime_string>.+)\", re.IGNORECASE\n)\nASC_MESSAGE_REGEX: Final = re.compile(\n    r\"\\d+\\.\\d+\\s+(\\d+\\s+(\\w+\\s+(Tx|Rx)|ErrorFrame)|CANFD)\",\n    re.ASCII | re.IGNORECASE,",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "CAN_ID_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "CAN_ID_MASK = 0x1FFFFFFF\nBASE_HEX = 16\nBASE_DEC = 10\nASC_TRIGGER_REGEX: Final = re.compile(\n    r\"begin\\s+triggerblock\\s+\\w+\\s+(?P<datetime_string>.+)\", re.IGNORECASE\n)\nASC_MESSAGE_REGEX: Final = re.compile(\n    r\"\\d+\\.\\d+\\s+(\\d+\\s+(\\w+\\s+(Tx|Rx)|ErrorFrame)|CANFD)\",\n    re.ASCII | re.IGNORECASE,\n)",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "BASE_HEX",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "BASE_HEX = 16\nBASE_DEC = 10\nASC_TRIGGER_REGEX: Final = re.compile(\n    r\"begin\\s+triggerblock\\s+\\w+\\s+(?P<datetime_string>.+)\", re.IGNORECASE\n)\nASC_MESSAGE_REGEX: Final = re.compile(\n    r\"\\d+\\.\\d+\\s+(\\d+\\s+(\\w+\\s+(Tx|Rx)|ErrorFrame)|CANFD)\",\n    re.ASCII | re.IGNORECASE,\n)\nlogger = logging.getLogger(\"can.io.asc\")",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "BASE_DEC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "BASE_DEC = 10\nASC_TRIGGER_REGEX: Final = re.compile(\n    r\"begin\\s+triggerblock\\s+\\w+\\s+(?P<datetime_string>.+)\", re.IGNORECASE\n)\nASC_MESSAGE_REGEX: Final = re.compile(\n    r\"\\d+\\.\\d+\\s+(\\d+\\s+(\\w+\\s+(Tx|Rx)|ErrorFrame)|CANFD)\",\n    re.ASCII | re.IGNORECASE,\n)\nlogger = logging.getLogger(\"can.io.asc\")\nclass ASCReader(TextIOMessageReader):",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.asc",
        "description": "dbus-serialbattery.ext.can.io.asc",
        "peekOfCode": "logger = logging.getLogger(\"can.io.asc\")\nclass ASCReader(TextIOMessageReader):\n    \"\"\"\n    Iterator of CAN messages from a ASC logging file. Meta data (comments,\n    bus statistics, J1939 Transport Protocol messages) is ignored.\n    \"\"\"\n    file: TextIO\n    def __init__(\n        self,\n        file: Union[StringPathLike, TextIO],",
        "detail": "dbus-serialbattery.ext.can.io.asc",
        "documentation": {}
    },
    {
        "label": "BLFParseError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "class BLFParseError(Exception):\n    \"\"\"BLF file could not be parsed correctly.\"\"\"\nLOG = logging.getLogger(__name__)\n# signature (\"LOGG\"), header size,\n# application ID, application major, application minor, application build,\n# bin log major, bin log minor, bin log build, bin log patch,\n# file size, uncompressed size, count of objects, count of objects read,\n# time start (SYSTEMTIME), time stop (SYSTEMTIME)\nFILE_HEADER_STRUCT = struct.Struct(\"<4sLBBBBBBBBQQLL8H8H\")\n# Pad file header to this size",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "BLFReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "class BLFReader(BinaryIOMessageReader):\n    \"\"\"\n    Iterator of CAN messages from a Binary Logging File.\n    Only CAN messages and error frames are supported. Other object types are\n    silently ignored.\n    \"\"\"\n    file: BinaryIO\n    def __init__(\n        self,\n        file: Union[StringPathLike, BinaryIO],",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "BLFWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "class BLFWriter(FileIOMessageWriter):\n    \"\"\"\n    Logs CAN data to a Binary Logging File compatible with Vector's tools.\n    \"\"\"\n    file: BinaryIO\n    #: Max log container size of uncompressed data\n    max_container_size = 128 * 1024\n    #: Application identifier for the log writer\n    application_id = 5\n    def __init__(",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "timestamp_to_systemtime",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "def timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0\n    t = datetime.datetime.fromtimestamp(round(timestamp, 3))\n    return (\n        t.year,\n        t.month,\n        t.isoweekday() % 7,\n        t.day,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "systemtime_to_timestamp",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "def systemtime_to_timestamp(systemtime: TSystemTime) -> float:\n    try:\n        t = datetime.datetime(\n            systemtime[0],\n            systemtime[1],\n            systemtime[3],\n            systemtime[4],\n            systemtime[5],\n            systemtime[6],\n            systemtime[7] * 1000,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "TSystemTime",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "TSystemTime = Tuple[int, int, int, int, int, int, int, int]\nclass BLFParseError(Exception):\n    \"\"\"BLF file could not be parsed correctly.\"\"\"\nLOG = logging.getLogger(__name__)\n# signature (\"LOGG\"), header size,\n# application ID, application major, application minor, application build,\n# bin log major, bin log minor, bin log build, bin log patch,\n# file size, uncompressed size, count of objects, count of objects read,\n# time start (SYSTEMTIME), time stop (SYSTEMTIME)\nFILE_HEADER_STRUCT = struct.Struct(\"<4sLBBBBBBBBQQLL8H8H\")",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "LOG = logging.getLogger(__name__)\n# signature (\"LOGG\"), header size,\n# application ID, application major, application minor, application build,\n# bin log major, bin log minor, bin log build, bin log patch,\n# file size, uncompressed size, count of objects, count of objects read,\n# time start (SYSTEMTIME), time stop (SYSTEMTIME)\nFILE_HEADER_STRUCT = struct.Struct(\"<4sLBBBBBBBBQQLL8H8H\")\n# Pad file header to this size\nFILE_HEADER_SIZE = 144\n# signature (\"LOBJ\"), header size, header version, object size, object type",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "FILE_HEADER_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "FILE_HEADER_STRUCT = struct.Struct(\"<4sLBBBBBBBBQQLL8H8H\")\n# Pad file header to this size\nFILE_HEADER_SIZE = 144\n# signature (\"LOBJ\"), header size, header version, object size, object type\nOBJ_HEADER_BASE_STRUCT = struct.Struct(\"<4sHHLL\")\n# flags, client index, object version, timestamp\nOBJ_HEADER_V1_STRUCT = struct.Struct(\"<LHHQ\")\n# flags, timestamp status, object version, timestamp, (original timestamp)\nOBJ_HEADER_V2_STRUCT = struct.Struct(\"<LBxHQ8x\")\n# compression method, size uncompressed",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "FILE_HEADER_SIZE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "FILE_HEADER_SIZE = 144\n# signature (\"LOBJ\"), header size, header version, object size, object type\nOBJ_HEADER_BASE_STRUCT = struct.Struct(\"<4sHHLL\")\n# flags, client index, object version, timestamp\nOBJ_HEADER_V1_STRUCT = struct.Struct(\"<LHHQ\")\n# flags, timestamp status, object version, timestamp, (original timestamp)\nOBJ_HEADER_V2_STRUCT = struct.Struct(\"<LBxHQ8x\")\n# compression method, size uncompressed\nLOG_CONTAINER_STRUCT = struct.Struct(\"<H6xL4x\")\n# channel, flags, dlc, arbitration id, data",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "OBJ_HEADER_BASE_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "OBJ_HEADER_BASE_STRUCT = struct.Struct(\"<4sHHLL\")\n# flags, client index, object version, timestamp\nOBJ_HEADER_V1_STRUCT = struct.Struct(\"<LHHQ\")\n# flags, timestamp status, object version, timestamp, (original timestamp)\nOBJ_HEADER_V2_STRUCT = struct.Struct(\"<LBxHQ8x\")\n# compression method, size uncompressed\nLOG_CONTAINER_STRUCT = struct.Struct(\"<H6xL4x\")\n# channel, flags, dlc, arbitration id, data\nCAN_MSG_STRUCT = struct.Struct(\"<HBBL8s\")\n# channel, flags, dlc, arbitration id, frame length, bit count, FD flags,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "OBJ_HEADER_V1_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "OBJ_HEADER_V1_STRUCT = struct.Struct(\"<LHHQ\")\n# flags, timestamp status, object version, timestamp, (original timestamp)\nOBJ_HEADER_V2_STRUCT = struct.Struct(\"<LBxHQ8x\")\n# compression method, size uncompressed\nLOG_CONTAINER_STRUCT = struct.Struct(\"<H6xL4x\")\n# channel, flags, dlc, arbitration id, data\nCAN_MSG_STRUCT = struct.Struct(\"<HBBL8s\")\n# channel, flags, dlc, arbitration id, frame length, bit count, FD flags,\n# valid data bytes, data\nCAN_FD_MSG_STRUCT = struct.Struct(\"<HBBLLBBB5x64s\")",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "OBJ_HEADER_V2_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "OBJ_HEADER_V2_STRUCT = struct.Struct(\"<LBxHQ8x\")\n# compression method, size uncompressed\nLOG_CONTAINER_STRUCT = struct.Struct(\"<H6xL4x\")\n# channel, flags, dlc, arbitration id, data\nCAN_MSG_STRUCT = struct.Struct(\"<HBBL8s\")\n# channel, flags, dlc, arbitration id, frame length, bit count, FD flags,\n# valid data bytes, data\nCAN_FD_MSG_STRUCT = struct.Struct(\"<HBBLLBBB5x64s\")\n# channel, dlc, valid payload length of data, tx count, arbitration id,\n# frame length, flags, bit rate used in arbitration phase,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "LOG_CONTAINER_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "LOG_CONTAINER_STRUCT = struct.Struct(\"<H6xL4x\")\n# channel, flags, dlc, arbitration id, data\nCAN_MSG_STRUCT = struct.Struct(\"<HBBL8s\")\n# channel, flags, dlc, arbitration id, frame length, bit count, FD flags,\n# valid data bytes, data\nCAN_FD_MSG_STRUCT = struct.Struct(\"<HBBLLBBB5x64s\")\n# channel, dlc, valid payload length of data, tx count, arbitration id,\n# frame length, flags, bit rate used in arbitration phase,\n# bit rate used in data phase, time offset of brs field,\n# time offset of crc delimiter field, bit count, direction,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_MSG_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_MSG_STRUCT = struct.Struct(\"<HBBL8s\")\n# channel, flags, dlc, arbitration id, frame length, bit count, FD flags,\n# valid data bytes, data\nCAN_FD_MSG_STRUCT = struct.Struct(\"<HBBLLBBB5x64s\")\n# channel, dlc, valid payload length of data, tx count, arbitration id,\n# frame length, flags, bit rate used in arbitration phase,\n# bit rate used in data phase, time offset of brs field,\n# time offset of crc delimiter field, bit count, direction,\n# offset if extDataOffset is used, crc\nCAN_FD_MSG_64_STRUCT = struct.Struct(\"<BBBBLLLLLLLHBBL\")",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_FD_MSG_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_FD_MSG_STRUCT = struct.Struct(\"<HBBLLBBB5x64s\")\n# channel, dlc, valid payload length of data, tx count, arbitration id,\n# frame length, flags, bit rate used in arbitration phase,\n# bit rate used in data phase, time offset of brs field,\n# time offset of crc delimiter field, bit count, direction,\n# offset if extDataOffset is used, crc\nCAN_FD_MSG_64_STRUCT = struct.Struct(\"<BBBBLLLLLLLHBBL\")\n# channel, length, flags, ecc, position, dlc, frame length, id, flags ext, data\nCAN_ERROR_EXT_STRUCT = struct.Struct(\"<HHLBBBxLLH2x8s\")\n# commented event type, foreground color, background color, relocatable,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_FD_MSG_64_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_FD_MSG_64_STRUCT = struct.Struct(\"<BBBBLLLLLLLHBBL\")\n# channel, length, flags, ecc, position, dlc, frame length, id, flags ext, data\nCAN_ERROR_EXT_STRUCT = struct.Struct(\"<HHLBBBxLLH2x8s\")\n# commented event type, foreground color, background color, relocatable,\n# group name length, marker name length, description length\nGLOBAL_MARKER_STRUCT = struct.Struct(\"<LLL3xBLLL12x\")\nCAN_MESSAGE = 1\nLOG_CONTAINER = 10\nCAN_ERROR_EXT = 73\nCAN_MESSAGE2 = 86",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_EXT_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_ERROR_EXT_STRUCT = struct.Struct(\"<HHLBBBxLLH2x8s\")\n# commented event type, foreground color, background color, relocatable,\n# group name length, marker name length, description length\nGLOBAL_MARKER_STRUCT = struct.Struct(\"<LLL3xBLLL12x\")\nCAN_MESSAGE = 1\nLOG_CONTAINER = 10\nCAN_ERROR_EXT = 73\nCAN_MESSAGE2 = 86\nGLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "GLOBAL_MARKER_STRUCT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "GLOBAL_MARKER_STRUCT = struct.Struct(\"<LLL3xBLLL12x\")\nCAN_MESSAGE = 1\nLOG_CONTAINER = 10\nCAN_ERROR_EXT = 73\nCAN_MESSAGE2 = 86\nGLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_MESSAGE = 1\nLOG_CONTAINER = 10\nCAN_ERROR_EXT = 73\nCAN_MESSAGE2 = 86\nGLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "LOG_CONTAINER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "LOG_CONTAINER = 10\nCAN_ERROR_EXT = 73\nCAN_MESSAGE2 = 86\nGLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_ERROR_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_ERROR_EXT = 73\nCAN_MESSAGE2 = 86\nGLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_MESSAGE2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_MESSAGE2 = 86\nGLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "GLOBAL_MARKER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "GLOBAL_MARKER = 96\nCAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_FD_MESSAGE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_FD_MESSAGE = 100\nCAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_FD_MESSAGE_64",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_FD_MESSAGE_64 = 101\nNO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "NO_COMPRESSION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "NO_COMPRESSION = 0\nZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "ZLIB_DEFLATE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "ZLIB_DEFLATE = 2\nCAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CAN_MSG_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "CAN_MSG_EXT = 0x80000000\nREMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "REMOTE_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "REMOTE_FLAG = 0x80\nEDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "EDL",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "EDL = 0x1\nBRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "BRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "BRS = 0x2\nESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0\n    t = datetime.datetime.fromtimestamp(round(timestamp, 3))",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "ESI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "ESI = 0x4\nDIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0\n    t = datetime.datetime.fromtimestamp(round(timestamp, 3))\n    return (",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "DIR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "DIR = 0x1\nTIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0\n    t = datetime.datetime.fromtimestamp(round(timestamp, 3))\n    return (\n        t.year,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "TIME_TEN_MICS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "TIME_TEN_MICS = 0x00000001\nTIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0\n    t = datetime.datetime.fromtimestamp(round(timestamp, 3))\n    return (\n        t.year,\n        t.month,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "TIME_ONE_NANS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.blf",
        "description": "dbus-serialbattery.ext.can.io.blf",
        "peekOfCode": "TIME_ONE_NANS = 0x00000002\ndef timestamp_to_systemtime(timestamp: float) -> TSystemTime:\n    if timestamp is None or timestamp < 631152000:\n        # Probably not a Unix timestamp\n        return 0, 0, 0, 0, 0, 0, 0, 0\n    t = datetime.datetime.fromtimestamp(round(timestamp, 3))\n    return (\n        t.year,\n        t.month,\n        t.isoweekday() % 7,",
        "detail": "dbus-serialbattery.ext.can.io.blf",
        "documentation": {}
    },
    {
        "label": "CanutilsLogReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "class CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::\n        .log-format looks for example like this:\n        ``(0.0) vcan0 001#8d00100100820100``\n    \"\"\"\n    file: TextIO\n    def __init__(\n        self,",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CanutilsLogWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "class CanutilsLogWriter(TextIOMessageWriter):\n    \"\"\"Logs CAN data to an ASCII log file (.log).\n    This class is is compatible with \"candump -L\".\n    If a message has a timestamp smaller than the previous one (or 0 or None),\n    it gets assigned the timestamp that was written for the last message.\n    It the first message does not have a timestamp, it is set to zero.\n    \"\"\"\n    def __init__(\n        self,\n        file: Union[StringPathLike, TextIO],",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "log = logging.getLogger(\"can.io.canutils\")\nCAN_MSG_EXT = 0x80000000\nCAN_ERR_FLAG = 0x20000000\nCAN_ERR_BUSERROR = 0x00000080\nCAN_ERR_DLC = 8\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CAN_MSG_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "CAN_MSG_EXT = 0x80000000\nCAN_ERR_FLAG = 0x20000000\nCAN_ERR_BUSERROR = 0x00000080\nCAN_ERR_DLC = 8\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CAN_ERR_FLAG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "CAN_ERR_FLAG = 0x20000000\nCAN_ERR_BUSERROR = 0x00000080\nCAN_ERR_DLC = 8\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::\n        .log-format looks for example like this:",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CAN_ERR_BUSERROR",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "CAN_ERR_BUSERROR = 0x00000080\nCAN_ERR_DLC = 8\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::\n        .log-format looks for example like this:\n        ``(0.0) vcan0 001#8d00100100820100``",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CAN_ERR_DLC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "CAN_ERR_DLC = 8\nCANFD_BRS = 0x01\nCANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::\n        .log-format looks for example like this:\n        ``(0.0) vcan0 001#8d00100100820100``\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CANFD_BRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "CANFD_BRS = 0x01\nCANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::\n        .log-format looks for example like this:\n        ``(0.0) vcan0 001#8d00100100820100``\n    \"\"\"\n    file: TextIO",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CANFD_ESI",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.canutils",
        "description": "dbus-serialbattery.ext.can.io.canutils",
        "peekOfCode": "CANFD_ESI = 0x02\nclass CanutilsLogReader(TextIOMessageReader):\n    \"\"\"\n    Iterator over CAN messages from a .log Logging File (candump -L).\n    .. note::\n        .log-format looks for example like this:\n        ``(0.0) vcan0 001#8d00100100820100``\n    \"\"\"\n    file: TextIO\n    def __init__(",
        "detail": "dbus-serialbattery.ext.can.io.canutils",
        "documentation": {}
    },
    {
        "label": "CSVReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.csv",
        "description": "dbus-serialbattery.ext.can.io.csv",
        "peekOfCode": "class CSVReader(TextIOMessageReader):\n    \"\"\"Iterator over CAN messages from a .csv file that was\n    generated by :class:`~can.CSVWriter` or that uses the same\n    format as described there. Assumes that there is a header\n    and thus skips the first line.\n    Any line separator is accepted.\n    \"\"\"\n    file: TextIO\n    def __init__(\n        self,",
        "detail": "dbus-serialbattery.ext.can.io.csv",
        "documentation": {}
    },
    {
        "label": "CSVWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.csv",
        "description": "dbus-serialbattery.ext.can.io.csv",
        "peekOfCode": "class CSVWriter(TextIOMessageWriter):\n    \"\"\"Writes a comma separated text file with a line for\n    each message. Includes a header line.\n    The columns are as follows:\n    ================ ======================= ===============\n    name of column   format description      example\n    ================ ======================= ===============\n    timestamp        decimal float           1483389946.197\n    arbitration_id   hex                     0x00dadada\n    extended         1 == True, 0 == False   1",
        "detail": "dbus-serialbattery.ext.can.io.csv",
        "documentation": {}
    },
    {
        "label": "BaseIOHandler",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class BaseIOHandler(ContextManager, metaclass=ABCMeta):\n    \"\"\"A generic file handler that can be used for reading and writing.\n    Can be used as a context manager.\n    :attr file:\n        the file-like object that is kept internally, or `None` if none\n        was opened\n    \"\"\"\n    file: Optional[typechecking.FileLike]\n    def __init__(\n        self,",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "MessageWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class MessageWriter(BaseIOHandler, Listener, metaclass=ABCMeta):\n    \"\"\"The base class for all writers.\"\"\"\n    file: Optional[typechecking.FileLike]\nclass FileIOMessageWriter(MessageWriter, metaclass=ABCMeta):\n    \"\"\"A specialized base class for all writers with file descriptors.\"\"\"\n    file: typechecking.FileLike\n    def __init__(\n        self, file: typechecking.AcceptedIOType, mode: str = \"wt\", **kwargs: Any\n    ) -> None:\n        # Not possible with the type signature, but be verbose for user-friendliness",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "FileIOMessageWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class FileIOMessageWriter(MessageWriter, metaclass=ABCMeta):\n    \"\"\"A specialized base class for all writers with file descriptors.\"\"\"\n    file: typechecking.FileLike\n    def __init__(\n        self, file: typechecking.AcceptedIOType, mode: str = \"wt\", **kwargs: Any\n    ) -> None:\n        # Not possible with the type signature, but be verbose for user-friendliness\n        if file is None:\n            raise ValueError(\"The given file cannot be None\")\n        super().__init__(file, mode, **kwargs)",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "TextIOMessageWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class TextIOMessageWriter(FileIOMessageWriter, metaclass=ABCMeta):\n    file: TextIO\nclass BinaryIOMessageWriter(FileIOMessageWriter, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]\nclass MessageReader(BaseIOHandler, Iterable[Message], metaclass=ABCMeta):\n    \"\"\"The base class for all readers.\"\"\"\nclass TextIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: TextIO\nclass BinaryIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "BinaryIOMessageWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class BinaryIOMessageWriter(FileIOMessageWriter, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]\nclass MessageReader(BaseIOHandler, Iterable[Message], metaclass=ABCMeta):\n    \"\"\"The base class for all readers.\"\"\"\nclass TextIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: TextIO\nclass BinaryIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "MessageReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class MessageReader(BaseIOHandler, Iterable[Message], metaclass=ABCMeta):\n    \"\"\"The base class for all readers.\"\"\"\nclass TextIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: TextIO\nclass BinaryIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "TextIOMessageReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class TextIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: TextIO\nclass BinaryIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "BinaryIOMessageReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.generic",
        "description": "dbus-serialbattery.ext.can.io.generic",
        "peekOfCode": "class BinaryIOMessageReader(MessageReader, metaclass=ABCMeta):\n    file: Union[BinaryIO, gzip.GzipFile]",
        "detail": "dbus-serialbattery.ext.can.io.generic",
        "documentation": {}
    },
    {
        "label": "BaseRotatingLogger",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.logger",
        "description": "dbus-serialbattery.ext.can.io.logger",
        "peekOfCode": "class BaseRotatingLogger(MessageWriter, ABC):\n    \"\"\"\n    Base class for rotating CAN loggers. This class is not meant to be\n    instantiated directly. Subclasses must implement the :meth:`should_rollover`\n    and :meth:`do_rollover` methods according to their rotation strategy.\n    The rotation behavior can be further customized by the user by setting\n    the :attr:`namer` and :attr:`rotator` attributes after instantiating the subclass.\n    These attributes as well as the methods :meth:`rotation_filename` and :meth:`rotate`\n    and the corresponding docstrings are carried over from the python builtin\n    :class:`~logging.handlers.BaseRotatingHandler`.",
        "detail": "dbus-serialbattery.ext.can.io.logger",
        "documentation": {}
    },
    {
        "label": "SizedRotatingLogger",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.logger",
        "description": "dbus-serialbattery.ext.can.io.logger",
        "peekOfCode": "class SizedRotatingLogger(BaseRotatingLogger):\n    \"\"\"Log CAN messages to a sequence of files with a given maximum size.\n    The logger creates a log file with the given `base_filename`. When the\n    size threshold is reached the current log file is closed and renamed\n    by adding a timestamp and the rollover count. A new log file is then\n    created and written to.\n    This behavior can be customized by setting the\n    :attr:`~can.io.BaseRotatingLogger.namer` and\n    :attr:`~can.io.BaseRotatingLogger.rotator`\n    attribute.",
        "detail": "dbus-serialbattery.ext.can.io.logger",
        "documentation": {}
    },
    {
        "label": "Logger",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.io.logger",
        "description": "dbus-serialbattery.ext.can.io.logger",
        "peekOfCode": "def Logger(  # noqa: N802\n    filename: Optional[StringPathLike], **kwargs: Any\n) -> MessageWriter:\n    \"\"\"Find and return the appropriate :class:`~can.io.generic.MessageWriter` instance\n    for a given file suffix.\n    The format is determined from the file suffix which can be one of:\n      * .asc :class:`can.ASCWriter`\n      * .blf :class:`can.BLFWriter`\n      * .csv: :class:`can.CSVWriter`\n      * .db :class:`can.SqliteWriter`",
        "detail": "dbus-serialbattery.ext.can.io.logger",
        "documentation": {}
    },
    {
        "label": "MF4Writer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.mf4",
        "description": "dbus-serialbattery.ext.can.io.mf4",
        "peekOfCode": "class MF4Writer(BinaryIOMessageWriter):\n    \"\"\"Logs CAN data to an ASAM Measurement Data File v4 (.mf4).\n    MF4Writer does not support append mode.\n    If a message has a timestamp smaller than the previous one or None,\n    it gets assigned the timestamp that was written for the last message.\n    It the first message does not have a timestamp, it is set to zero.\n    \"\"\"\n    def __init__(\n        self,\n        file: Union[StringPathLike, BinaryIO],",
        "detail": "dbus-serialbattery.ext.can.io.mf4",
        "documentation": {}
    },
    {
        "label": "FrameIterator",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.mf4",
        "description": "dbus-serialbattery.ext.can.io.mf4",
        "peekOfCode": "class FrameIterator(metaclass=abc.ABCMeta):\n    \"\"\"\n    Iterator helper class for common handling among CAN DataFrames, ErrorFrames and RemoteFrames.\n    \"\"\"\n    # Number of records to request for each asammdf call\n    _chunk_size = 1000\n    def __init__(self, mdf: MDF4, group_index: int, start_timestamp: float, name: str):\n        self._mdf = mdf\n        self._group_index = group_index\n        self._start_timestamp = start_timestamp",
        "detail": "dbus-serialbattery.ext.can.io.mf4",
        "documentation": {}
    },
    {
        "label": "MF4Reader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.mf4",
        "description": "dbus-serialbattery.ext.can.io.mf4",
        "peekOfCode": "class MF4Reader(BinaryIOMessageReader):\n    \"\"\"\n    Iterator of CAN messages from a MF4 logging file.\n    The MF4Reader only supports MF4 files with CAN bus logging.\n    \"\"\"\n    # NOTE: Readout based on the bus logging code from asammdf GUI\n    class _CANDataFrameIterator(FrameIterator):\n        def __init__(self, mdf: MDF4, group_index: int, start_timestamp: float):\n            super().__init__(mdf, group_index, start_timestamp, \"CAN_DataFrame\")\n        def __iter__(self) -> Generator[Message, None, None]:",
        "detail": "dbus-serialbattery.ext.can.io.mf4",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.mf4",
        "description": "dbus-serialbattery.ext.can.io.mf4",
        "peekOfCode": "logger = logging.getLogger(\"can.io.mf4\")\ntry:\n    import asammdf\n    import numpy as np\n    from asammdf import Signal, Source\n    from asammdf.blocks.mdf_v4 import MDF4\n    from asammdf.blocks.v4_blocks import ChannelGroup, SourceInformation\n    from asammdf.blocks.v4_constants import BUS_TYPE_CAN, FLAG_CG_BUS_EVENT, SOURCE_BUS\n    from asammdf.mdf import MDF\n    STD_DTYPE = np.dtype(",
        "detail": "dbus-serialbattery.ext.can.io.mf4",
        "documentation": {}
    },
    {
        "label": "CAN_MSG_EXT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.mf4",
        "description": "dbus-serialbattery.ext.can.io.mf4",
        "peekOfCode": "CAN_MSG_EXT = 0x80000000\nCAN_ID_MASK = 0x1FFFFFFF\nclass MF4Writer(BinaryIOMessageWriter):\n    \"\"\"Logs CAN data to an ASAM Measurement Data File v4 (.mf4).\n    MF4Writer does not support append mode.\n    If a message has a timestamp smaller than the previous one or None,\n    it gets assigned the timestamp that was written for the last message.\n    It the first message does not have a timestamp, it is set to zero.\n    \"\"\"\n    def __init__(",
        "detail": "dbus-serialbattery.ext.can.io.mf4",
        "documentation": {}
    },
    {
        "label": "CAN_ID_MASK",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.mf4",
        "description": "dbus-serialbattery.ext.can.io.mf4",
        "peekOfCode": "CAN_ID_MASK = 0x1FFFFFFF\nclass MF4Writer(BinaryIOMessageWriter):\n    \"\"\"Logs CAN data to an ASAM Measurement Data File v4 (.mf4).\n    MF4Writer does not support append mode.\n    If a message has a timestamp smaller than the previous one or None,\n    it gets assigned the timestamp that was written for the last message.\n    It the first message does not have a timestamp, it is set to zero.\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "dbus-serialbattery.ext.can.io.mf4",
        "documentation": {}
    },
    {
        "label": "MessageSync",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.player",
        "description": "dbus-serialbattery.ext.can.io.player",
        "peekOfCode": "class MessageSync:\n    \"\"\"\n    Used to iterate over some given messages in the recorded time.\n    \"\"\"\n    def __init__(\n        self,\n        messages: Iterable[Message],\n        timestamps: bool = True,\n        gap: float = 0.0001,\n        skip: float = 60.0,",
        "detail": "dbus-serialbattery.ext.can.io.player",
        "documentation": {}
    },
    {
        "label": "LogReader",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.io.player",
        "description": "dbus-serialbattery.ext.can.io.player",
        "peekOfCode": "def LogReader(filename: StringPathLike, **kwargs: Any) -> MessageReader:  # noqa: N802\n    \"\"\"Find and return the appropriate :class:`~can.io.generic.MessageReader` instance\n    for a given file suffix.\n    The format is determined from the file suffix which can be one of:\n      * .asc :class:`can.ASCReader`\n      * .blf :class:`can.BLFReader`\n      * .csv :class:`can.CSVReader`\n      * .db :class:`can.SqliteReader`\n      * .log :class:`can.CanutilsLogReader`\n      * .mf4 :class:`can.MF4Reader`",
        "detail": "dbus-serialbattery.ext.can.io.player",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.printer",
        "description": "dbus-serialbattery.ext.can.io.printer",
        "peekOfCode": "class Printer(MessageWriter):\n    \"\"\"\n    The Printer class is a subclass of :class:`~can.Listener` which simply prints\n    any messages it receives to the terminal (stdout). A message is turned into a\n    string using :meth:`~can.Message.__str__`.\n    :attr write_to_file: `True` if this instance prints to a file instead of\n                         standard out\n    \"\"\"\n    file: Optional[TextIO]\n    def __init__(",
        "detail": "dbus-serialbattery.ext.can.io.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.printer",
        "description": "dbus-serialbattery.ext.can.io.printer",
        "peekOfCode": "log = logging.getLogger(\"can.io.printer\")\nclass Printer(MessageWriter):\n    \"\"\"\n    The Printer class is a subclass of :class:`~can.Listener` which simply prints\n    any messages it receives to the terminal (stdout). A message is turned into a\n    string using :meth:`~can.Message.__str__`.\n    :attr write_to_file: `True` if this instance prints to a file instead of\n                         standard out\n    \"\"\"\n    file: Optional[TextIO]",
        "detail": "dbus-serialbattery.ext.can.io.printer",
        "documentation": {}
    },
    {
        "label": "SqliteReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.sqlite",
        "description": "dbus-serialbattery.ext.can.io.sqlite",
        "peekOfCode": "class SqliteReader(MessageReader):\n    \"\"\"\n    Reads recorded CAN messages from a simple SQL database.\n    This class can be iterated over or used to fetch all messages in the\n    database with :meth:`~SqliteReader.read_all`.\n    Calling :func:`len` on this object might not run in constant time.\n    :attr str table_name: the name of the database table used for storing the messages\n    .. note:: The database schema is given in the documentation of the loggers.\n    \"\"\"\n    def __init__(",
        "detail": "dbus-serialbattery.ext.can.io.sqlite",
        "documentation": {}
    },
    {
        "label": "SqliteWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.sqlite",
        "description": "dbus-serialbattery.ext.can.io.sqlite",
        "peekOfCode": "class SqliteWriter(MessageWriter, BufferedReader):\n    \"\"\"Logs received CAN data to a simple SQL database.\n    The sqlite database may already exist, otherwise it will\n    be created when the first message arrives.\n    Messages are internally buffered and written to the SQL file in a background\n    thread. Ensures that all messages that are added before calling :meth:`~can.SqliteWriter.stop()`\n    are actually written to the database after that call returns. Thus, calling\n    :meth:`~can.SqliteWriter.stop()` may take a while.\n    :attr str table_name: the name of the database table used for storing the messages\n    :attr int num_frames: the number of frames actually written to the database, this",
        "detail": "dbus-serialbattery.ext.can.io.sqlite",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.sqlite",
        "description": "dbus-serialbattery.ext.can.io.sqlite",
        "peekOfCode": "log = logging.getLogger(\"can.io.sqlite\")\nclass SqliteReader(MessageReader):\n    \"\"\"\n    Reads recorded CAN messages from a simple SQL database.\n    This class can be iterated over or used to fetch all messages in the\n    database with :meth:`~SqliteReader.read_all`.\n    Calling :func:`len` on this object might not run in constant time.\n    :attr str table_name: the name of the database table used for storing the messages\n    .. note:: The database schema is given in the documentation of the loggers.\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.io.sqlite",
        "documentation": {}
    },
    {
        "label": "TRCFileVersion",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.trc",
        "description": "dbus-serialbattery.ext.can.io.trc",
        "peekOfCode": "class TRCFileVersion(Enum):\n    UNKNOWN = 0\n    V1_0 = 100\n    V1_1 = 101\n    V1_2 = 102\n    V1_3 = 103\n    V2_0 = 200\n    V2_1 = 201\n    def __ge__(self, other):\n        if self.__class__ is other.__class__:",
        "detail": "dbus-serialbattery.ext.can.io.trc",
        "documentation": {}
    },
    {
        "label": "TRCReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.trc",
        "description": "dbus-serialbattery.ext.can.io.trc",
        "peekOfCode": "class TRCReader(TextIOMessageReader):\n    \"\"\"\n    Iterator of CAN messages from a TRC logging file.\n    \"\"\"\n    file: TextIO\n    def __init__(\n        self,\n        file: Union[StringPathLike, TextIO],\n        **kwargs: Any,\n    ) -> None:",
        "detail": "dbus-serialbattery.ext.can.io.trc",
        "documentation": {}
    },
    {
        "label": "TRCWriter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.io.trc",
        "description": "dbus-serialbattery.ext.can.io.trc",
        "peekOfCode": "class TRCWriter(TextIOMessageWriter):\n    \"\"\"Logs CAN data to text file (.trc).\n    The measurement starts with the timestamp of the first registered message.\n    If a message has a timestamp smaller than the previous one or None,\n    it gets assigned the timestamp that was written for the last message.\n    If the first message does not have a timestamp, it is set to zero.\n    \"\"\"\n    file: TextIO\n    first_timestamp: Optional[float]\n    FORMAT_MESSAGE = (",
        "detail": "dbus-serialbattery.ext.can.io.trc",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.io.trc",
        "description": "dbus-serialbattery.ext.can.io.trc",
        "peekOfCode": "logger = logging.getLogger(\"can.io.trc\")\nclass TRCFileVersion(Enum):\n    UNKNOWN = 0\n    V1_0 = 100\n    V1_1 = 101\n    V1_2 = 102\n    V1_3 = 103\n    V2_0 = 200\n    V2_1 = 201\n    def __ge__(self, other):",
        "detail": "dbus-serialbattery.ext.can.io.trc",
        "documentation": {}
    },
    {
        "label": "_EntryPoint",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can._entry_points",
        "description": "dbus-serialbattery.ext.can._entry_points",
        "peekOfCode": "class _EntryPoint:\n    key: str\n    module_name: str\n    class_name: str\n    def load(self) -> Any:\n        module = importlib.import_module(self.module_name)\n        return getattr(module, self.class_name)\n# See https://docs.python.org/3/library/importlib.metadata.html#entry-points,\n# \"Compatibility Note\".\nif sys.version_info >= (3, 10):",
        "detail": "dbus-serialbattery.ext.can._entry_points",
        "documentation": {}
    },
    {
        "label": "BitTiming",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.bit_timing",
        "description": "dbus-serialbattery.ext.can.bit_timing",
        "peekOfCode": "class BitTiming(Mapping):\n    \"\"\"Representation of a bit timing configuration for a CAN 2.0 bus.\n    The class can be constructed in multiple ways, depending on the information\n    available. The preferred way is using CAN clock frequency, prescaler, tseg1, tseg2 and sjw::\n        can.BitTiming(f_clock=8_000_000, brp=1, tseg1=5, tseg2=1, sjw=1)\n    Alternatively you can set the bitrate instead of the bit rate prescaler::\n        can.BitTiming.from_bitrate_and_segments(\n            f_clock=8_000_000, bitrate=1_000_000, tseg1=5, tseg2=1, sjw=1\n        )\n    It is also possible to specify BTR registers::",
        "detail": "dbus-serialbattery.ext.can.bit_timing",
        "documentation": {}
    },
    {
        "label": "BitTimingFd",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.bit_timing",
        "description": "dbus-serialbattery.ext.can.bit_timing",
        "peekOfCode": "class BitTimingFd(Mapping):\n    \"\"\"Representation of a bit timing configuration for a CAN FD bus.\n    The class can be constructed in multiple ways, depending on the information\n    available. The preferred way is using CAN clock frequency, bit rate prescaler, tseg1,\n    tseg2 and sjw for both the arbitration (nominal) and data phase::\n        can.BitTimingFd(\n            f_clock=80_000_000,\n            nom_brp=1,\n            nom_tseg1=59,\n            nom_tseg2=20,",
        "detail": "dbus-serialbattery.ext.can.bit_timing",
        "documentation": {}
    },
    {
        "label": "_Pywin32Event",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class _Pywin32Event:\n    handle: int\nclass _Pywin32:\n    def __init__(self) -> None:\n        import pywintypes  # pylint: disable=import-outside-toplevel,import-error\n        import win32event  # pylint: disable=import-outside-toplevel,import-error\n        self.pywintypes = pywintypes\n        self.win32event = win32event\n    def create_timer(self) -> _Pywin32Event:\n        try:",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "_Pywin32",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class _Pywin32:\n    def __init__(self) -> None:\n        import pywintypes  # pylint: disable=import-outside-toplevel,import-error\n        import win32event  # pylint: disable=import-outside-toplevel,import-error\n        self.pywintypes = pywintypes\n        self.win32event = win32event\n    def create_timer(self) -> _Pywin32Event:\n        try:\n            event = self.win32event.CreateWaitableTimerEx(\n                None,",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "CyclicTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class CyclicTask(abc.ABC):\n    \"\"\"\n    Abstract Base for all cyclic tasks.\n    \"\"\"\n    @abc.abstractmethod\n    def stop(self) -> None:\n        \"\"\"Cancel this periodic task.\n        :raises ~can.exceptions.CanError:\n            If stop is called on an already stopped task.\n        \"\"\"",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "CyclicSendTaskABC",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class CyclicSendTaskABC(CyclicTask, abc.ABC):\n    \"\"\"\n    Message send task with defined period\n    \"\"\"\n    def __init__(\n        self, messages: Union[Sequence[Message], Message], period: float\n    ) -> None:\n        \"\"\"\n        :param messages:\n            The messages to be sent periodically.",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "LimitedDurationCyclicSendTaskABC",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class LimitedDurationCyclicSendTaskABC(CyclicSendTaskABC, abc.ABC):\n    def __init__(\n        self,\n        messages: Union[Sequence[Message], Message],\n        period: float,\n        duration: Optional[float],\n    ) -> None:\n        \"\"\"Message send task with a defined duration and period.\n        :param messages:\n            The messages to be sent periodically.",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "RestartableCyclicTaskABC",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class RestartableCyclicTaskABC(CyclicSendTaskABC, abc.ABC):\n    \"\"\"Adds support for restarting a stopped cyclic task\"\"\"\n    @abc.abstractmethod\n    def start(self) -> None:\n        \"\"\"Restart a stopped periodic task.\"\"\"\nclass ModifiableCyclicTaskABC(CyclicSendTaskABC, abc.ABC):\n    def _check_modified_messages(self, messages: Tuple[Message, ...]) -> None:\n        \"\"\"Helper function to perform error checking when modifying the data in\n        the cyclic task.\n        Performs error checking to ensure the arbitration ID and the number of",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "ModifiableCyclicTaskABC",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class ModifiableCyclicTaskABC(CyclicSendTaskABC, abc.ABC):\n    def _check_modified_messages(self, messages: Tuple[Message, ...]) -> None:\n        \"\"\"Helper function to perform error checking when modifying the data in\n        the cyclic task.\n        Performs error checking to ensure the arbitration ID and the number of\n        cyclic messages hasn't changed.\n        Should be called when modify_data is called in the cyclic task.\n        :raises ValueError: If the given messages are invalid\n        \"\"\"\n        if len(self.messages) != len(messages):",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "MultiRateCyclicSendTaskABC",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class MultiRateCyclicSendTaskABC(CyclicSendTaskABC, abc.ABC):\n    \"\"\"A Cyclic send task that supports switches send frequency after a set time.\"\"\"\n    def __init__(\n        self,\n        channel: typechecking.Channel,\n        messages: Union[Sequence[Message], Message],\n        count: int,  # pylint: disable=unused-argument\n        initial_period: float,  # pylint: disable=unused-argument\n        subsequent_period: float,\n    ) -> None:",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "ThreadBasedCyclicSendTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "class ThreadBasedCyclicSendTask(\n    LimitedDurationCyclicSendTaskABC, ModifiableCyclicTaskABC, RestartableCyclicTaskABC\n):\n    \"\"\"Fallback cyclic send task using daemon thread.\"\"\"\n    def __init__(\n        self,\n        bus: \"BusABC\",\n        lock: threading.Lock,\n        messages: Union[Sequence[Message], Message],\n        period: float,",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.broadcastmanager",
        "description": "dbus-serialbattery.ext.can.broadcastmanager",
        "peekOfCode": "log = logging.getLogger(\"can.bcm\")\nNANOSECONDS_IN_SECOND: Final[int] = 1_000_000_000\nclass _Pywin32Event:\n    handle: int\nclass _Pywin32:\n    def __init__(self) -> None:\n        import pywintypes  # pylint: disable=import-outside-toplevel,import-error\n        import win32event  # pylint: disable=import-outside-toplevel,import-error\n        self.pywintypes = pywintypes\n        self.win32event = win32event",
        "detail": "dbus-serialbattery.ext.can.broadcastmanager",
        "documentation": {}
    },
    {
        "label": "BusState",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.bus",
        "description": "dbus-serialbattery.ext.can.bus",
        "peekOfCode": "class BusState(Enum):\n    \"\"\"The state in which a :class:`can.BusABC` can be.\"\"\"\n    ACTIVE = auto()\n    PASSIVE = auto()\n    ERROR = auto()\nclass CanProtocol(Enum):\n    \"\"\"The CAN protocol type supported by a :class:`can.BusABC` instance\"\"\"\n    CAN_20 = auto()\n    CAN_FD = auto()  # ISO Mode\n    CAN_FD_NON_ISO = auto()",
        "detail": "dbus-serialbattery.ext.can.bus",
        "documentation": {}
    },
    {
        "label": "CanProtocol",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.bus",
        "description": "dbus-serialbattery.ext.can.bus",
        "peekOfCode": "class CanProtocol(Enum):\n    \"\"\"The CAN protocol type supported by a :class:`can.BusABC` instance\"\"\"\n    CAN_20 = auto()\n    CAN_FD = auto()  # ISO Mode\n    CAN_FD_NON_ISO = auto()\n    CAN_XL = auto()\nclass BusABC(metaclass=ABCMeta):\n    \"\"\"The CAN Bus Abstract Base Class that serves as the basis\n    for all concrete interfaces.\n    This class may be used as an iterator over the received messages",
        "detail": "dbus-serialbattery.ext.can.bus",
        "documentation": {}
    },
    {
        "label": "BusABC",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.bus",
        "description": "dbus-serialbattery.ext.can.bus",
        "peekOfCode": "class BusABC(metaclass=ABCMeta):\n    \"\"\"The CAN Bus Abstract Base Class that serves as the basis\n    for all concrete interfaces.\n    This class may be used as an iterator over the received messages\n    and as a context manager for auto-closing the bus when done using it.\n    Please refer to :ref:`errors` for possible exceptions that may be\n    thrown by certain operations on this bus.\n    \"\"\"\n    #: a string describing the underlying bus and/or channel\n    channel_info = \"unknown\"",
        "detail": "dbus-serialbattery.ext.can.bus",
        "documentation": {}
    },
    {
        "label": "_SelfRemovingCyclicTask",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.bus",
        "description": "dbus-serialbattery.ext.can.bus",
        "peekOfCode": "class _SelfRemovingCyclicTask(CyclicSendTaskABC, ABC):\n    \"\"\"Removes itself from a bus.\n    Only needed for typing :meth:`Bus._periodic_tasks`. Do not instantiate.\n    \"\"\"\n    def stop(self, remove_task: bool = True) -> None:\n        raise NotImplementedError()",
        "detail": "dbus-serialbattery.ext.can.bus",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.bus",
        "description": "dbus-serialbattery.ext.can.bus",
        "peekOfCode": "LOG = logging.getLogger(__name__)\nclass BusState(Enum):\n    \"\"\"The state in which a :class:`can.BusABC` can be.\"\"\"\n    ACTIVE = auto()\n    PASSIVE = auto()\n    ERROR = auto()\nclass CanProtocol(Enum):\n    \"\"\"The CAN protocol type supported by a :class:`can.BusABC` instance\"\"\"\n    CAN_20 = auto()\n    CAN_FD = auto()  # ISO Mode",
        "detail": "dbus-serialbattery.ext.can.bus",
        "documentation": {}
    },
    {
        "label": "CLibrary",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.ctypesutil",
        "description": "dbus-serialbattery.ext.can.ctypesutil",
        "peekOfCode": "class CLibrary(_LibBase):\n    def __init__(self, library_or_path: Union[str, ctypes.CDLL]) -> None:\n        self.func_name: Any\n        if isinstance(library_or_path, str):\n            super().__init__(library_or_path)\n        else:\n            super().__init__(library_or_path._name, library_or_path._handle)\n    def map_symbol(\n        self,\n        func_name: str,",
        "detail": "dbus-serialbattery.ext.can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "HANDLE",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.ctypesutil",
        "description": "dbus-serialbattery.ext.can.ctypesutil",
        "peekOfCode": "class HANDLE(ctypes.c_void_p):\n    pass\nPHANDLE = ctypes.POINTER(HANDLE)",
        "detail": "dbus-serialbattery.ext.can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.ctypesutil",
        "description": "dbus-serialbattery.ext.can.ctypesutil",
        "peekOfCode": "log = logging.getLogger(\"can.ctypesutil\")\n__all__ = [\"CLibrary\", \"HANDLE\", \"PHANDLE\", \"HRESULT\"]\nif sys.platform == \"win32\":\n    _LibBase = ctypes.WinDLL\n    _FUNCTION_TYPE = ctypes.WINFUNCTYPE\nelse:\n    _LibBase = ctypes.CDLL\n    _FUNCTION_TYPE = ctypes.CFUNCTYPE\nclass CLibrary(_LibBase):\n    def __init__(self, library_or_path: Union[str, ctypes.CDLL]) -> None:",
        "detail": "dbus-serialbattery.ext.can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.ctypesutil",
        "description": "dbus-serialbattery.ext.can.ctypesutil",
        "peekOfCode": "__all__ = [\"CLibrary\", \"HANDLE\", \"PHANDLE\", \"HRESULT\"]\nif sys.platform == \"win32\":\n    _LibBase = ctypes.WinDLL\n    _FUNCTION_TYPE = ctypes.WINFUNCTYPE\nelse:\n    _LibBase = ctypes.CDLL\n    _FUNCTION_TYPE = ctypes.CFUNCTYPE\nclass CLibrary(_LibBase):\n    def __init__(self, library_or_path: Union[str, ctypes.CDLL]) -> None:\n        self.func_name: Any",
        "detail": "dbus-serialbattery.ext.can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "PHANDLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.ctypesutil",
        "description": "dbus-serialbattery.ext.can.ctypesutil",
        "peekOfCode": "PHANDLE = ctypes.POINTER(HANDLE)",
        "detail": "dbus-serialbattery.ext.can.ctypesutil",
        "documentation": {}
    },
    {
        "label": "CanError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.exceptions",
        "description": "dbus-serialbattery.ext.can.exceptions",
        "peekOfCode": "class CanError(Exception):\n    \"\"\"Base class for all CAN related exceptions.\n    If specified, the error code is automatically appended to the message:\n    .. testsetup:: canerror\n        from can import CanError, CanOperationError\n    .. doctest:: canerror\n        >>> # With an error code (it also works with a specific error):\n        >>> error = CanOperationError(message=\"Failed to do the thing\", error_code=42)\n        >>> str(error)\n        'Failed to do the thing [Error Code 42]'",
        "detail": "dbus-serialbattery.ext.can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInterfaceNotImplementedError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.exceptions",
        "description": "dbus-serialbattery.ext.can.exceptions",
        "peekOfCode": "class CanInterfaceNotImplementedError(CanError, NotImplementedError):\n    \"\"\"Indicates that the interface is not supported on the current platform.\n    Example scenarios:\n      - No interface with that name exists\n      - The interface is unsupported on the current operating system or interpreter\n      - The driver could not be found or has the wrong version\n    \"\"\"\nclass CanInitializationError(CanError):\n    \"\"\"Indicates an error the occurred while initializing a :class:`can.BusABC`.\n    If initialization fails due to a driver or platform missing/being unsupported,",
        "detail": "dbus-serialbattery.ext.can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanInitializationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.exceptions",
        "description": "dbus-serialbattery.ext.can.exceptions",
        "peekOfCode": "class CanInitializationError(CanError):\n    \"\"\"Indicates an error the occurred while initializing a :class:`can.BusABC`.\n    If initialization fails due to a driver or platform missing/being unsupported,\n    a :exc:`~can.exceptions.CanInterfaceNotImplementedError` is raised instead.\n    If initialization fails due to a value being out of range, a :class:`ValueError`\n    is raised.\n    Example scenarios:\n      - Try to open a non-existent device and/or channel\n      - Try to use an invalid setting, which is ok by value, but not ok for the interface\n      - The device or other resources are already used",
        "detail": "dbus-serialbattery.ext.can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanOperationError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.exceptions",
        "description": "dbus-serialbattery.ext.can.exceptions",
        "peekOfCode": "class CanOperationError(CanError):\n    \"\"\"Indicates an error while in operation.\n    Example scenarios:\n      - A call to a library function results in an unexpected return value\n      - An invalid message was received\n      - The driver rejected a message that was meant to be sent\n      - Cyclic redundancy check (CRC) failed\n      - A message remained unacknowledged\n      - A buffer is full\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.exceptions",
        "documentation": {}
    },
    {
        "label": "CanTimeoutError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.exceptions",
        "description": "dbus-serialbattery.ext.can.exceptions",
        "peekOfCode": "class CanTimeoutError(CanError, TimeoutError):\n    \"\"\"Indicates the timeout of an operation.\n    Example scenarios:\n      - Some message could not be sent after the timeout elapsed\n      - No message was read within the given time\n    \"\"\"\n@contextmanager\ndef error_check(\n    error_message: Optional[str] = None,\n    exception_type: Type[CanError] = CanOperationError,",
        "detail": "dbus-serialbattery.ext.can.exceptions",
        "documentation": {}
    },
    {
        "label": "error_check",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.exceptions",
        "description": "dbus-serialbattery.ext.can.exceptions",
        "peekOfCode": "def error_check(\n    error_message: Optional[str] = None,\n    exception_type: Type[CanError] = CanOperationError,\n) -> Generator[None, None, None]:\n    \"\"\"Catches any exceptions and turns them into the new type while preserving the stack trace.\"\"\"\n    try:\n        yield\n    except Exception as error:  # pylint: disable=broad-except\n        if error_message is None:\n            raise exception_type(str(error)) from error",
        "detail": "dbus-serialbattery.ext.can.exceptions",
        "documentation": {}
    },
    {
        "label": "Bus",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interface",
        "description": "dbus-serialbattery.ext.can.interface",
        "peekOfCode": "def Bus(  # noqa: N802\n    channel: Optional[Channel] = None,\n    interface: Optional[str] = None,\n    config_context: Optional[str] = None,\n    ignore_config: bool = False,\n    **kwargs: Any,\n) -> BusABC:\n    \"\"\"Create a new bus instance with configuration loading.\n    Instantiates a CAN Bus of the given ``interface``, falls back to reading a\n    configuration file from default locations.",
        "detail": "dbus-serialbattery.ext.can.interface",
        "documentation": {}
    },
    {
        "label": "detect_available_configs",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.interface",
        "description": "dbus-serialbattery.ext.can.interface",
        "peekOfCode": "def detect_available_configs(\n    interfaces: Union[None, str, Iterable[str]] = None\n) -> List[AutoDetectedConfig]:\n    \"\"\"Detect all configurations/channels that the interfaces could\n    currently connect with.\n    This might be quite time-consuming.\n    Automated configuration detection may not be implemented by\n    every interface on every platform. This method will not raise\n    an error in that case, but with rather return an empty list\n    for that interface.",
        "detail": "dbus-serialbattery.ext.can.interface",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interface",
        "description": "dbus-serialbattery.ext.can.interface",
        "peekOfCode": "log = logging.getLogger(\"can.interface\")\nlog_autodetect = log.getChild(\"detect_available_configs\")\ndef _get_class_for_interface(interface: str) -> Type[BusABC]:\n    \"\"\"\n    Returns the main bus class for the given interface.\n    :raises:\n        NotImplementedError if the interface is not known\n    :raises CanInterfaceNotImplementedError:\n         if there was a problem while importing the interface or the bus class within that\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.interface",
        "documentation": {}
    },
    {
        "label": "log_autodetect",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.interface",
        "description": "dbus-serialbattery.ext.can.interface",
        "peekOfCode": "log_autodetect = log.getChild(\"detect_available_configs\")\ndef _get_class_for_interface(interface: str) -> Type[BusABC]:\n    \"\"\"\n    Returns the main bus class for the given interface.\n    :raises:\n        NotImplementedError if the interface is not known\n    :raises CanInterfaceNotImplementedError:\n         if there was a problem while importing the interface or the bus class within that\n    \"\"\"\n    # Find the correct backend",
        "detail": "dbus-serialbattery.ext.can.interface",
        "documentation": {}
    },
    {
        "label": "Listener",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.listener",
        "description": "dbus-serialbattery.ext.can.listener",
        "peekOfCode": "class Listener(metaclass=ABCMeta):\n    \"\"\"The basic listener that can be called directly to handle some\n    CAN message::\n        listener = SomeListener()\n        msg = my_bus.recv()\n        # now either call\n        listener(msg)\n        # or\n        listener.on_message_received(msg)\n        # Important to ensure all outputs are flushed",
        "detail": "dbus-serialbattery.ext.can.listener",
        "documentation": {}
    },
    {
        "label": "RedirectReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.listener",
        "description": "dbus-serialbattery.ext.can.listener",
        "peekOfCode": "class RedirectReader(Listener):  # pylint: disable=abstract-method\n    \"\"\"\n    A RedirectReader sends all received messages to another Bus.\n    \"\"\"\n    def __init__(self, bus: BusABC, *args: Any, **kwargs: Any) -> None:\n        super().__init__(*args, **kwargs)\n        self.bus = bus\n    def on_message_received(self, msg: Message) -> None:\n        self.bus.send(msg)\nclass BufferedReader(Listener):  # pylint: disable=abstract-method",
        "detail": "dbus-serialbattery.ext.can.listener",
        "documentation": {}
    },
    {
        "label": "BufferedReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.listener",
        "description": "dbus-serialbattery.ext.can.listener",
        "peekOfCode": "class BufferedReader(Listener):  # pylint: disable=abstract-method\n    \"\"\"\n    A BufferedReader is a subclass of :class:`~can.Listener` which implements a\n    **message buffer**: that is, when the :class:`can.BufferedReader` instance is\n    notified of a new message it pushes it into a queue of messages waiting to\n    be serviced. The messages can then be fetched with\n    :meth:`~can.BufferedReader.get_message`.\n    Putting in messages after :meth:`~can.BufferedReader.stop` has been called will raise\n    an exception, see :meth:`~can.BufferedReader.on_message_received`.\n    :attr is_stopped: ``True`` if the reader has been stopped",
        "detail": "dbus-serialbattery.ext.can.listener",
        "documentation": {}
    },
    {
        "label": "AsyncBufferedReader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.listener",
        "description": "dbus-serialbattery.ext.can.listener",
        "peekOfCode": "class AsyncBufferedReader(\n    Listener, AsyncIterator[Message]\n):  # pylint: disable=abstract-method\n    \"\"\"A message buffer for use with :mod:`asyncio`.\n    See :ref:`asyncio` for how to use with :class:`can.Notifier`.\n    Can also be used as an asynchronous iterator::\n        async for msg in reader:\n            print(msg)\n    \"\"\"\n    def __init__(self, **kwargs: Any) -> None:",
        "detail": "dbus-serialbattery.ext.can.listener",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.logconvert",
        "description": "dbus-serialbattery.ext.can.logconvert",
        "peekOfCode": "class ArgumentParser(argparse.ArgumentParser):\n    def error(self, message):\n        self.print_help(sys.stderr)\n        self.exit(errno.EINVAL, f\"{self.prog}: error: {message}\\n\")\ndef main():\n    parser = ArgumentParser(\n        description=\"Convert a log file from one format to another.\",\n    )\n    parser.add_argument(\n        \"-s\",",
        "detail": "dbus-serialbattery.ext.can.logconvert",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.logconvert",
        "description": "dbus-serialbattery.ext.can.logconvert",
        "peekOfCode": "def main():\n    parser = ArgumentParser(\n        description=\"Convert a log file from one format to another.\",\n    )\n    parser.add_argument(\n        \"-s\",\n        \"--file_size\",\n        dest=\"file_size\",\n        type=int,\n        help=\"Maximum file size in bytes. Rotate log file when size threshold is reached.\",",
        "detail": "dbus-serialbattery.ext.can.logconvert",
        "documentation": {}
    },
    {
        "label": "_CanFilterAction",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.logger",
        "description": "dbus-serialbattery.ext.can.logger",
        "peekOfCode": "class _CanFilterAction(argparse.Action):\n    def __call__(\n        self,\n        parser: argparse.ArgumentParser,\n        namespace: argparse.Namespace,\n        values: Union[str, Sequence[Any], None],\n        option_string: Optional[str] = None,\n    ) -> None:\n        if not isinstance(values, list):\n            raise argparse.ArgumentError(None, \"Invalid filter argument\")",
        "detail": "dbus-serialbattery.ext.can.logger",
        "documentation": {}
    },
    {
        "label": "_BitTimingAction",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.logger",
        "description": "dbus-serialbattery.ext.can.logger",
        "peekOfCode": "class _BitTimingAction(argparse.Action):\n    def __call__(\n        self,\n        parser: argparse.ArgumentParser,\n        namespace: argparse.Namespace,\n        values: Union[str, Sequence[Any], None],\n        option_string: Optional[str] = None,\n    ) -> None:\n        if not isinstance(values, list):\n            raise argparse.ArgumentError(None, \"Invalid --timing argument\")",
        "detail": "dbus-serialbattery.ext.can.logger",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.logger",
        "description": "dbus-serialbattery.ext.can.logger",
        "peekOfCode": "def main() -> None:\n    results, additional_config = _parse_logger_args(sys.argv[1:])\n    bus = _create_bus(results, **additional_config)\n    if results.active:\n        bus.state = BusState.ACTIVE\n    elif results.passive:\n        bus.state = BusState.PASSIVE\n    print(f\"Connected to {bus.__class__.__name__}: {bus.channel_info}\")\n    print(f\"Can Logger (Started on {datetime.now()})\")\n    logger: Union[MessageWriter, BaseRotatingLogger]",
        "detail": "dbus-serialbattery.ext.can.logger",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.message",
        "description": "dbus-serialbattery.ext.can.message",
        "peekOfCode": "class Message:  # pylint: disable=too-many-instance-attributes; OK for a dataclass\n    \"\"\"\n    The :class:`~can.Message` object is used to represent CAN messages for\n    sending, receiving and other purposes like converting between different\n    logging formats.\n    Messages can use extended identifiers, be remote or error frames, contain\n    data and may be associated to a channel.\n    Messages are always compared by identity and never by value, because that\n    may introduce unexpected behaviour. See also :meth:`~can.Message.equals`.\n    :func:`~copy.copy`/:func:`~copy.deepcopy` is supported as well.",
        "detail": "dbus-serialbattery.ext.can.message",
        "documentation": {}
    },
    {
        "label": "Notifier",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.notifier",
        "description": "dbus-serialbattery.ext.can.notifier",
        "peekOfCode": "class Notifier:\n    def __init__(\n        self,\n        bus: Union[BusABC, List[BusABC]],\n        listeners: Iterable[MessageRecipient],\n        timeout: float = 1.0,\n        loop: Optional[asyncio.AbstractEventLoop] = None,\n    ) -> None:\n        \"\"\"Manages the distribution of :class:`~can.Message` instances to listeners.\n        Supports multiple buses and listeners.",
        "detail": "dbus-serialbattery.ext.can.notifier",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.notifier",
        "description": "dbus-serialbattery.ext.can.notifier",
        "peekOfCode": "logger = logging.getLogger(\"can.Notifier\")\nMessageRecipient = Union[Listener, Callable[[Message], Union[Awaitable[None], None]]]\nclass Notifier:\n    def __init__(\n        self,\n        bus: Union[BusABC, List[BusABC]],\n        listeners: Iterable[MessageRecipient],\n        timeout: float = 1.0,\n        loop: Optional[asyncio.AbstractEventLoop] = None,\n    ) -> None:",
        "detail": "dbus-serialbattery.ext.can.notifier",
        "documentation": {}
    },
    {
        "label": "MessageRecipient",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.notifier",
        "description": "dbus-serialbattery.ext.can.notifier",
        "peekOfCode": "MessageRecipient = Union[Listener, Callable[[Message], Union[Awaitable[None], None]]]\nclass Notifier:\n    def __init__(\n        self,\n        bus: Union[BusABC, List[BusABC]],\n        listeners: Iterable[MessageRecipient],\n        timeout: float = 1.0,\n        loop: Optional[asyncio.AbstractEventLoop] = None,\n    ) -> None:\n        \"\"\"Manages the distribution of :class:`~can.Message` instances to listeners.",
        "detail": "dbus-serialbattery.ext.can.notifier",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.player",
        "description": "dbus-serialbattery.ext.can.player",
        "peekOfCode": "def main() -> None:\n    parser = argparse.ArgumentParser(description=\"Replay CAN traffic.\")\n    _create_base_argument_parser(parser)\n    parser.add_argument(\n        \"-f\",\n        \"--file_name\",\n        dest=\"log_file\",\n        help=\"Path and base log filename, for supported types see can.LogReader.\",\n        default=None,\n    )",
        "detail": "dbus-serialbattery.ext.can.player",
        "documentation": {}
    },
    {
        "label": "ThreadSafeBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.thread_safe_bus",
        "description": "dbus-serialbattery.ext.can.thread_safe_bus",
        "peekOfCode": "class ThreadSafeBus(ObjectProxy):  # pylint: disable=abstract-method\n    \"\"\"\n    Contains a thread safe :class:`can.BusABC` implementation that\n    wraps around an existing interface instance. All public methods\n    of that base class are now safe to be called from multiple threads.\n    The send and receive methods are synchronized separately.\n    Use this as a drop-in replacement for :class:`~can.BusABC`.\n    .. note::\n        This approach assumes that both :meth:`~can.BusABC.send` and\n        :meth:`~can.BusABC._recv_internal` of the underlying bus instance can be",
        "detail": "dbus-serialbattery.ext.can.thread_safe_bus",
        "documentation": {}
    },
    {
        "label": "CanFilter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "class CanFilter(TypedDict):\n    can_id: int\n    can_mask: int\nclass CanFilterExtended(TypedDict):\n    can_id: int\n    can_mask: int\n    extended: bool\nCanFilters = typing.Sequence[typing.Union[CanFilter, CanFilterExtended]]\n# TODO: Once buffer protocol support lands in typing, we should switch to that,\n# since can.message.Message attempts to call bytearray() on the given data, so",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanFilterExtended",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "class CanFilterExtended(TypedDict):\n    can_id: int\n    can_mask: int\n    extended: bool\nCanFilters = typing.Sequence[typing.Union[CanFilter, CanFilterExtended]]\n# TODO: Once buffer protocol support lands in typing, we should switch to that,\n# since can.message.Message attempts to call bytearray() on the given data, so\n# this should have the same typing info.\n#\n# See: https://github.com/python/typing/issues/593",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "AutoDetectedConfig",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "class AutoDetectedConfig(TypedDict):\n    interface: str\n    channel: Channel\nReadableBytesLike = typing.Union[bytes, bytearray, memoryview]\nclass BitTimingDict(TypedDict):\n    f_clock: int\n    brp: int\n    tseg1: int\n    tseg2: int\n    sjw: int",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "BitTimingDict",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "class BitTimingDict(TypedDict):\n    f_clock: int\n    brp: int\n    tseg1: int\n    tseg2: int\n    sjw: int\n    nof_samples: int\nclass BitTimingFdDict(TypedDict):\n    f_clock: int\n    nom_brp: int",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "BitTimingFdDict",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "class BitTimingFdDict(TypedDict):\n    f_clock: int\n    nom_brp: int\n    nom_tseg1: int\n    nom_tseg2: int\n    nom_sjw: int\n    data_brp: int\n    data_tseg1: int\n    data_tseg2: int\n    data_sjw: int",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanFilters",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "CanFilters = typing.Sequence[typing.Union[CanFilter, CanFilterExtended]]\n# TODO: Once buffer protocol support lands in typing, we should switch to that,\n# since can.message.Message attempts to call bytearray() on the given data, so\n# this should have the same typing info.\n#\n# See: https://github.com/python/typing/issues/593\nCanData = typing.Union[bytes, bytearray, int, typing.Iterable[int]]\n# Used for the Abstract Base Class\nChannelStr = str\nChannelInt = int",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "CanData",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "CanData = typing.Union[bytes, bytearray, int, typing.Iterable[int]]\n# Used for the Abstract Base Class\nChannelStr = str\nChannelInt = int\nChannel = typing.Union[ChannelInt, ChannelStr]\n# Used by the IO module\nFileLike = typing.Union[typing.TextIO, typing.BinaryIO, gzip.GzipFile]\nStringPathLike = typing.Union[str, \"os.PathLike[str]\"]\nAcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "ChannelStr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "ChannelStr = str\nChannelInt = int\nChannel = typing.Union[ChannelInt, ChannelStr]\n# Used by the IO module\nFileLike = typing.Union[typing.TextIO, typing.BinaryIO, gzip.GzipFile]\nStringPathLike = typing.Union[str, \"os.PathLike[str]\"]\nAcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "ChannelInt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "ChannelInt = int\nChannel = typing.Union[ChannelInt, ChannelStr]\n# Used by the IO module\nFileLike = typing.Union[typing.TextIO, typing.BinaryIO, gzip.GzipFile]\nStringPathLike = typing.Union[str, \"os.PathLike[str]\"]\nAcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]\nTDataStructs: TypeAlias = typing.Dict[",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "Channel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "Channel = typing.Union[ChannelInt, ChannelStr]\n# Used by the IO module\nFileLike = typing.Union[typing.TextIO, typing.BinaryIO, gzip.GzipFile]\nStringPathLike = typing.Union[str, \"os.PathLike[str]\"]\nAcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]\nTDataStructs: TypeAlias = typing.Dict[\n    typing.Union[int, typing.Tuple[int, ...]],",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "FileLike",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "FileLike = typing.Union[typing.TextIO, typing.BinaryIO, gzip.GzipFile]\nStringPathLike = typing.Union[str, \"os.PathLike[str]\"]\nAcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]\nTDataStructs: TypeAlias = typing.Dict[\n    typing.Union[int, typing.Tuple[int, ...]],\n    typing.Union[struct.Struct, typing.Tuple, None],\n]",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "StringPathLike",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "StringPathLike = typing.Union[str, \"os.PathLike[str]\"]\nAcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]\nTDataStructs: TypeAlias = typing.Dict[\n    typing.Union[int, typing.Tuple[int, ...]],\n    typing.Union[struct.Struct, typing.Tuple, None],\n]\nclass AutoDetectedConfig(TypedDict):",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "AcceptedIOType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "AcceptedIOType = typing.Union[FileLike, StringPathLike]\nBusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]\nTDataStructs: TypeAlias = typing.Dict[\n    typing.Union[int, typing.Tuple[int, ...]],\n    typing.Union[struct.Struct, typing.Tuple, None],\n]\nclass AutoDetectedConfig(TypedDict):\n    interface: str",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "BusConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "BusConfig = typing.NewType(\"BusConfig\", typing.Dict[str, typing.Any])\n# Used by CLI scripts\nTAdditionalCliArgs: TypeAlias = typing.Dict[str, typing.Union[str, int, float, bool]]\nTDataStructs: TypeAlias = typing.Dict[\n    typing.Union[int, typing.Tuple[int, ...]],\n    typing.Union[struct.Struct, typing.Tuple, None],\n]\nclass AutoDetectedConfig(TypedDict):\n    interface: str\n    channel: Channel",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "ReadableBytesLike",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.typechecking",
        "description": "dbus-serialbattery.ext.can.typechecking",
        "peekOfCode": "ReadableBytesLike = typing.Union[bytes, bytearray, memoryview]\nclass BitTimingDict(TypedDict):\n    f_clock: int\n    brp: int\n    tseg1: int\n    tseg2: int\n    sjw: int\n    nof_samples: int\nclass BitTimingFdDict(TypedDict):\n    f_clock: int",
        "detail": "dbus-serialbattery.ext.can.typechecking",
        "documentation": {}
    },
    {
        "label": "load_file_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def load_file_config(\n    path: Optional[typechecking.AcceptedIOType] = None, section: str = \"default\"\n) -> Dict[str, str]:\n    \"\"\"\n    Loads configuration from file with following content::\n        [default]\n        interface = socketcan\n        channel = can0\n    :param path:\n        path to config file. If not specified, several sensible",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "load_environment_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def load_environment_config(context: Optional[str] = None) -> Dict[str, str]:\n    \"\"\"\n    Loads config dict from environmental variables (if set):\n    * CAN_INTERFACE\n    * CAN_CHANNEL\n    * CAN_BITRATE\n    * CAN_CONFIG\n    if context is supplied, \"_{context}\" is appended to the environment\n    variable name we will look at. For example if context=\"ABC\":\n    * CAN_INTERFACE_ABC",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def load_config(\n    path: Optional[typechecking.AcceptedIOType] = None,\n    config: Optional[Dict[str, Any]] = None,\n    context: Optional[str] = None,\n) -> typechecking.BusConfig:\n    \"\"\"\n    Returns a dict with configuration details which is loaded from (in this order):\n    - config\n    - can.rc\n    - Environment variables CAN_INTERFACE, CAN_CHANNEL, CAN_BITRATE",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "set_logging_level",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def set_logging_level(level_name: str) -> None:\n    \"\"\"Set the logging level for the `\"can\"` logger.\n    :param level_name:\n        One of: `'critical'`, `'error'`, `'warning'`, `'info'`,\n        `'debug'`, `'subdebug'`, or the value :obj:`None` (=default).\n        Defaults to `'debug'`.\n    \"\"\"\n    can_logger = logging.getLogger(\"can\")\n    try:\n        can_logger.setLevel(getattr(logging, level_name.upper()))",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "len2dlc",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def len2dlc(length: int) -> int:\n    \"\"\"Calculate the DLC from data length.\n    :param length: Length in number of bytes (0-64)\n    :returns: DLC (0-15)\n    \"\"\"\n    if length <= 8:\n        return length\n    for dlc, nof_bytes in enumerate(CAN_FD_DLC):\n        if nof_bytes >= length:\n            return dlc",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "dlc2len",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def dlc2len(dlc: int) -> int:\n    \"\"\"Calculate the data length from DLC.\n    :param dlc: DLC (0-15)\n    :returns: Data length in number of bytes (0-64)\n    \"\"\"\n    return CAN_FD_DLC[dlc] if dlc <= 15 else 64\ndef channel2int(channel: Optional[typechecking.Channel]) -> Optional[int]:\n    \"\"\"Try to convert the channel to an integer.\n    :param channel:\n        Channel string (e.g. `\"can0\"`, `\"CAN1\"`) or an integer",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "channel2int",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def channel2int(channel: Optional[typechecking.Channel]) -> Optional[int]:\n    \"\"\"Try to convert the channel to an integer.\n    :param channel:\n        Channel string (e.g. `\"can0\"`, `\"CAN1\"`) or an integer\n    :returns: Channel integer or ``None`` if unsuccessful\n    \"\"\"\n    if isinstance(channel, int):\n        return channel\n    if isinstance(channel, str):\n        match = re.match(r\".*?(\\d+)$\", channel)",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "deprecated_args_alias",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def deprecated_args_alias(\n    deprecation_start: str,\n    deprecation_end: Optional[str] = None,\n    **aliases: Optional[str],\n) -> Callable[[Callable[P1, T1]], Callable[P1, T1]]:\n    \"\"\"Allows to rename/deprecate a function kwarg(s) and optionally\n    have the deprecated kwarg(s) set as alias(es)\n    Example::\n        @deprecated_args_alias(\"1.2.0\", oldArg=\"new_arg\", anotherOldArg=\"another_new_arg\")\n        def library_function(new_arg, another_new_arg):",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "check_or_adjust_timing_clock",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def check_or_adjust_timing_clock(timing: T2, valid_clocks: Iterable[int]) -> T2:\n    \"\"\"Adjusts the given timing instance to have an *f_clock* value that is within the\n    allowed values specified by *valid_clocks*. If the *f_clock* value of timing is\n    already within *valid_clocks*, then *timing* is returned unchanged.\n    :param timing:\n        The :class:`~can.BitTiming` or :class:`~can.BitTimingFd` instance to adjust.\n    :param valid_clocks:\n        An iterable of integers representing the valid *f_clock* values that the timing instance\n        can be changed to. The order of the values in *valid_clocks* determines the priority in\n        which they are tried, with earlier values being tried before later ones.",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "time_perfcounter_correlation",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def time_perfcounter_correlation() -> Tuple[float, float]:\n    \"\"\"Get the `perf_counter` value nearest to when time.time() is updated\n    Computed if the default timer used by `time.time` on this platform has a resolution\n    higher than 10μs, otherwise the current time and perf_counter is directly returned.\n    This was chosen as typical timer resolution on Linux/macOS is ~1μs, and the Windows\n    platform can vary from ~500μs to 10ms.\n    Note this value is based on when `time.time()` is observed to update from Python,\n    it is not directly returned by the operating system.\n    :returns:\n        (t, performance_counter) time.time value and time.perf_counter value when the time.time",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "cast_from_string",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "def cast_from_string(string_val: str) -> Union[str, int, float, bool]:\n    \"\"\"Perform trivial type conversion from :class:`str` values.\n    :param string_val:\n        the string, that shall be converted\n    \"\"\"\n    if re.match(r\"^[-+]?\\d+$\", string_val):\n        # value is integer\n        return int(string_val)\n    if re.match(r\"^[-+]?\\d*\\.\\d+(?:e[-+]?\\d+)?$\", string_val):\n        # value is float",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "log = logging.getLogger(\"can.util\")\n# List of valid data lengths for a CAN FD message\nCAN_FD_DLC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64]\nREQUIRED_KEYS = [\"interface\", \"channel\"]\nCONFIG_FILES = [\"~/can.conf\"]\nif platform.system() in (\"Linux\", \"Darwin\"):\n    CONFIG_FILES.extend([\"/etc/can.conf\", \"~/.can\", \"~/.canrc\"])\nelif platform.system() == \"Windows\" or platform.python_implementation() == \"IronPython\":\n    CONFIG_FILES.extend([\"can.ini\", os.path.join(os.getenv(\"APPDATA\", \"\"), \"can.ini\")])\ndef load_file_config(",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "CAN_FD_DLC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "CAN_FD_DLC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64]\nREQUIRED_KEYS = [\"interface\", \"channel\"]\nCONFIG_FILES = [\"~/can.conf\"]\nif platform.system() in (\"Linux\", \"Darwin\"):\n    CONFIG_FILES.extend([\"/etc/can.conf\", \"~/.can\", \"~/.canrc\"])\nelif platform.system() == \"Windows\" or platform.python_implementation() == \"IronPython\":\n    CONFIG_FILES.extend([\"can.ini\", os.path.join(os.getenv(\"APPDATA\", \"\"), \"can.ini\")])\ndef load_file_config(\n    path: Optional[typechecking.AcceptedIOType] = None, section: str = \"default\"\n) -> Dict[str, str]:",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "REQUIRED_KEYS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "REQUIRED_KEYS = [\"interface\", \"channel\"]\nCONFIG_FILES = [\"~/can.conf\"]\nif platform.system() in (\"Linux\", \"Darwin\"):\n    CONFIG_FILES.extend([\"/etc/can.conf\", \"~/.can\", \"~/.canrc\"])\nelif platform.system() == \"Windows\" or platform.python_implementation() == \"IronPython\":\n    CONFIG_FILES.extend([\"can.ini\", os.path.join(os.getenv(\"APPDATA\", \"\"), \"can.ini\")])\ndef load_file_config(\n    path: Optional[typechecking.AcceptedIOType] = None, section: str = \"default\"\n) -> Dict[str, str]:\n    \"\"\"",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "CONFIG_FILES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "CONFIG_FILES = [\"~/can.conf\"]\nif platform.system() in (\"Linux\", \"Darwin\"):\n    CONFIG_FILES.extend([\"/etc/can.conf\", \"~/.can\", \"~/.canrc\"])\nelif platform.system() == \"Windows\" or platform.python_implementation() == \"IronPython\":\n    CONFIG_FILES.extend([\"can.ini\", os.path.join(os.getenv(\"APPDATA\", \"\"), \"can.ini\")])\ndef load_file_config(\n    path: Optional[typechecking.AcceptedIOType] = None, section: str = \"default\"\n) -> Dict[str, str]:\n    \"\"\"\n    Loads configuration from file with following content::",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "P1 = ParamSpec(\"P1\")\nT1 = TypeVar(\"T1\")\ndef deprecated_args_alias(\n    deprecation_start: str,\n    deprecation_end: Optional[str] = None,\n    **aliases: Optional[str],\n) -> Callable[[Callable[P1, T1]], Callable[P1, T1]]:\n    \"\"\"Allows to rename/deprecate a function kwarg(s) and optionally\n    have the deprecated kwarg(s) set as alias(es)\n    Example::",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "T1 = TypeVar(\"T1\")\ndef deprecated_args_alias(\n    deprecation_start: str,\n    deprecation_end: Optional[str] = None,\n    **aliases: Optional[str],\n) -> Callable[[Callable[P1, T1]], Callable[P1, T1]]:\n    \"\"\"Allows to rename/deprecate a function kwarg(s) and optionally\n    have the deprecated kwarg(s) set as alias(es)\n    Example::\n        @deprecated_args_alias(\"1.2.0\", oldArg=\"new_arg\", anotherOldArg=\"another_new_arg\")",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.util",
        "description": "dbus-serialbattery.ext.can.util",
        "peekOfCode": "T2 = TypeVar(\"T2\", BitTiming, BitTimingFd)\ndef check_or_adjust_timing_clock(timing: T2, valid_clocks: Iterable[int]) -> T2:\n    \"\"\"Adjusts the given timing instance to have an *f_clock* value that is within the\n    allowed values specified by *valid_clocks*. If the *f_clock* value of timing is\n    already within *valid_clocks*, then *timing* is returned unchanged.\n    :param timing:\n        The :class:`~can.BitTiming` or :class:`~can.BitTimingFd` instance to adjust.\n    :param valid_clocks:\n        An iterable of integers representing the valid *f_clock* values that the timing instance\n        can be changed to. The order of the values in *valid_clocks* determines the priority in",
        "detail": "dbus-serialbattery.ext.can.util",
        "documentation": {}
    },
    {
        "label": "CanViewer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.viewer",
        "description": "dbus-serialbattery.ext.can.viewer",
        "peekOfCode": "class CanViewer:  # pylint: disable=too-many-instance-attributes\n    def __init__(self, stdscr, bus, data_structs, testing=False):\n        self.stdscr = stdscr\n        self.bus = bus\n        self.data_structs = data_structs\n        # Initialise the ID dictionary, Previous values dict, start timestamp,\n        # scroll and variables for pausing the viewer and enabling byte highlighting\n        self.ids = {}\n        self.start_time = None\n        self.scroll = 0",
        "detail": "dbus-serialbattery.ext.can.viewer",
        "documentation": {}
    },
    {
        "label": "SmartFormatter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.can.viewer",
        "description": "dbus-serialbattery.ext.can.viewer",
        "peekOfCode": "class SmartFormatter(argparse.HelpFormatter):\n    def _get_default_metavar_for_optional(self, action):\n        return action.dest.upper()\n    def _format_usage(self, usage, actions, groups, prefix):\n        # Use uppercase for \"Usage:\" text\n        return super()._format_usage(usage, actions, groups, \"Usage: \")\n    def _format_args(self, action, default_metavar):\n        if action.nargs not in (argparse.REMAINDER, argparse.ONE_OR_MORE):\n            return super()._format_args(action, default_metavar)\n        # Use the metavar if \"REMAINDER\" or \"ONE_OR_MORE\" is set",
        "detail": "dbus-serialbattery.ext.can.viewer",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.can.viewer",
        "description": "dbus-serialbattery.ext.can.viewer",
        "peekOfCode": "def main() -> None:\n    parsed_args, data_structs, additional_config = _parse_viewer_args(sys.argv[1:])\n    bus = _create_bus(parsed_args, **additional_config)\n    curses.wrapper(CanViewer, bus, data_structs)  # type: ignore[attr-defined,unused-ignore]\nif __name__ == \"__main__\":\n    # Catch ctrl+c\n    try:\n        main()\n    except KeyboardInterrupt:\n        pass",
        "detail": "dbus-serialbattery.ext.can.viewer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.can.viewer",
        "description": "dbus-serialbattery.ext.can.viewer",
        "peekOfCode": "logger = logging.getLogger(\"can.viewer\")\ntry:\n    import curses\n    from curses.ascii import ESC as KEY_ESC  # type: ignore[attr-defined,unused-ignore]\n    from curses.ascii import SP as KEY_SPACE  # type: ignore[attr-defined,unused-ignore]\nexcept ImportError:\n    # Probably on Windows while windows-curses is not installed (e.g. in PyPy)\n    logger.warning(\n        \"You won't be able to use the viewer program without curses installed!\"\n    )",
        "detail": "dbus-serialbattery.ext.can.viewer",
        "documentation": {}
    },
    {
        "label": "dbusConn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n# dictionary containing the different items\ndbusObjects = {}\n# check if the vbus.ttyO1 exists (it normally does on a ccgx, and for linux a pc, there is\n# some emulator.\nhasVEBus = 'com.victronenergy.vebus.ttyO1' in dbusConn.list_names()\ndbusObjects['PyString'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/String')\nif hasVEBus: dbusObjects['C_string'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Mgmt/ProcessName')\ndbusObjects['PyFloat'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Float')\nif hasVEBus: dbusObjects['C_float'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/V')",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "dbusObjects",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "dbusObjects = {}\n# check if the vbus.ttyO1 exists (it normally does on a ccgx, and for linux a pc, there is\n# some emulator.\nhasVEBus = 'com.victronenergy.vebus.ttyO1' in dbusConn.list_names()\ndbusObjects['PyString'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/String')\nif hasVEBus: dbusObjects['C_string'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Mgmt/ProcessName')\ndbusObjects['PyFloat'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Float')\nif hasVEBus: dbusObjects['C_float'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/V')\ndbusObjects['PyInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Int')\nif hasVEBus: dbusObjects['C_int'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/State')",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "hasVEBus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "hasVEBus = 'com.victronenergy.vebus.ttyO1' in dbusConn.list_names()\ndbusObjects['PyString'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/String')\nif hasVEBus: dbusObjects['C_string'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Mgmt/ProcessName')\ndbusObjects['PyFloat'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Float')\nif hasVEBus: dbusObjects['C_float'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/V')\ndbusObjects['PyInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Int')\nif hasVEBus: dbusObjects['C_int'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/State')\ndbusObjects['PyNegativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/NegativeInt')\nif hasVEBus: dbusObjects['C_negativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/I')\n# print the results",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "dbusObjects['PyString']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "dbusObjects['PyString'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/String')\nif hasVEBus: dbusObjects['C_string'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Mgmt/ProcessName')\ndbusObjects['PyFloat'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Float')\nif hasVEBus: dbusObjects['C_float'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/V')\ndbusObjects['PyInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Int')\nif hasVEBus: dbusObjects['C_int'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/State')\ndbusObjects['PyNegativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/NegativeInt')\nif hasVEBus: dbusObjects['C_negativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/I')\n# print the results\nprint('----')",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "dbusObjects['PyFloat']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "dbusObjects['PyFloat'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Float')\nif hasVEBus: dbusObjects['C_float'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/V')\ndbusObjects['PyInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Int')\nif hasVEBus: dbusObjects['C_int'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/State')\ndbusObjects['PyNegativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/NegativeInt')\nif hasVEBus: dbusObjects['C_negativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/I')\n# print the results\nprint('----')\nfor key, o in dbusObjects.items():\n\tprint(key + ' at ' + o.serviceName + o.path)",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "dbusObjects['PyInt']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "dbusObjects['PyInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/Int')\nif hasVEBus: dbusObjects['C_int'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/State')\ndbusObjects['PyNegativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/NegativeInt')\nif hasVEBus: dbusObjects['C_negativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/I')\n# print the results\nprint('----')\nfor key, o in dbusObjects.items():\n\tprint(key + ' at ' + o.serviceName + o.path)\n\tpprint.pprint(dbusObjects[key])\n\tprint('pprint veBusItem.get_value(): ')",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "dbusObjects['PyNegativeInt']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "peekOfCode": "dbusObjects['PyNegativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.example', '/NegativeInt')\nif hasVEBus: dbusObjects['C_negativeInt'] = VeDbusItemImport(dbusConn, 'com.victronenergy.vebus.ttyO1', '/Dc/I')\n# print the results\nprint('----')\nfor key, o in dbusObjects.items():\n\tprint(key + ' at ' + o.serviceName + o.path)\n\tpprint.pprint(dbusObjects[key])\n\tprint('pprint veBusItem.get_value(): ')\n\tpprint.pprint(dbusObjects[key].get_value())\n\tprint('pprint veBusItem.get_text(): ')",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusitem_import_examples",
        "documentation": {}
    },
    {
        "label": "validate_new_value",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "def validate_new_value(path, newvalue):\n\t# Max RPM setpoint = 1000\n\treturn newvalue <= 1000\ndef get_text_for_rpm(path, value):\n\treturn('%d rotations per minute' % value)\ndef main(argv):\n\t\tglobal dbusObjects\n\t\tprint(__file__ + \" starting up\")\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n\t\tDBusGMainLoop(set_as_default=True)",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "get_text_for_rpm",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "def get_text_for_rpm(path, value):\n\treturn('%d rotations per minute' % value)\ndef main(argv):\n\t\tglobal dbusObjects\n\t\tprint(__file__ + \" starting up\")\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n\t\tDBusGMainLoop(set_as_default=True)\n\t\t# Put ourselves on to the dbus\n\t\tdbusservice = VeDbusService('com.victronenergy.example', register=False)\n\t\t# Most simple and short way to add an object with an initial value of 5.",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "def main(argv):\n\t\tglobal dbusObjects\n\t\tprint(__file__ + \" starting up\")\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n\t\tDBusGMainLoop(set_as_default=True)\n\t\t# Put ourselves on to the dbus\n\t\tdbusservice = VeDbusService('com.victronenergy.example', register=False)\n\t\t# Most simple and short way to add an object with an initial value of 5.\n\t\tdbusservice.add_path('/Position', value=5)\n\t\t# Most advanced way to add a path",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "softwareVersion",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "softwareVersion = '1.0'\ndef validate_new_value(path, newvalue):\n\t# Max RPM setpoint = 1000\n\treturn newvalue <= 1000\ndef get_text_for_rpm(path, value):\n\treturn('%d rotations per minute' % value)\ndef main(argv):\n\t\tglobal dbusObjects\n\t\tprint(__file__ + \" starting up\")\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "\t\tdbusservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "\t\tdbusservice = VeDbusService('com.victronenergy.example', register=False)\n\t\t# Most simple and short way to add an object with an initial value of 5.\n\t\tdbusservice.add_path('/Position', value=5)\n\t\t# Most advanced way to add a path\n\t\tdbusservice.add_path('/RPM', value=100, description='RPM setpoint', writeable=True,\n\t\t\tonchangecallback=validate_new_value, gettextcallback=get_text_for_rpm)\n\t\t# Many types supported\n\t\tdbusservice.add_path('/String', 'this is a string')\n\t\tdbusservice.add_path('/Int', 0)\n\t\tdbusservice.add_path('/NegativeInt', -10)",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "\t\tdbusservice['/Position']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "\t\tdbusservice['/Position'] = 10\n\t\tprint('/Position value is now %s' % dbusservice['/Position'])\n\t\t# To invalidate a value (see com.victronenergy.BusItem specs for definition of invalid), set to None\n\t\tdbusservice['/Position'] = None\n\t\tprint('try changing our RPM by executing the following command from a terminal\\n')\n\t\tprint('dbus-send --print-reply --dest=com.victronenergy.example /RPM com.victronenergy.BusItem.SetValue int32:1200')\n\t\tprint('Reply will be <> 0 for values > 1000: not accepted. And reply will be 0 for values < 1000: accepted.')\n\t\tmainloop = GLib.MainLoop()\n\t\tmainloop.run()\nmain(\"\")",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "\t\tdbusservice['/Position']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "\t\tdbusservice['/Position'] = None\n\t\tprint('try changing our RPM by executing the following command from a terminal\\n')\n\t\tprint('dbus-send --print-reply --dest=com.victronenergy.example /RPM com.victronenergy.BusItem.SetValue int32:1200')\n\t\tprint('Reply will be <> 0 for values > 1000: not accepted. And reply will be 0 for values < 1000: accepted.')\n\t\tmainloop = GLib.MainLoop()\n\t\tmainloop.run()\nmain(\"\")",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "\t\tmainloop",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "description": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "peekOfCode": "\t\tmainloop = GLib.MainLoop()\n\t\tmainloop.run()\nmain(\"\")",
        "detail": "dbus-serialbattery.ext.velib_python.examples.vedbusservice_example",
        "documentation": {}
    },
    {
        "label": "changerequest",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "def changerequest(path, newvalue):\n\tif newvalue < 100:\n\t\treturn True\n\telse:\n\t\treturn False\ndef gettext(path, value):\n\treturn 'gettexted %s %s' % (path, value)\ndef main(argv):\n\t\tglobal dbusObjects\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "gettext",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "def gettext(path, value):\n\treturn 'gettexted %s %s' % (path, value)\ndef main(argv):\n\t\tglobal dbusObjects\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n\t\tDBusGMainLoop(set_as_default=True)\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tdbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Register ourserves on the dbus as a service\n\t\tname = dbus.service.BusName(\"com.victronenergy.dbusexample\", dbusConn)",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "def main(argv):\n\t\tglobal dbusObjects\n\t\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n\t\tDBusGMainLoop(set_as_default=True)\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tdbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Register ourserves on the dbus as a service\n\t\tname = dbus.service.BusName(\"com.victronenergy.dbusexample\", dbusConn)\n\t\t# Create the management objects, as specified in the ccgx dbus-api document\n\t\t# Keep a reference in the global dictionary. Without this they would be removed by",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "dbusObjects",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "dbusObjects = {}\ndef changerequest(path, newvalue):\n\tif newvalue < 100:\n\t\treturn True\n\telse:\n\t\treturn False\ndef gettext(path, value):\n\treturn 'gettexted %s %s' % (path, value)\ndef main(argv):\n\t\tglobal dbusObjects",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusConn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Register ourserves on the dbus as a service\n\t\tname = dbus.service.BusName(\"com.victronenergy.dbusexample\", dbusConn)\n\t\t# Create the management objects, as specified in the ccgx dbus-api document\n\t\t# Keep a reference in the global dictionary. Without this they would be removed by\n\t\t# garbage collector again.\n\t\tdbusObjects['string'] = VeDbusItemExport(dbusConn, '/String', 'this is a string')\n\t\tdbusObjects['int'] = VeDbusItemExport(dbusConn, '/Int', 40000)\n\t\tdbusObjects['negativeInt'] = VeDbusItemExport(dbusConn, '/NegativeInt', -10)\n\t\tdbusObjects['float'] = VeDbusItemExport(dbusConn, '/Float', 1.5)",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tname",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tname = dbus.service.BusName(\"com.victronenergy.dbusexample\", dbusConn)\n\t\t# Create the management objects, as specified in the ccgx dbus-api document\n\t\t# Keep a reference in the global dictionary. Without this they would be removed by\n\t\t# garbage collector again.\n\t\tdbusObjects['string'] = VeDbusItemExport(dbusConn, '/String', 'this is a string')\n\t\tdbusObjects['int'] = VeDbusItemExport(dbusConn, '/Int', 40000)\n\t\tdbusObjects['negativeInt'] = VeDbusItemExport(dbusConn, '/NegativeInt', -10)\n\t\tdbusObjects['float'] = VeDbusItemExport(dbusConn, '/Float', 1.5)\n\t\tdbusObjects['invalid'] = VeDbusItemExport(dbusConn, '/Invalid', None)\n\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['string']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['string'] = VeDbusItemExport(dbusConn, '/String', 'this is a string')\n\t\tdbusObjects['int'] = VeDbusItemExport(dbusConn, '/Int', 40000)\n\t\tdbusObjects['negativeInt'] = VeDbusItemExport(dbusConn, '/NegativeInt', -10)\n\t\tdbusObjects['float'] = VeDbusItemExport(dbusConn, '/Float', 1.5)\n\t\tdbusObjects['invalid'] = VeDbusItemExport(dbusConn, '/Invalid', None)\n\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))\n\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['int']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['int'] = VeDbusItemExport(dbusConn, '/Int', 40000)\n\t\tdbusObjects['negativeInt'] = VeDbusItemExport(dbusConn, '/NegativeInt', -10)\n\t\tdbusObjects['float'] = VeDbusItemExport(dbusConn, '/Float', 1.5)\n\t\tdbusObjects['invalid'] = VeDbusItemExport(dbusConn, '/Invalid', None)\n\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))\n\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['negativeInt']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['negativeInt'] = VeDbusItemExport(dbusConn, '/NegativeInt', -10)\n\t\tdbusObjects['float'] = VeDbusItemExport(dbusConn, '/Float', 1.5)\n\t\tdbusObjects['invalid'] = VeDbusItemExport(dbusConn, '/Invalid', None)\n\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))\n\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['float']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['float'] = VeDbusItemExport(dbusConn, '/Float', 1.5)\n\t\tdbusObjects['invalid'] = VeDbusItemExport(dbusConn, '/Invalid', None)\n\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))\n\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)\n\t\tmainloop = GLib.MainLoop()",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['invalid']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['invalid'] = VeDbusItemExport(dbusConn, '/Invalid', None)\n\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))\n\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)\n\t\tmainloop = GLib.MainLoop()\n\t\tprint(\"up and running\")",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['byte']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['byte'] = VeDbusItemExport(dbusConn, '/Byte', dbus.Byte(84))\n\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)\n\t\tmainloop = GLib.MainLoop()\n\t\tprint(\"up and running\")\n\t\tsys.stdout.flush()",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['writeable']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['writeable'] = VeDbusItemExport(dbusConn, '/Writeable', 'original', writeable=True)\n\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)\n\t\tmainloop = GLib.MainLoop()\n\t\tprint(\"up and running\")\n\t\tsys.stdout.flush()\n\t\tmainloop.run()",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['not-writeable']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['not-writeable'] = VeDbusItemExport(dbusConn, '/NotWriteable', 'original', writeable=False)\n\t\tdbusObjects['not-writeable with cb'] = VeDbusItemExport(dbusConn, '/WriteableUpTo100',\n\t\t\t'original', writeable=True, onchangecallback=changerequest)\n\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)\n\t\tmainloop = GLib.MainLoop()\n\t\tprint(\"up and running\")\n\t\tsys.stdout.flush()\n\t\tmainloop.run()\nmain(\"\")",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tdbusObjects['gettextcallback']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tdbusObjects['gettextcallback'] = VeDbusItemExport(dbusConn, '/Gettextcallback',\n\t\t\t'10', gettextcallback=gettext, writeable=True)\n\t\tmainloop = GLib.MainLoop()\n\t\tprint(\"up and running\")\n\t\tsys.stdout.flush()\n\t\tmainloop.run()\nmain(\"\")",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tmainloop",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "peekOfCode": "\t\tmainloop = GLib.MainLoop()\n\t\tprint(\"up and running\")\n\t\tsys.stdout.flush()\n\t\tmainloop.run()\nmain(\"\")",
        "detail": "dbus-serialbattery.ext.velib_python.test.fixture_vedbus",
        "documentation": {}
    },
    {
        "label": "MockDbusMonitor",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_dbus_monitor",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_dbus_monitor",
        "peekOfCode": "class MockDbusMonitor(object):\n    def __init__(self, dbusTree, valueChangedCallback=None, deviceAddedCallback=None,\n            deviceRemovedCallback=None, mountEventCallback=None, vebusDeviceInstance0=False, checkPaths=True):\n        self._services = {}\n        self._tree = {}\n        self._seen = defaultdict(set)\n        self._watches = defaultdict(dict)\n        self._checkPaths = checkPaths\n        self._value_changed_callback = valueChangedCallback\n        self._device_removed_callback = deviceRemovedCallback",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_dbus_monitor",
        "documentation": {}
    },
    {
        "label": "MockImportItem",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_dbus_monitor",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_dbus_monitor",
        "peekOfCode": "class MockImportItem(object):\n    def __init__(self, value, valid=True, service_exists=True):\n        self._value = value\n        self._valid = valid\n        self._service_exists = service_exists\n    def set_service_exists(self, service_exists):\n        self._service_exists = service_exists\n    def get_value(self):\n        return self._value\n    @property",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_dbus_monitor",
        "documentation": {}
    },
    {
        "label": "MockDbusService",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_dbus_service",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_dbus_service",
        "peekOfCode": "class MockDbusService(object):\n    def __init__(self, servicename):\n        self._dbusobjects = {}\n        self._callbacks = {}\n        self._service_name = servicename\n    def add_path(self, path, value, description=\"\", writeable=False, onchangecallback=None,\n                 gettextcallback=None, itemtype=None):\n        self._dbusobjects[path] = value\n        if onchangecallback is not None:\n            self._callbacks[path] = onchangecallback",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_dbus_service",
        "documentation": {}
    },
    {
        "label": "MockTimer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "class MockTimer(object):\n\tdef __init__(self, start, timeout, callback, *args, **kwargs):\n\t\tself._timeout = timeout\n\t\tself._next = start + timeout\n\t\tself._callback = callback\n\t\tself._args = args\n\t\tself._kwargs = kwargs\n\tdef run(self):\n\t\tself._next += self._timeout\n\t\treturn self._callback(*self._args, **self._kwargs)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "MockTimerManager",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "class MockTimerManager(object):\n\tdef __init__(self, start_time=None):\n\t\tself._resources = []\n\t\tself._time = 0\n\t\tself._id = 0\n\t\tself._timestamp = start_time or time.time()\n\tdef add_timer(self, timeout, callback, *args, **kwargs):\n\t\treturn self._add_resource(MockTimer(self._time, timeout, callback, *args, **kwargs))\n\tdef add_idle(self, callback, *args, **kwargs):\n\t\treturn self.add_timer(self._time, callback, *args, **kwargs)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "class datetime(object):\n\t@staticmethod\n\tdef now():\n\t\treturn timer_manager.datetime\n\t@staticmethod\n\tdef strptime(*args, **kwargs):\n\t\treturn dt.strptime(*args, **kwargs)\ndef source_remove(id):\n\ttimer_manager.remove_resouce(id)\ndef test_function(m, name):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "idle_add",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def idle_add(callback, *args, **kwargs):\n\treturn timer_manager.add_idle(callback, *args, **kwargs)\ndef timeout_add(timeout, callback, *args, **kwargs):\n\treturn timer_manager.add_timer(timeout, callback, *args, **kwargs)\ndef timeout_add_seconds(timeout, callback, *args, **kwargs):\n\treturn timeout_add(timeout * 1000, callback, *args, **kwargs)\nclass datetime(object):\n\t@staticmethod\n\tdef now():\n\t\treturn timer_manager.datetime",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "timeout_add",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def timeout_add(timeout, callback, *args, **kwargs):\n\treturn timer_manager.add_timer(timeout, callback, *args, **kwargs)\ndef timeout_add_seconds(timeout, callback, *args, **kwargs):\n\treturn timeout_add(timeout * 1000, callback, *args, **kwargs)\nclass datetime(object):\n\t@staticmethod\n\tdef now():\n\t\treturn timer_manager.datetime\n\t@staticmethod\n\tdef strptime(*args, **kwargs):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "timeout_add_seconds",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def timeout_add_seconds(timeout, callback, *args, **kwargs):\n\treturn timeout_add(timeout * 1000, callback, *args, **kwargs)\nclass datetime(object):\n\t@staticmethod\n\tdef now():\n\t\treturn timer_manager.datetime\n\t@staticmethod\n\tdef strptime(*args, **kwargs):\n\t\treturn dt.strptime(*args, **kwargs)\ndef source_remove(id):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "source_remove",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def source_remove(id):\n\ttimer_manager.remove_resouce(id)\ndef test_function(m, name):\n\tprint(m.time, m.datetime, name)\n\treturn True\ndef patch_gobject(dest):\n\t'''\n\tUse this function to replace the original gobject/GLib functions with the\n\tmocked versions in this file.  Suppose your source files being tested uses\n\t'from gi.repository import GLib' and the unit test uses 'import tested' you",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "test_function",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def test_function(m, name):\n\tprint(m.time, m.datetime, name)\n\treturn True\ndef patch_gobject(dest):\n\t'''\n\tUse this function to replace the original gobject/GLib functions with the\n\tmocked versions in this file.  Suppose your source files being tested uses\n\t'from gi.repository import GLib' and the unit test uses 'import tested' you\n\tshould call path(tested.GLib).\n\t'''",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "patch_gobject",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def patch_gobject(dest):\n\t'''\n\tUse this function to replace the original gobject/GLib functions with the\n\tmocked versions in this file.  Suppose your source files being tested uses\n\t'from gi.repository import GLib' and the unit test uses 'import tested' you\n\tshould call path(tested.GLib).\n\t'''\n\tdest.timeout_add = timeout_add\n\tdest.timeout_add_seconds = timeout_add_seconds\n\tdest.idle_add = idle_add",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "patch_datetime",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "def patch_datetime(dest):\n\tdest.datetime = datetime\nif __name__ == '__main__':\n\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)\n\tm.run(2000)\n\tm.remove_resouce(id2)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._timeout",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._timeout = timeout\n\t\tself._next = start + timeout\n\t\tself._callback = callback\n\t\tself._args = args\n\t\tself._kwargs = kwargs\n\tdef run(self):\n\t\tself._next += self._timeout\n\t\treturn self._callback(*self._args, **self._kwargs)\n\t@property\n\tdef next(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._next",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._next = start + timeout\n\t\tself._callback = callback\n\t\tself._args = args\n\t\tself._kwargs = kwargs\n\tdef run(self):\n\t\tself._next += self._timeout\n\t\treturn self._callback(*self._args, **self._kwargs)\n\t@property\n\tdef next(self):\n\t\treturn self._next",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._callback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._callback = callback\n\t\tself._args = args\n\t\tself._kwargs = kwargs\n\tdef run(self):\n\t\tself._next += self._timeout\n\t\treturn self._callback(*self._args, **self._kwargs)\n\t@property\n\tdef next(self):\n\t\treturn self._next\nclass MockTimerManager(object):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._args",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._args = args\n\t\tself._kwargs = kwargs\n\tdef run(self):\n\t\tself._next += self._timeout\n\t\treturn self._callback(*self._args, **self._kwargs)\n\t@property\n\tdef next(self):\n\t\treturn self._next\nclass MockTimerManager(object):\n\tdef __init__(self, start_time=None):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._kwargs",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._kwargs = kwargs\n\tdef run(self):\n\t\tself._next += self._timeout\n\t\treturn self._callback(*self._args, **self._kwargs)\n\t@property\n\tdef next(self):\n\t\treturn self._next\nclass MockTimerManager(object):\n\tdef __init__(self, start_time=None):\n\t\tself._resources = []",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._resources",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._resources = []\n\t\tself._time = 0\n\t\tself._id = 0\n\t\tself._timestamp = start_time or time.time()\n\tdef add_timer(self, timeout, callback, *args, **kwargs):\n\t\treturn self._add_resource(MockTimer(self._time, timeout, callback, *args, **kwargs))\n\tdef add_idle(self, callback, *args, **kwargs):\n\t\treturn self.add_timer(self._time, callback, *args, **kwargs)\n\tdef remove_resouce(self, id):\n\t\tfor rid, rr in self._resources:",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._time",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._time = 0\n\t\tself._id = 0\n\t\tself._timestamp = start_time or time.time()\n\tdef add_timer(self, timeout, callback, *args, **kwargs):\n\t\treturn self._add_resource(MockTimer(self._time, timeout, callback, *args, **kwargs))\n\tdef add_idle(self, callback, *args, **kwargs):\n\t\treturn self.add_timer(self._time, callback, *args, **kwargs)\n\tdef remove_resouce(self, id):\n\t\tfor rid, rr in self._resources:\n\t\t\tif rid == id:",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._id = 0\n\t\tself._timestamp = start_time or time.time()\n\tdef add_timer(self, timeout, callback, *args, **kwargs):\n\t\treturn self._add_resource(MockTimer(self._time, timeout, callback, *args, **kwargs))\n\tdef add_idle(self, callback, *args, **kwargs):\n\t\treturn self.add_timer(self._time, callback, *args, **kwargs)\n\tdef remove_resouce(self, id):\n\t\tfor rid, rr in self._resources:\n\t\t\tif rid == id:\n\t\t\t\tself._resources.remove((rid, rr))",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._timestamp",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._timestamp = start_time or time.time()\n\tdef add_timer(self, timeout, callback, *args, **kwargs):\n\t\treturn self._add_resource(MockTimer(self._time, timeout, callback, *args, **kwargs))\n\tdef add_idle(self, callback, *args, **kwargs):\n\t\treturn self.add_timer(self._time, callback, *args, **kwargs)\n\tdef remove_resouce(self, id):\n\t\tfor rid, rr in self._resources:\n\t\t\tif rid == id:\n\t\t\t\tself._resources.remove((rid, rr))\n\t\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnext_timer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\t\t\tnext_timer = None\n\t\t\t\tnext_id = None\n\t\t\t\tfor id,t in self._resources:\n\t\t\t\t\tif next_timer == None or t.next < next_timer.next:\n\t\t\t\t\t\tnext_timer = t\n\t\t\t\t\t\tnext_id = id\n\t\t\t\tif next_timer == None:\n\t\t\t\t\treturn\n\t\t\t\tself._time = next_timer.next\n\t\t\t\tif not next_timer.run():",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnext_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\t\t\tnext_id = None\n\t\t\t\tfor id,t in self._resources:\n\t\t\t\t\tif next_timer == None or t.next < next_timer.next:\n\t\t\t\t\t\tnext_timer = t\n\t\t\t\t\t\tnext_id = id\n\t\t\t\tif next_timer == None:\n\t\t\t\t\treturn\n\t\t\t\tself._time = next_timer.next\n\t\t\t\tif not next_timer.run():\n\t\t\t\t\tself._resources.remove((next_id, next_timer))",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tnext_timer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\t\t\t\t\tnext_timer = t\n\t\t\t\t\t\tnext_id = id\n\t\t\t\tif next_timer == None:\n\t\t\t\t\treturn\n\t\t\t\tself._time = next_timer.next\n\t\t\t\tif not next_timer.run():\n\t\t\t\t\tself._resources.remove((next_id, next_timer))\n\t\texcept StopIteration:\n\t\t\tself._resources.remove((next_id, next_timer))\n\t\t\tpass",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tnext_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\t\t\t\t\tnext_id = id\n\t\t\t\tif next_timer == None:\n\t\t\t\t\treturn\n\t\t\t\tself._time = next_timer.next\n\t\t\t\tif not next_timer.run():\n\t\t\t\t\tself._resources.remove((next_id, next_timer))\n\t\texcept StopIteration:\n\t\t\tself._resources.remove((next_id, next_timer))\n\t\t\tpass\n\tdef reset(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself._time",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\t\t\tself._time = next_timer.next\n\t\t\t\tif not next_timer.run():\n\t\t\t\t\tself._resources.remove((next_id, next_timer))\n\t\texcept StopIteration:\n\t\t\tself._resources.remove((next_id, next_timer))\n\t\t\tpass\n\tdef reset(self):\n\t\tself._resources = []\n\t\tself._time = 0\ntimer_manager = MockTimerManager()",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._resources",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._resources = []\n\t\tself._time = 0\ntimer_manager = MockTimerManager()\ndef idle_add(callback, *args, **kwargs):\n\treturn timer_manager.add_idle(callback, *args, **kwargs)\ndef timeout_add(timeout, callback, *args, **kwargs):\n\treturn timer_manager.add_timer(timeout, callback, *args, **kwargs)\ndef timeout_add_seconds(timeout, callback, *args, **kwargs):\n\treturn timeout_add(timeout * 1000, callback, *args, **kwargs)\nclass datetime(object):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\t\tself._time",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\t\tself._time = 0\ntimer_manager = MockTimerManager()\ndef idle_add(callback, *args, **kwargs):\n\treturn timer_manager.add_idle(callback, *args, **kwargs)\ndef timeout_add(timeout, callback, *args, **kwargs):\n\treturn timer_manager.add_timer(timeout, callback, *args, **kwargs)\ndef timeout_add_seconds(timeout, callback, *args, **kwargs):\n\treturn timeout_add(timeout * 1000, callback, *args, **kwargs)\nclass datetime(object):\n\t@staticmethod",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "timer_manager",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "timer_manager = MockTimerManager()\ndef idle_add(callback, *args, **kwargs):\n\treturn timer_manager.add_idle(callback, *args, **kwargs)\ndef timeout_add(timeout, callback, *args, **kwargs):\n\treturn timer_manager.add_timer(timeout, callback, *args, **kwargs)\ndef timeout_add_seconds(timeout, callback, *args, **kwargs):\n\treturn timeout_add(timeout * 1000, callback, *args, **kwargs)\nclass datetime(object):\n\t@staticmethod\n\tdef now():",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tdest.timeout_add",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tdest.timeout_add = timeout_add\n\tdest.timeout_add_seconds = timeout_add_seconds\n\tdest.idle_add = idle_add\n\tdest.source_remove = source_remove\ndef patch_datetime(dest):\n\tdest.datetime = datetime\nif __name__ == '__main__':\n\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tdest.timeout_add_seconds",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tdest.timeout_add_seconds = timeout_add_seconds\n\tdest.idle_add = idle_add\n\tdest.source_remove = source_remove\ndef patch_datetime(dest):\n\tdest.datetime = datetime\nif __name__ == '__main__':\n\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tdest.idle_add",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tdest.idle_add = idle_add\n\tdest.source_remove = source_remove\ndef patch_datetime(dest):\n\tdest.datetime = datetime\nif __name__ == '__main__':\n\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tdest.source_remove",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tdest.source_remove = source_remove\ndef patch_datetime(dest):\n\tdest.datetime = datetime\nif __name__ == '__main__':\n\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)\n\tm.run(2000)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tdest.datetime",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tdest.datetime = datetime\nif __name__ == '__main__':\n\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)\n\tm.run(2000)\n\tm.remove_resouce(id2)\n\tm.run(2000)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tm",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tm = MockTimerManager()\n\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)\n\tm.run(2000)\n\tm.remove_resouce(id2)\n\tm.run(2000)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tid1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tid1 = m.add_timer(100, test_function, m, 'F1')\n\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)\n\tm.run(2000)\n\tm.remove_resouce(id2)\n\tm.run(2000)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "\tid2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "peekOfCode": "\tid2 = m.add_timer(30, test_function, m, 'F2')\n\tm.run(5000)\n\tm.remove_resouce(id1)\n\tm.run(2000)\n\tm.remove_resouce(id2)\n\tm.run(2000)",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_gobject",
        "documentation": {}
    },
    {
        "label": "MockSettingsItem",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "class MockSettingsItem(object):\n    def __init__(self, parent, path):\n        self._parent = parent\n        self.path = path\n    def get_value(self):\n        setting = 'addSetting'+self.path\n        if setting in self._parent._settings:\n            return self._parent[setting]\n        return None\n    def set_value(self, value):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "MockSettingsDevice",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "class MockSettingsDevice(object):\n    def __init__(self, supported_settings, event_callback, name='com.victronenergy.settings', timeout=0):\n        self._dbus_name = name\n        self._settings = supported_settings\n        self._event_callback = event_callback\n        self._settings_items = {}\n    def addSetting(self, path, value, _min, _max, silent=False, callback=None):\n        # Persist in our settings stash so the settings is available through\n        # the mock item\n        self._settings['addSetting'+path] = [path, value, _min, _max, silent]",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "PATH = 0\nVALUE = 1\nMINIMUM = 2\nMAXIMUM = 3\nSILENT = 4\nclass MockSettingsItem(object):\n    def __init__(self, parent, path):\n        self._parent = parent\n        self.path = path\n    def get_value(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "VALUE = 1\nMINIMUM = 2\nMAXIMUM = 3\nSILENT = 4\nclass MockSettingsItem(object):\n    def __init__(self, parent, path):\n        self._parent = parent\n        self.path = path\n    def get_value(self):\n        setting = 'addSetting'+self.path",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "MINIMUM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "MINIMUM = 2\nMAXIMUM = 3\nSILENT = 4\nclass MockSettingsItem(object):\n    def __init__(self, parent, path):\n        self._parent = parent\n        self.path = path\n    def get_value(self):\n        setting = 'addSetting'+self.path\n        if setting in self._parent._settings:",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "MAXIMUM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "MAXIMUM = 3\nSILENT = 4\nclass MockSettingsItem(object):\n    def __init__(self, parent, path):\n        self._parent = parent\n        self.path = path\n    def get_value(self):\n        setting = 'addSetting'+self.path\n        if setting in self._parent._settings:\n            return self._parent[setting]",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "SILENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "description": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "peekOfCode": "SILENT = 4\nclass MockSettingsItem(object):\n    def __init__(self, parent, path):\n        self._parent = parent\n        self.path = path\n    def get_value(self):\n        setting = 'addSetting'+self.path\n        if setting in self._parent._settings:\n            return self._parent[setting]\n        return None",
        "detail": "dbus-serialbattery.ext.velib_python.test.mock_settings_device",
        "documentation": {}
    },
    {
        "label": "CreateSettingsTest",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "peekOfCode": "class CreateSettingsTest(unittest.TestCase):\n\t# The actual code calling VeDbusItemExport is in fixture_vedbus.py, which is ran as a subprocess. That\n\t# code exports several values to the dbus. And then below test cases check if the exported values are\n\t# what the should be, by using the bare dbus import objects and functions.\n\tdef setUp(self):\n\t\tpass\n\tdef tearDown(self):\n\t\tpass\n\tdef test_adding_new_settings(self):\n\t\t# to make sure that we make new settings, put something random in its name:",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "peekOfCode": "logger = logging.getLogger(__file__)\nclass CreateSettingsTest(unittest.TestCase):\n\t# The actual code calling VeDbusItemExport is in fixture_vedbus.py, which is ran as a subprocess. That\n\t# code exports several values to the dbus. And then below test cases check if the exported values are\n\t# what the should be, by using the bare dbus import objects and functions.\n\tdef setUp(self):\n\t\tpass\n\tdef tearDown(self):\n\t\tpass\n\tdef test_adding_new_settings(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\trnd",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "peekOfCode": "\t\trnd = os.urandom(16).encode('hex')\n\t\t# ofcourse below could be simplified, for now just use all settings from the example:\n\t\tsettings = SettingsDevice(\n\t\t\tbus=dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus(),\n\t\t\tsupportedSettings={\n\t\t\t\t'loggingenabled': ['/Settings/' + rnd + '/Logscript/Enabled', 1, 0, 1],\n\t\t\t\t'proxyaddress': ['/Settings/' + rnd + '/Logscript/Http/Proxy', '', 0, 0],\n\t\t\t\t'proxyport': ['/Settings/' + rnd + '/Logscript/Http/ProxyPort', '', 0, 0],\n\t\t\t\t'backlogenabled': ['/Settings/' + rnd + '/Logscript/LogFlash/Enabled', 1, 0, 1],\n\t\t\t\t'backlogpath': ['/Settings/' + rnd + '/Logscript/LogFlash/Path', '', 0, 0],  # When empty, default path will be used.",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tsettings",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "peekOfCode": "\t\tsettings = SettingsDevice(\n\t\t\tbus=dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus(),\n\t\t\tsupportedSettings={\n\t\t\t\t'loggingenabled': ['/Settings/' + rnd + '/Logscript/Enabled', 1, 0, 1],\n\t\t\t\t'proxyaddress': ['/Settings/' + rnd + '/Logscript/Http/Proxy', '', 0, 0],\n\t\t\t\t'proxyport': ['/Settings/' + rnd + '/Logscript/Http/ProxyPort', '', 0, 0],\n\t\t\t\t'backlogenabled': ['/Settings/' + rnd + '/Logscript/LogFlash/Enabled', 1, 0, 1],\n\t\t\t\t'backlogpath': ['/Settings/' + rnd + '/Logscript/LogFlash/Path', '', 0, 0],  # When empty, default path will be used.\n\t\t\t\t'interval': ['/Settings/' + rnd + '/Logscript/LogInterval', 900, 0, 0],\n\t\t\t\t'url': ['/Settings/' + rnd + '/Logscript/Url', '', 0, 0]  # When empty, the default url will be used.",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_settingsdevice",
        "documentation": {}
    },
    {
        "label": "VeDbusServiceTests",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "class VeDbusServiceTests(unittest.TestCase):\n\tdef incrementcallback(self, path, value):\n\t\tself.calledback += 1\n\t\treturn True if value < 50 else False\n\tdef setUp(self):\n\t\tself.calledback = 0\n\t\tself.service = VeDbusService('com.victronenergy.testservice')\n\t\tself.service.add_path(path='/Int', value=10, description=\"int\", writeable=True,\n\t\t\tonchangecallback=self.incrementcallback, gettextcallback=None)\n\t\tself.thread = threading.Thread(target=self.mainloop.run)",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemExportTests",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "class VeDbusItemExportTests(unittest.TestCase):\n\t# The actual code calling VeDbusItemExport is in fixture_vedbus.py, which is ran as a subprocess. That\n\t# code exports several values to the dbus. And then below test cases check if the exported values are\n\t# what the should be, by using the bare dbus import objects and functions.\n\tdef setUp(self):\n\t\tself.sp = subprocess.Popen([sys.executable, \"fixture_vedbus.py\"], stdout=subprocess.PIPE)\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Wait for fixture to be up and running. 'b' prefix is for python3,\n\t\t# it works in both python versions.\n\t\twhile (self.sp.stdout.readline().rstrip() != b'up and running'):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemImportTests",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "class VeDbusItemImportTests(unittest.TestCase):\n\t# VeDbusItemImport class is tested against dbus objects exported by fixture_vedbus.py, which is ran as a\n\t# subprocess.\n\tdef setUp(self):\n\t\tself.sp = subprocess.Popen([sys.executable, \"fixture_vedbus.py\"], stdout=subprocess.PIPE)\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t#wait for fixture to be up and running\n\t\twhile (self.sp.stdout.readline().rstrip() != 'up and running'):\n\t\t\tpass\n\tdef tearDown(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "logger = logging.getLogger(__file__)\n\"\"\"\nclass VeDbusServiceTests(unittest.TestCase):\n\tdef incrementcallback(self, path, value):\n\t\tself.calledback += 1\n\t\treturn True if value < 50 else False\n\tdef setUp(self):\n\t\tself.calledback = 0\n\t\tself.service = VeDbusService('com.victronenergy.testservice')\n\t\tself.service.add_path(path='/Int', value=10, description=\"int\", writeable=True,",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.calledback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.calledback = 0\n\t\tself.service = VeDbusService('com.victronenergy.testservice')\n\t\tself.service.add_path(path='/Int', value=10, description=\"int\", writeable=True,\n\t\t\tonchangecallback=self.incrementcallback, gettextcallback=None)\n\t\tself.thread = threading.Thread(target=self.mainloop.run)\n\t\tself.thread.start()\n\tdef test_callback(self):\n\t\ta = subprocess.check_output('dbus', '-y com.victronenergy.testservice')\n\t\tprint(a)\n\tdef tearDown(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.service",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.service = VeDbusService('com.victronenergy.testservice')\n\t\tself.service.add_path(path='/Int', value=10, description=\"int\", writeable=True,\n\t\t\tonchangecallback=self.incrementcallback, gettextcallback=None)\n\t\tself.thread = threading.Thread(target=self.mainloop.run)\n\t\tself.thread.start()\n\tdef test_callback(self):\n\t\ta = subprocess.check_output('dbus', '-y com.victronenergy.testservice')\n\t\tprint(a)\n\tdef tearDown(self):\n\t\tself.thread.kill()",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.thread",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.thread = threading.Thread(target=self.mainloop.run)\n\t\tself.thread.start()\n\tdef test_callback(self):\n\t\ta = subprocess.check_output('dbus', '-y com.victronenergy.testservice')\n\t\tprint(a)\n\tdef tearDown(self):\n\t\tself.thread.kill()\n\t\tself.thread = None\n\"\"\"\nclass VeDbusItemExportTests(unittest.TestCase):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\ta = subprocess.check_output('dbus', '-y com.victronenergy.testservice')\n\t\tprint(a)\n\tdef tearDown(self):\n\t\tself.thread.kill()\n\t\tself.thread = None\n\"\"\"\nclass VeDbusItemExportTests(unittest.TestCase):\n\t# The actual code calling VeDbusItemExport is in fixture_vedbus.py, which is ran as a subprocess. That\n\t# code exports several values to the dbus. And then below test cases check if the exported values are\n\t# what the should be, by using the bare dbus import objects and functions.",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.thread",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.thread = None\n\"\"\"\nclass VeDbusItemExportTests(unittest.TestCase):\n\t# The actual code calling VeDbusItemExport is in fixture_vedbus.py, which is ran as a subprocess. That\n\t# code exports several values to the dbus. And then below test cases check if the exported values are\n\t# what the should be, by using the bare dbus import objects and functions.\n\tdef setUp(self):\n\t\tself.sp = subprocess.Popen([sys.executable, \"fixture_vedbus.py\"], stdout=subprocess.PIPE)\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Wait for fixture to be up and running. 'b' prefix is for python3,",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.sp",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.sp = subprocess.Popen([sys.executable, \"fixture_vedbus.py\"], stdout=subprocess.PIPE)\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Wait for fixture to be up and running. 'b' prefix is for python3,\n\t\t# it works in both python versions.\n\t\twhile (self.sp.stdout.readline().rstrip() != b'up and running'):\n\t\t\tpass\n\tdef tearDown(self):\n\t\tself.sp.kill()\n\t\tself.sp.wait()\n\t\tself.sp.stdout.close()",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.dbusConn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# Wait for fixture to be up and running. 'b' prefix is for python3,\n\t\t# it works in both python versions.\n\t\twhile (self.sp.stdout.readline().rstrip() != b'up and running'):\n\t\t\tpass\n\tdef tearDown(self):\n\t\tself.sp.kill()\n\t\tself.sp.wait()\n\t\tself.sp.stdout.close()\n\tdef test_get_value_invalid(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Invalid').GetValue()\n\t\tself.assertEqual(v, dbus.Array([], signature=dbus.Signature('i'), variant_level=1))\n\t\tself.assertIs(type(v), dbus.Array)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/Invalid').GetText(), '---')\n\tdef test_get_value_string(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/String').GetValue()\n\t\tself.assertEqual(v, 'this is a string')\n\t\tself.assertIs(type(v), dbus.String)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/String').GetText(), 'this is a string')\n\tdef test_get_value_int(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/String').GetValue()\n\t\tself.assertEqual(v, 'this is a string')\n\t\tself.assertIs(type(v), dbus.String)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/String').GetText(), 'this is a string')\n\tdef test_get_value_int(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Int').GetValue()\n\t\tself.assertEqual(v, 40000)\n\t\tself.assertIs(type(v), dbus.Int32)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/Int').GetText(), '40000')\n\tdef test_get_value_negativeint(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Int').GetValue()\n\t\tself.assertEqual(v, 40000)\n\t\tself.assertIs(type(v), dbus.Int32)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/Int').GetText(), '40000')\n\tdef test_get_value_negativeint(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/NegativeInt').GetValue()\n\t\tself.assertEqual(v, -10)\n\t\tself.assertIs(type(v), dbus.Int32)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/NegativeInt').GetText(), '-10')\n\tdef test_get_value_float(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/NegativeInt').GetValue()\n\t\tself.assertEqual(v, -10)\n\t\tself.assertIs(type(v), dbus.Int32)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/NegativeInt').GetText(), '-10')\n\tdef test_get_value_float(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Float').GetValue()\n\t\tself.assertEqual(v, 1.5)\n\t\tself.assertIs(type(v), dbus.Double)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/Float').GetText(), '1.5')\n\tdef test_get_text_byte(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Float').GetValue()\n\t\tself.assertEqual(v, 1.5)\n\t\tself.assertIs(type(v), dbus.Double)\n\t\tself.assertEqual(self.dbusConn.get_object('com.victronenergy.dbusexample', '/Float').GetText(), '1.5')\n\tdef test_get_text_byte(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Byte').GetText()\n\t\tself.assertEqual('84', v)\n\tdef test_get_value_byte(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Byte').GetValue()\n\t\tself.assertEqual(84, v)",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Byte').GetText()\n\t\tself.assertEqual('84', v)\n\tdef test_get_value_byte(self):\n\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Byte').GetValue()\n\t\tself.assertEqual(84, v)\n\tdef test_set_value(self):\n\t\tself.assertNotEqual(0, self.dbusConn.get_object('com.victronenergy.dbusexample', '/NotWriteable').SetValue(12))\n\t\tself.assertEqual('original', self.dbusConn.get_object('com.victronenergy.dbusexample', '/NotWriteable').GetValue())\n\t\tself.assertEqual(0, self.dbusConn.get_object('com.victronenergy.dbusexample', '/Writeable').SetValue(12))\n\t\tself.assertEqual(12, self.dbusConn.get_object('com.victronenergy.dbusexample', '/Writeable').GetValue())",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = self.dbusConn.get_object('com.victronenergy.dbusexample', '/Byte').GetValue()\n\t\tself.assertEqual(84, v)\n\tdef test_set_value(self):\n\t\tself.assertNotEqual(0, self.dbusConn.get_object('com.victronenergy.dbusexample', '/NotWriteable').SetValue(12))\n\t\tself.assertEqual('original', self.dbusConn.get_object('com.victronenergy.dbusexample', '/NotWriteable').GetValue())\n\t\tself.assertEqual(0, self.dbusConn.get_object('com.victronenergy.dbusexample', '/Writeable').SetValue(12))\n\t\tself.assertEqual(12, self.dbusConn.get_object('com.victronenergy.dbusexample', '/Writeable').GetValue())\n\t\tself.assertNotEqual(0, self.dbusConn.get_object('com.victronenergy.dbusexample', '/WriteableUpTo100').SetValue(102))\n\t\tself.assertEqual('original', self.dbusConn.get_object('com.victronenergy.dbusexample', '/WriteableUpTo100').GetValue())\n\t\tself.assertEqual(0, self.dbusConn.get_object('com.victronenergy.dbusexample', '/WriteableUpTo100').SetValue(50))",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.process",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.process = subprocess.Popen(['dbus-monitor', \"type='signal',sender='com.victronenergy.dbusexample',interface='com.victronenergy.BusItem'\"], stdout=subprocess.PIPE)\n\t\t#wait for dbus-monitor to start up\n\t\ttime.sleep(0.5)\n\t\t#set timeout\n\t\tthread = threading.Thread(target=self.waitandkill)\n\t\tthread.start()\n\t\tself.dbusConn.get_object('com.victronenergy.dbusexample', '/Gettextcallback').SetValue(60)\n\t\tfcntl.fcntl(self.process.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)\n\t\ttime.sleep(0.5)\n\t\tt = bytes()",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tthread",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tthread = threading.Thread(target=self.waitandkill)\n\t\tthread.start()\n\t\tself.dbusConn.get_object('com.victronenergy.dbusexample', '/Gettextcallback').SetValue(60)\n\t\tfcntl.fcntl(self.process.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)\n\t\ttime.sleep(0.5)\n\t\tt = bytes()\n\t\twhile self.process.returncode is None:\n\t\t\ttry:\n\t\t\t\tt += self.process.stdout.readline()\n\t\t\texcept IOError:",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tt = bytes()\n\t\twhile self.process.returncode is None:\n\t\t\ttry:\n\t\t\t\tt += self.process.stdout.readline()\n\t\t\texcept IOError:\n\t\t\t\tbreak\n\t\tself.process.stdout.close()\n\t\ttext = b\"      dict entry(\\n\"\n\t\ttext += b\"         string \\\"Text\\\"\\n\"\n\t\ttext += b\"         variant             string \\\"gettexted /Gettextcallback 60\\\"\\n\"",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\ttext = b\"      dict entry(\\n\"\n\t\ttext += b\"         string \\\"Text\\\"\\n\"\n\t\ttext += b\"         variant             string \\\"gettexted /Gettextcallback 60\\\"\\n\"\n\t\ttext += b\"      )\\n\"\n\t\tvalue = b\"      dict entry(\\n\"\n\t\tvalue += b\"         string \\\"Value\\\"\\n\"\n\t\tvalue += b\"         variant             int32 60\\n\"\n\t\tvalue += b\"      )\\n\"\n\t\tself.assertNotEqual(-1, t.find(text))\n\t\tself.assertNotEqual(-1, t.find(value))",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tvalue = b\"      dict entry(\\n\"\n\t\tvalue += b\"         string \\\"Value\\\"\\n\"\n\t\tvalue += b\"         variant             int32 60\\n\"\n\t\tvalue += b\"      )\\n\"\n\t\tself.assertNotEqual(-1, t.find(text))\n\t\tself.assertNotEqual(-1, t.find(value))\n\t\tthread.join()\n\"\"\"\nMVA 2014-08-30: this test of VEDbusItemImport doesn't work, since there is no gobject-mainloop.\nProbably making some automated functional test, using bash and some scripts, will work much",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.sp",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.sp = subprocess.Popen([sys.executable, \"fixture_vedbus.py\"], stdout=subprocess.PIPE)\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t#wait for fixture to be up and running\n\t\twhile (self.sp.stdout.readline().rstrip() != 'up and running'):\n\t\t\tpass\n\tdef tearDown(self):\n\t\tself.sp.kill()\n\t\tself.sp.wait()\n\tdef test_get_invalid(self):\n\t\tself.assertIs(None, VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Invalid').get_value())",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.dbusConn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t#wait for fixture to be up and running\n\t\twhile (self.sp.stdout.readline().rstrip() != 'up and running'):\n\t\t\tpass\n\tdef tearDown(self):\n\t\tself.sp.kill()\n\t\tself.sp.wait()\n\tdef test_get_invalid(self):\n\t\tself.assertIs(None, VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Invalid').get_value())\n\t\tself.assertEqual('---', VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Invalid').get_text())",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/String')\n\t\tself.assertEqual('this is a string', v.get_value())\n\t\tself.assertIs(dbus.String, type(v.get_value()))\n\t\tself.assertEqual('this is a string', v.get_text())\n\tdef test_get_int(self):\n\t\tv = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Int')\n\t\tself.assertEqual(40000, v.get_value())\n\t\tself.assertIs(dbus.Int32, type(v.get_value()))\n\t\tself.assertEqual('40000', v.get_text())\n\tdef test_get_byte(self):",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Int')\n\t\tself.assertEqual(40000, v.get_value())\n\t\tself.assertIs(dbus.Int32, type(v.get_value()))\n\t\tself.assertEqual('40000', v.get_text())\n\tdef test_get_byte(self):\n\t\tv = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Byte')\n\t\tself.assertEqual(84, v.get_value())\n\t\tself.assertEqual('84', v.get_text())\n\tdef test_set_value(self):\n\t\tnw = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/NotWriteable')",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tv = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Byte')\n\t\tself.assertEqual(84, v.get_value())\n\t\tself.assertEqual('84', v.get_text())\n\tdef test_set_value(self):\n\t\tnw = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/NotWriteable')\n\t\twr = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Writeable')\n\t\twc = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/WriteableUpTo100')\n\t\tself.assertNotEqual(0, nw.set_value(12))\n\t\tself.assertEqual('original', nw.get_value())\n\t\tself.assertEqual(0, wr.set_value(12))",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tnw",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\tnw = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/NotWriteable')\n\t\twr = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Writeable')\n\t\twc = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/WriteableUpTo100')\n\t\tself.assertNotEqual(0, nw.set_value(12))\n\t\tself.assertEqual('original', nw.get_value())\n\t\tself.assertEqual(0, wr.set_value(12))\n\t\tself.assertEqual(12, wr.get_value())\n\t\tself.assertNotEqual(0, wc.set_value(102))\n\t\tself.assertEqual('original', wc.get_value())\n\t\tself.assertEqual(0, wc.set_value(50))",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\twr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\twr = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/Writeable')\n\t\twc = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/WriteableUpTo100')\n\t\tself.assertNotEqual(0, nw.set_value(12))\n\t\tself.assertEqual('original', nw.get_value())\n\t\tself.assertEqual(0, wr.set_value(12))\n\t\tself.assertEqual(12, wr.get_value())\n\t\tself.assertNotEqual(0, wc.set_value(102))\n\t\tself.assertEqual('original', wc.get_value())\n\t\tself.assertEqual(0, wc.set_value(50))\n\t\tself.assertEqual(50, wc.get_value())",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "\t\twc",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "description": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "peekOfCode": "\t\twc = VeDbusItemImport(self.dbusConn, 'com.victronenergy.dbusexample', '/WriteableUpTo100')\n\t\tself.assertNotEqual(0, nw.set_value(12))\n\t\tself.assertEqual('original', nw.get_value())\n\t\tself.assertEqual(0, wr.set_value(12))\n\t\tself.assertEqual(12, wr.get_value())\n\t\tself.assertNotEqual(0, wc.set_value(102))\n\t\tself.assertEqual('original', wc.get_value())\n\t\tself.assertEqual(0, wc.set_value(50))\n\t\tself.assertEqual(50, wc.get_value())\n\"\"\"",
        "detail": "dbus-serialbattery.ext.velib_python.test.test_vedbus",
        "documentation": {}
    },
    {
        "label": "DbusTracker",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "class DbusTracker(object):\n\tdef __init__(self): \n\t\tself.items = {}\n\t\t# For a PC, connect to the SessionBus, otherwise (Venus device) connect to the systembus\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# subscribe to all signals\n\t\tself.dbusConn.add_signal_receiver(self._signal_receive_handler,\n\t\t\tsender_keyword='sender',\n\t\t\tpath_keyword='path')\n\t\tnames = self.dbusConn.list_names()",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "printall",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "def printall():\n\tt_elapsed = time() - t_started\n\tprint(chr(27) + \"[2J\" + chr(27) + \"[;H\")\n\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"\n\tprint(row_format.format(\"Total\", total, 100, total / t_elapsed))\n\tfor service, values in items.items():\n\t\t# skip the services that didn't emit any signals\n\t\tif len(values) == 2 and \"_name\" in values:\n\t\t\tcontinue\n\t\tprint(row_format.format(values.get(\"_name\", service), values[\"_total\"], values[\"_total\"] * 100 / total, values[\"_total\"] / t_elapsed))",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "def main():\n\tDBusGMainLoop(set_as_default=True)\n\td = DbusTracker()\n\tgobject.timeout_add(2000, printall)\n\tmainloop = gobject.MainLoop()\n\tmainloop.run()\nif __name__ == \"__main__\":\n\tmain()",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "items = {}\ntotal = 0\nt_started = time()\nclass DbusTracker(object):\n\tdef __init__(self): \n\t\tself.items = {}\n\t\t# For a PC, connect to the SessionBus, otherwise (Venus device) connect to the systembus\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# subscribe to all signals\n\t\tself.dbusConn.add_signal_receiver(self._signal_receive_handler,",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "total = 0\nt_started = time()\nclass DbusTracker(object):\n\tdef __init__(self): \n\t\tself.items = {}\n\t\t# For a PC, connect to the SessionBus, otherwise (Venus device) connect to the systembus\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# subscribe to all signals\n\t\tself.dbusConn.add_signal_receiver(self._signal_receive_handler,\n\t\t\tsender_keyword='sender',",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "t_started",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "t_started = time()\nclass DbusTracker(object):\n\tdef __init__(self): \n\t\tself.items = {}\n\t\t# For a PC, connect to the SessionBus, otherwise (Venus device) connect to the systembus\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# subscribe to all signals\n\t\tself.dbusConn.add_signal_receiver(self._signal_receive_handler,\n\t\t\tsender_keyword='sender',\n\t\t\tpath_keyword='path')",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\tself.items",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\tself.items = {}\n\t\t# For a PC, connect to the SessionBus, otherwise (Venus device) connect to the systembus\n\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# subscribe to all signals\n\t\tself.dbusConn.add_signal_receiver(self._signal_receive_handler,\n\t\t\tsender_keyword='sender',\n\t\t\tpath_keyword='path')\n\t\tnames = self.dbusConn.list_names()\n\t\tfor name in names:\n\t\t\tif name.startswith(\":\"):",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\tself.dbusConn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\tself.dbusConn = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\t\t# subscribe to all signals\n\t\tself.dbusConn.add_signal_receiver(self._signal_receive_handler,\n\t\t\tsender_keyword='sender',\n\t\t\tpath_keyword='path')\n\t\tnames = self.dbusConn.list_names()\n\t\tfor name in names:\n\t\t\tif name.startswith(\":\"):\n\t\t\t\tcontinue\n\t\t\titems[str(self.dbusConn.get_name_owner(name))] = {\"_total\": 0, \"_name\": str(name)}",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\tnames",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\tnames = self.dbusConn.list_names()\n\t\tfor name in names:\n\t\t\tif name.startswith(\":\"):\n\t\t\t\tcontinue\n\t\t\titems[str(self.dbusConn.get_name_owner(name))] = {\"_total\": 0, \"_name\": str(name)}\n\tdef _signal_receive_handler(*args, **kwargs):\n\t\tglobal total\n\t\ttotal = total + 1\n\t\tsender = str(kwargs['sender'])\n\t\tpath = str(kwargs['path'])",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\t\titems[str(self.dbusConn.get_name_owner(name))]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\t\titems[str(self.dbusConn.get_name_owner(name))] = {\"_total\": 0, \"_name\": str(name)}\n\tdef _signal_receive_handler(*args, **kwargs):\n\t\tglobal total\n\t\ttotal = total + 1\n\t\tsender = str(kwargs['sender'])\n\t\tpath = str(kwargs['path'])\n\t\td = items.get(sender)\n\t\tif d is None:\n\t\t\titems[sender] = {\"_total\": 1, path: 1}\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\ttotal",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\ttotal = total + 1\n\t\tsender = str(kwargs['sender'])\n\t\tpath = str(kwargs['path'])\n\t\td = items.get(sender)\n\t\tif d is None:\n\t\t\titems[sender] = {\"_total\": 1, path: 1}\n\t\t\treturn\n\t\td[\"_total\"] = d[\"_total\"] + 1\n\t\tp = d.get(path)\n\t\tif p is None:",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\tsender",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\tsender = str(kwargs['sender'])\n\t\tpath = str(kwargs['path'])\n\t\td = items.get(sender)\n\t\tif d is None:\n\t\t\titems[sender] = {\"_total\": 1, path: 1}\n\t\t\treturn\n\t\td[\"_total\"] = d[\"_total\"] + 1\n\t\tp = d.get(path)\n\t\tif p is None:\n\t\t\td[path] = 1",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\tpath = str(kwargs['path'])\n\t\td = items.get(sender)\n\t\tif d is None:\n\t\t\titems[sender] = {\"_total\": 1, path: 1}\n\t\t\treturn\n\t\td[\"_total\"] = d[\"_total\"] + 1\n\t\tp = d.get(path)\n\t\tif p is None:\n\t\t\td[path] = 1\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\td",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\td = items.get(sender)\n\t\tif d is None:\n\t\t\titems[sender] = {\"_total\": 1, path: 1}\n\t\t\treturn\n\t\td[\"_total\"] = d[\"_total\"] + 1\n\t\tp = d.get(path)\n\t\tif p is None:\n\t\t\td[path] = 1\n\t\t\treturn\n\t\td[path] = p + 1",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\t\titems[sender]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\t\titems[sender] = {\"_total\": 1, path: 1}\n\t\t\treturn\n\t\td[\"_total\"] = d[\"_total\"] + 1\n\t\tp = d.get(path)\n\t\tif p is None:\n\t\t\td[path] = 1\n\t\t\treturn\n\t\td[path] = p + 1\ndef printall():\n\tt_elapsed = time() - t_started",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\td[\"_total\"]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\td[\"_total\"] = d[\"_total\"] + 1\n\t\tp = d.get(path)\n\t\tif p is None:\n\t\t\td[path] = 1\n\t\t\treturn\n\t\td[path] = p + 1\ndef printall():\n\tt_elapsed = time() - t_started\n\tprint(chr(27) + \"[2J\" + chr(27) + \"[;H\")\n\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\tp",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\tp = d.get(path)\n\t\tif p is None:\n\t\t\td[path] = 1\n\t\t\treturn\n\t\td[path] = p + 1\ndef printall():\n\tt_elapsed = time() - t_started\n\tprint(chr(27) + \"[2J\" + chr(27) + \"[;H\")\n\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"\n\tprint(row_format.format(\"Total\", total, 100, total / t_elapsed))",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\t\td[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\t\td[path] = 1\n\t\t\treturn\n\t\td[path] = p + 1\ndef printall():\n\tt_elapsed = time() - t_started\n\tprint(chr(27) + \"[2J\" + chr(27) + \"[;H\")\n\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"\n\tprint(row_format.format(\"Total\", total, 100, total / t_elapsed))\n\tfor service, values in items.items():\n\t\t# skip the services that didn't emit any signals",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\t\td[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\t\td[path] = p + 1\ndef printall():\n\tt_elapsed = time() - t_started\n\tprint(chr(27) + \"[2J\" + chr(27) + \"[;H\")\n\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"\n\tprint(row_format.format(\"Total\", total, 100, total / t_elapsed))\n\tfor service, values in items.items():\n\t\t# skip the services that didn't emit any signals\n\t\tif len(values) == 2 and \"_name\" in values:\n\t\t\tcontinue",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\tt_elapsed",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\tt_elapsed = time() - t_started\n\tprint(chr(27) + \"[2J\" + chr(27) + \"[;H\")\n\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"\n\tprint(row_format.format(\"Total\", total, 100, total / t_elapsed))\n\tfor service, values in items.items():\n\t\t# skip the services that didn't emit any signals\n\t\tif len(values) == 2 and \"_name\" in values:\n\t\t\tcontinue\n\t\tprint(row_format.format(values.get(\"_name\", service), values[\"_total\"], values[\"_total\"] * 100 / total, values[\"_total\"] / t_elapsed))\n\t# uncomment this to see all the paths as well.",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\trow_format",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\trow_format = \"{:<60} {:>4}  {:>4}%  {:>4.2f} / s\"\n\tprint(row_format.format(\"Total\", total, 100, total / t_elapsed))\n\tfor service, values in items.items():\n\t\t# skip the services that didn't emit any signals\n\t\tif len(values) == 2 and \"_name\" in values:\n\t\t\tcontinue\n\t\tprint(row_format.format(values.get(\"_name\", service), values[\"_total\"], values[\"_total\"] * 100 / total, values[\"_total\"] / t_elapsed))\n\t# uncomment this to see all the paths as well.\n\t# print(\"--------------\")\n\t# pprint(items)",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\td = DbusTracker()\n\tgobject.timeout_add(2000, printall)\n\tmainloop = gobject.MainLoop()\n\tmainloop.run()\nif __name__ == \"__main__\":\n\tmain()",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "\tmainloop",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "description": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "peekOfCode": "\tmainloop = gobject.MainLoop()\n\tmainloop.run()\nif __name__ == \"__main__\":\n\tmain()",
        "detail": "dbus-serialbattery.ext.velib_python.tools.dbus_signal_cntr",
        "documentation": {}
    },
    {
        "label": "DbusDummyService",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusdummyservice",
        "description": "dbus-serialbattery.ext.velib_python.dbusdummyservice",
        "peekOfCode": "class DbusDummyService(object):\n    def __init__(self, servicename, deviceinstance, paths, productname='Dummy product', connection='Dummy service', productid=0):\n        self._dbusservice = VeDbusService(servicename)\n        self._paths = paths\n        logging.debug(\"%s /DeviceInstance = %d\" % (servicename, deviceinstance))\n        # Create the management objects, as specified in the ccgx dbus-api document\n        self._dbusservice.add_path('/Mgmt/ProcessName', __file__)\n        self._dbusservice.add_path('/Mgmt/ProcessVersion', 'Unkown version, and running on Python ' + platform.python_version())\n        self._dbusservice.add_path('/Mgmt/Connection', connection)\n        # Create the mandatory objects",
        "detail": "dbus-serialbattery.ext.velib_python.dbusdummyservice",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusdummyservice",
        "description": "dbus-serialbattery.ext.velib_python.dbusdummyservice",
        "peekOfCode": "def main():\n    logging.basicConfig(level=logging.DEBUG)\n    from dbus.mainloop.glib import DBusGMainLoop\n    # Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n    DBusGMainLoop(set_as_default=True)\n    pvac_output = DbusDummyService(\n        servicename='com.victronenergy.dummyservice.ttyO1',\n        deviceinstance=0,\n        paths={\n            '/Ac/Energy/Forward': {'initial': 0, 'update': 1},",
        "detail": "dbus-serialbattery.ext.velib_python.dbusdummyservice",
        "documentation": {}
    },
    {
        "label": "SystemBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "class SystemBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SYSTEM)\nclass SessionBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)\nclass MonitoredValue(object):\n\tdef __init__(self, value, text, options):\n\t\tsuper(MonitoredValue, self).__init__()\n\t\tself.value = value",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "SessionBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "class SessionBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)\nclass MonitoredValue(object):\n\tdef __init__(self, value, text, options):\n\t\tsuper(MonitoredValue, self).__init__()\n\t\tself.value = value\n\t\tself.text = text\n\t\tself.options = options\n\t# For legacy code, allow treating this as a tuple/list",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "MonitoredValue",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "class MonitoredValue(object):\n\tdef __init__(self, value, text, options):\n\t\tsuper(MonitoredValue, self).__init__()\n\t\tself.value = value\n\t\tself.text = text\n\t\tself.options = options\n\t# For legacy code, allow treating this as a tuple/list\n\tdef __iter__(self):\n\t\treturn iter((self.value, self.text, self.options))\nclass Service(object):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "class Service(object):\n\tdef __init__(self, id, serviceName, deviceInstance):\n\t\tsuper(Service, self).__init__()\n\t\tself.id = id\n\t\tself.name = serviceName\n\t\tself.paths = {}\n\t\tself._seen = set()\n\t\tself.deviceInstance = deviceInstance\n\t# For legacy code, attributes can still be accessed as if keys from a\n\t# dictionary.",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "DbusMonitor",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "class DbusMonitor(object):\n\t## Constructor\n\tdef __init__(self, dbusTree, valueChangedCallback=None, deviceAddedCallback=None,\n\t\t\t\t\tdeviceRemovedCallback=None, namespace=\"com.victronenergy\", ignoreServices=[]):\n\t\t# valueChangedCallback is the callback that we call when something has changed.\n\t\t# def value_changed_on_dbus(dbusServiceName, dbusPath, options, changes, deviceInstance):\n\t\t# in which changes is a tuple with GetText() and GetValue()\n\t\tself.valueChangedCallback = valueChangedCallback\n\t\tself.deviceAddedCallback = deviceAddedCallback\n\t\tself.deviceRemovedCallback = deviceRemovedCallback",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "value_changed_on_dbus",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "def value_changed_on_dbus(dbusServiceName, dbusPath, dict, changes, deviceInstance):\n\tlogger.debug(\"0 ----------------\")\n\tlogger.debug(\"1 %s%s changed\" % (dbusServiceName, dbusPath))\n\tlogger.debug(\"2 vrm dict     : %s\" % dict)\n\tlogger.debug(\"3 changes-text: %s\" % changes['Text'])\n\tlogger.debug(\"4 changes-value: %s\" % changes['Value'])\n\tlogger.debug(\"5 deviceInstance: %s\" % deviceInstance)\n\tlogger.debug(\"6 - end\")\ndef nameownerchange(a, b):\n\t# used to find memory leaks in dbusmonitor and VeDbusItemImport",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "nameownerchange",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "def nameownerchange(a, b):\n\t# used to find memory leaks in dbusmonitor and VeDbusItemImport\n\timport gc\n\tgc.collect()\n\tobjects = gc.get_objects()\n\tprint (len([o for o in objects if type(o).__name__ == 'VeDbusItemImport']))\n\tprint (len([o for o in objects if type(o).__name__ == 'SignalMatch']))\n\tprint (len(objects))\ndef print_values(dbusmonitor):\n\ta = dbusmonitor.get_value('wrongservice', '/DbusInvalid', default_value=1000)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "print_values",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "def print_values(dbusmonitor):\n\ta = dbusmonitor.get_value('wrongservice', '/DbusInvalid', default_value=1000)\n\tb = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NotInTheMonitorList', default_value=1000)\n\tc = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/DbusInvalid', default_value=1000)\n\td = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NonExistingButMonitored', default_value=1000)\n\tprint (\"All should be 1000: Wrong Service: %s, NotInTheMonitorList: %s, DbusInvalid: %s, NonExistingButMonitored: %s\" % (a, b, c, d))\n\treturn True\n# We have a mainloop, but that is just for developing this code. Normally above class & code is used from\n# some other class, such as vrmLogger or the pubsub Implementation.\ndef main():",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "def main():\n\t# Init logging\n\tlogging.basicConfig(level=logging.DEBUG)\n\tlogger.info(__file__ + \" is starting up\")\n\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus\n\tDBusGMainLoop(set_as_default=True)\n\timport os\n\timport sys\n\tsys.path.insert(1, os.path.join(os.path.dirname(__file__), '../../'))\n\tdummy = {'code': None, 'whenToLog': 'configChange', 'accessLevel': None}",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "VE_INTERFACE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "VE_INTERFACE = \"com.victronenergy.BusItem\"\n# For lookups where None is a valid result\nnotfound = object()\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nclass SystemBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SYSTEM)\nclass SessionBus(dbus.bus.BusConnection):\n\tdef __new__(cls):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "notfound",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "notfound = object()\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nclass SystemBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SYSTEM)\nclass SessionBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)\nclass MonitoredValue(object):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nclass SystemBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SYSTEM)\nclass SessionBus(dbus.bus.BusConnection):\n\tdef __new__(cls):\n\t\treturn dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)\nclass MonitoredValue(object):\n\tdef __init__(self, value, text, options):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.value",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.value = value\n\t\tself.text = text\n\t\tself.options = options\n\t# For legacy code, allow treating this as a tuple/list\n\tdef __iter__(self):\n\t\treturn iter((self.value, self.text, self.options))\nclass Service(object):\n\tdef __init__(self, id, serviceName, deviceInstance):\n\t\tsuper(Service, self).__init__()\n\t\tself.id = id",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.text",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.text = text\n\t\tself.options = options\n\t# For legacy code, allow treating this as a tuple/list\n\tdef __iter__(self):\n\t\treturn iter((self.value, self.text, self.options))\nclass Service(object):\n\tdef __init__(self, id, serviceName, deviceInstance):\n\t\tsuper(Service, self).__init__()\n\t\tself.id = id\n\t\tself.name = serviceName",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.options",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.options = options\n\t# For legacy code, allow treating this as a tuple/list\n\tdef __iter__(self):\n\t\treturn iter((self.value, self.text, self.options))\nclass Service(object):\n\tdef __init__(self, id, serviceName, deviceInstance):\n\t\tsuper(Service, self).__init__()\n\t\tself.id = id\n\t\tself.name = serviceName\n\t\tself.paths = {}",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.id = id\n\t\tself.name = serviceName\n\t\tself.paths = {}\n\t\tself._seen = set()\n\t\tself.deviceInstance = deviceInstance\n\t# For legacy code, attributes can still be accessed as if keys from a\n\t# dictionary.\n\tdef __setitem__(self, key, value):\n\t\tself.__dict__[key] = value\n\tdef __getitem__(self, key):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.name = serviceName\n\t\tself.paths = {}\n\t\tself._seen = set()\n\t\tself.deviceInstance = deviceInstance\n\t# For legacy code, attributes can still be accessed as if keys from a\n\t# dictionary.\n\tdef __setitem__(self, key, value):\n\t\tself.__dict__[key] = value\n\tdef __getitem__(self, key):\n\t\treturn self.__dict__[key]",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.paths",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.paths = {}\n\t\tself._seen = set()\n\t\tself.deviceInstance = deviceInstance\n\t# For legacy code, attributes can still be accessed as if keys from a\n\t# dictionary.\n\tdef __setitem__(self, key, value):\n\t\tself.__dict__[key] = value\n\tdef __getitem__(self, key):\n\t\treturn self.__dict__[key]\n\tdef set_seen(self, path):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself._seen",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself._seen = set()\n\t\tself.deviceInstance = deviceInstance\n\t# For legacy code, attributes can still be accessed as if keys from a\n\t# dictionary.\n\tdef __setitem__(self, key, value):\n\t\tself.__dict__[key] = value\n\tdef __getitem__(self, key):\n\t\treturn self.__dict__[key]\n\tdef set_seen(self, path):\n\t\tself._seen.add(path)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.deviceInstance",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.deviceInstance = deviceInstance\n\t# For legacy code, attributes can still be accessed as if keys from a\n\t# dictionary.\n\tdef __setitem__(self, key, value):\n\t\tself.__dict__[key] = value\n\tdef __getitem__(self, key):\n\t\treturn self.__dict__[key]\n\tdef set_seen(self, path):\n\t\tself._seen.add(path)\n\tdef seen(self, path):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.__dict__[key]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.__dict__[key] = value\n\tdef __getitem__(self, key):\n\t\treturn self.__dict__[key]\n\tdef set_seen(self, path):\n\t\tself._seen.add(path)\n\tdef seen(self, path):\n\t\treturn path in self._seen\n\t@property\n\tdef service_class(self):\n\t\treturn '.'.join(self.name.split('.')[:3])",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.valueChangedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.valueChangedCallback = valueChangedCallback\n\t\tself.deviceAddedCallback = deviceAddedCallback\n\t\tself.deviceRemovedCallback = deviceRemovedCallback\n\t\tself.dbusTree = dbusTree\n\t\tself.ignoreServices = ignoreServices\n\t\t# Lists all tracked services. Stores name, id, device instance, value per path, and whenToLog info\n\t\t# indexed by service name (eg. com.victronenergy.settings).\n\t\tself.servicesByName = {}\n\t\t# Same values as self.servicesByName, but indexed by service id (eg. :1.30)\n\t\tself.servicesById = {}",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.deviceAddedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.deviceAddedCallback = deviceAddedCallback\n\t\tself.deviceRemovedCallback = deviceRemovedCallback\n\t\tself.dbusTree = dbusTree\n\t\tself.ignoreServices = ignoreServices\n\t\t# Lists all tracked services. Stores name, id, device instance, value per path, and whenToLog info\n\t\t# indexed by service name (eg. com.victronenergy.settings).\n\t\tself.servicesByName = {}\n\t\t# Same values as self.servicesByName, but indexed by service id (eg. :1.30)\n\t\tself.servicesById = {}\n\t\t# Keep track of services by class to speed up calls to get_service_list",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.deviceRemovedCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.deviceRemovedCallback = deviceRemovedCallback\n\t\tself.dbusTree = dbusTree\n\t\tself.ignoreServices = ignoreServices\n\t\t# Lists all tracked services. Stores name, id, device instance, value per path, and whenToLog info\n\t\t# indexed by service name (eg. com.victronenergy.settings).\n\t\tself.servicesByName = {}\n\t\t# Same values as self.servicesByName, but indexed by service id (eg. :1.30)\n\t\tself.servicesById = {}\n\t\t# Keep track of services by class to speed up calls to get_service_list\n\t\tself.servicesByClass = defaultdict(list)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.dbusTree",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.dbusTree = dbusTree\n\t\tself.ignoreServices = ignoreServices\n\t\t# Lists all tracked services. Stores name, id, device instance, value per path, and whenToLog info\n\t\t# indexed by service name (eg. com.victronenergy.settings).\n\t\tself.servicesByName = {}\n\t\t# Same values as self.servicesByName, but indexed by service id (eg. :1.30)\n\t\tself.servicesById = {}\n\t\t# Keep track of services by class to speed up calls to get_service_list\n\t\tself.servicesByClass = defaultdict(list)\n\t\t# Keep track of any additional watches placed on items",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.ignoreServices",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.ignoreServices = ignoreServices\n\t\t# Lists all tracked services. Stores name, id, device instance, value per path, and whenToLog info\n\t\t# indexed by service name (eg. com.victronenergy.settings).\n\t\tself.servicesByName = {}\n\t\t# Same values as self.servicesByName, but indexed by service id (eg. :1.30)\n\t\tself.servicesById = {}\n\t\t# Keep track of services by class to speed up calls to get_service_list\n\t\tself.servicesByClass = defaultdict(list)\n\t\t# Keep track of any additional watches placed on items\n\t\tself.serviceWatches = defaultdict(list)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesByName",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesByName = {}\n\t\t# Same values as self.servicesByName, but indexed by service id (eg. :1.30)\n\t\tself.servicesById = {}\n\t\t# Keep track of services by class to speed up calls to get_service_list\n\t\tself.servicesByClass = defaultdict(list)\n\t\t# Keep track of any additional watches placed on items\n\t\tself.serviceWatches = defaultdict(list)\n\t\t# For a PC, connect to the SessionBus\n\t\t# For a CCGX, connect to the SystemBus\n\t\tself.dbusConn = SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else SystemBus()",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesById",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesById = {}\n\t\t# Keep track of services by class to speed up calls to get_service_list\n\t\tself.servicesByClass = defaultdict(list)\n\t\t# Keep track of any additional watches placed on items\n\t\tself.serviceWatches = defaultdict(list)\n\t\t# For a PC, connect to the SessionBus\n\t\t# For a CCGX, connect to the SystemBus\n\t\tself.dbusConn = SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else SystemBus()\n\t\t# subscribe to NameOwnerChange for bus connect / disconnect events.\n\t\t# NOTE: this is on a different bus then the one above!",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesByClass",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesByClass = defaultdict(list)\n\t\t# Keep track of any additional watches placed on items\n\t\tself.serviceWatches = defaultdict(list)\n\t\t# For a PC, connect to the SessionBus\n\t\t# For a CCGX, connect to the SystemBus\n\t\tself.dbusConn = SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else SystemBus()\n\t\t# subscribe to NameOwnerChange for bus connect / disconnect events.\n\t\t# NOTE: this is on a different bus then the one above!\n\t\tstandardBus = (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ \\\n\t\t\telse dbus.SystemBus())",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.serviceWatches",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.serviceWatches = defaultdict(list)\n\t\t# For a PC, connect to the SessionBus\n\t\t# For a CCGX, connect to the SystemBus\n\t\tself.dbusConn = SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else SystemBus()\n\t\t# subscribe to NameOwnerChange for bus connect / disconnect events.\n\t\t# NOTE: this is on a different bus then the one above!\n\t\tstandardBus = (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ \\\n\t\t\telse dbus.SystemBus())\n\t\tadd_name_owner_changed_receiver(standardBus, self.dbus_name_owner_changed)\n\t\t# Subscribe to PropertiesChanged for all services",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.dbusConn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.dbusConn = SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else SystemBus()\n\t\t# subscribe to NameOwnerChange for bus connect / disconnect events.\n\t\t# NOTE: this is on a different bus then the one above!\n\t\tstandardBus = (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ \\\n\t\t\telse dbus.SystemBus())\n\t\tadd_name_owner_changed_receiver(standardBus, self.dbus_name_owner_changed)\n\t\t# Subscribe to PropertiesChanged for all services\n\t\tself.dbusConn.add_signal_receiver(self.handler_value_changes,\n\t\t\tdbus_interface='com.victronenergy.BusItem',\n\t\t\tsignal_name='PropertiesChanged', path_keyword='path',",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tstandardBus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tstandardBus = (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ \\\n\t\t\telse dbus.SystemBus())\n\t\tadd_name_owner_changed_receiver(standardBus, self.dbus_name_owner_changed)\n\t\t# Subscribe to PropertiesChanged for all services\n\t\tself.dbusConn.add_signal_receiver(self.handler_value_changes,\n\t\t\tdbus_interface='com.victronenergy.BusItem',\n\t\t\tsignal_name='PropertiesChanged', path_keyword='path',\n\t\t\tsender_keyword='senderId')\n\t\t# Subscribe to ItemsChanged for all services\n\t\tself.dbusConn.add_signal_receiver(self.handler_item_changes,",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tserviceNames",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tserviceNames = self.dbusConn.list_names()\n\t\tfor serviceName in serviceNames:\n\t\t\tself.scan_dbus_service(serviceName)\n\t\tlogger.info('===== Search on dbus for services that we will monitor finished =====')\n\t@staticmethod\n\tdef make_service(serviceId, serviceName, deviceInstance):\n\t\t\"\"\" Override this to use a different kind of service object. \"\"\"\n\t\treturn Service(serviceId, serviceName, deviceInstance)\n\tdef make_monitor(self, service, path, value, text, options):\n\t\t\"\"\" Override this to do more things with monitoring. \"\"\"",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tnewdeviceadded",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tnewdeviceadded = self.scan_dbus_service(name)\n\t\t\tif newdeviceadded and self.deviceAddedCallback is not None:\n\t\t\t\tself.deviceAddedCallback(name, self.get_device_instance(name))\n\t\telif name in self.servicesByName:\n\t\t\t# it disappeared, we need to remove it.\n\t\t\tlogger.info(\"%s disappeared from the dbus. Removing it from our lists\" % name)\n\t\t\tservice = self.servicesByName[name]\n\t\t\tdel self.servicesById[service.id]\n\t\t\tdel self.servicesByName[name]\n\t\t\tfor watch in self.serviceWatches[name]:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tservice = self.servicesByName[name]\n\t\t\tdel self.servicesById[service.id]\n\t\t\tdel self.servicesByName[name]\n\t\t\tfor watch in self.serviceWatches[name]:\n\t\t\t\twatch.remove()\n\t\t\tdel self.serviceWatches[name]\n\t\t\tself.servicesByClass[service.service_class].remove(service)\n\t\t\tif self.deviceRemovedCallback is not None:\n\t\t\t\tself.deviceRemovedCallback(name, service.deviceInstance)\n\tdef scan_dbus_service(self, serviceName):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tserviceName",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tserviceName = str(serviceName)\n\t\tif (len(self.ignoreServices) != 0 and any(serviceName.startswith(x) for x in self.ignoreServices)):\n\t\t\tlogger.debug(\"Ignoring service %s\" % serviceName)\n\t\t\treturn False\n\t\tpaths = self.dbusTree.get('.'.join(serviceName.split('.')[0:3]), None)\n\t\tif paths is None:\n\t\t\tlogger.debug(\"Ignoring service %s, not in the tree\" % serviceName)\n\t\t\treturn False\n\t\tlogger.info(\"Found: %s, scanning and storing items\" % serviceName)\n\t\tserviceId = self.dbusConn.get_name_owner(serviceName)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tpaths",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tpaths = self.dbusTree.get('.'.join(serviceName.split('.')[0:3]), None)\n\t\tif paths is None:\n\t\t\tlogger.debug(\"Ignoring service %s, not in the tree\" % serviceName)\n\t\t\treturn False\n\t\tlogger.info(\"Found: %s, scanning and storing items\" % serviceName)\n\t\tserviceId = self.dbusConn.get_name_owner(serviceName)\n\t\t# we should never be notified to add a D-Bus service that we already have. If this assertion\n\t\t# raises, check process_name_owner_changed, and D-Bus workings.\n\t\tassert serviceName not in self.servicesByName\n\t\tassert serviceId not in self.servicesById",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tserviceId",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tserviceId = self.dbusConn.get_name_owner(serviceName)\n\t\t# we should never be notified to add a D-Bus service that we already have. If this assertion\n\t\t# raises, check process_name_owner_changed, and D-Bus workings.\n\t\tassert serviceName not in self.servicesByName\n\t\tassert serviceId not in self.servicesById\n\t\t# Try to fetch everything with a GetItems, then fall back to older\n\t\t# methods if that fails\n\t\ttry:\n\t\t\tvalues = self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetItems', '', [])\n\t\texcept dbus.exceptions.DBusException:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tvalues",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tvalues = self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetItems', '', [])\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tlogger.info(\"GetItems failed, trying legacy methods\")\n\t\telse:\n\t\t\treturn self.scan_dbus_service_getitems_done(serviceName, serviceId, values)\n\t\tif serviceName == 'com.victronenergy.settings' or serviceName == 'com.victronenergy.platform':\n\t\t\tdi = 0\n\t\telif serviceName.startswith('com.victronenergy.vecan.'):\n\t\t\tdi = 0\n\t\telse:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tdi = 0\n\t\telif serviceName.startswith('com.victronenergy.vecan.'):\n\t\t\tdi = 0\n\t\telse:\n\t\t\ttry:\n\t\t\t\tdi = self.dbusConn.call_blocking(serviceName,\n\t\t\t\t\t'/DeviceInstance', VE_INTERFACE, 'GetValue', '', [])\n\t\t\texcept dbus.exceptions.DBusException:\n\t\t\t\tlogger.info(\"       %s was skipped because it has no device instance\" % serviceName)\n\t\t\t\treturn False # Skip it",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tdi = 0\n\t\telse:\n\t\t\ttry:\n\t\t\t\tdi = self.dbusConn.call_blocking(serviceName,\n\t\t\t\t\t'/DeviceInstance', VE_INTERFACE, 'GetValue', '', [])\n\t\t\texcept dbus.exceptions.DBusException:\n\t\t\t\tlogger.info(\"       %s was skipped because it has no device instance\" % serviceName)\n\t\t\t\treturn False # Skip it\n\t\t\telse:\n\t\t\t\tdi = int(di)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tdi = self.dbusConn.call_blocking(serviceName,\n\t\t\t\t\t'/DeviceInstance', VE_INTERFACE, 'GetValue', '', [])\n\t\t\texcept dbus.exceptions.DBusException:\n\t\t\t\tlogger.info(\"       %s was skipped because it has no device instance\" % serviceName)\n\t\t\t\treturn False # Skip it\n\t\t\telse:\n\t\t\t\tdi = int(di)\n\t\tlogger.info(\"       %s has device instance %s\" % (serviceName, di))\n\t\tservice = self.make_service(serviceId, serviceName, di)\n\t\t# Let's try to fetch everything in one go",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tdi = int(di)\n\t\tlogger.info(\"       %s has device instance %s\" % (serviceName, di))\n\t\tservice = self.make_service(serviceId, serviceName, di)\n\t\t# Let's try to fetch everything in one go\n\t\tvalues = {}\n\t\ttexts = {}\n\t\ttry:\n\t\t\tvalues.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetValue', '', []))\n\t\t\ttexts.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetText', '', []))\n\t\texcept:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tservice = self.make_service(serviceId, serviceName, di)\n\t\t# Let's try to fetch everything in one go\n\t\tvalues = {}\n\t\ttexts = {}\n\t\ttry:\n\t\t\tvalues.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetValue', '', []))\n\t\t\ttexts.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetText', '', []))\n\t\texcept:\n\t\t\tpass\n\t\tfor path, options in paths.items():",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tvalues",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tvalues = {}\n\t\ttexts = {}\n\t\ttry:\n\t\t\tvalues.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetValue', '', []))\n\t\t\ttexts.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetText', '', []))\n\t\texcept:\n\t\t\tpass\n\t\tfor path, options in paths.items():\n\t\t\t# path will be the D-Bus path: '/Ac/ActiveIn/L1/V'\n\t\t\t# options will be a dictionary: {'code': 'V', 'whenToLog': 'onIntervalAlways'}",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\ttexts",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\ttexts = {}\n\t\ttry:\n\t\t\tvalues.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetValue', '', []))\n\t\t\ttexts.update(self.dbusConn.call_blocking(serviceName, '/', VE_INTERFACE, 'GetText', '', []))\n\t\texcept:\n\t\t\tpass\n\t\tfor path, options in paths.items():\n\t\t\t# path will be the D-Bus path: '/Ac/ActiveIn/L1/V'\n\t\t\t# options will be a dictionary: {'code': 'V', 'whenToLog': 'onIntervalAlways'}\n\t\t\t# Try to obtain the value we want from our bulk fetch. If we",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tvalue = values.get(path[1:], notfound)\n\t\t\tif value != notfound:\n\t\t\t\tservice.set_seen(path)\n\t\t\ttext = texts.get(path[1:], notfound)\n\t\t\tif value is notfound or text is notfound:\n\t\t\t\ttry:\n\t\t\t\t\tvalue = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetValue', '', [])\n\t\t\t\t\tservice.set_seen(path)\n\t\t\t\t\ttext = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetText', '', [])\n\t\t\t\texcept dbus.exceptions.DBusException as e:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\ttext",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\ttext = texts.get(path[1:], notfound)\n\t\t\tif value is notfound or text is notfound:\n\t\t\t\ttry:\n\t\t\t\t\tvalue = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetValue', '', [])\n\t\t\t\t\tservice.set_seen(path)\n\t\t\t\t\ttext = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetText', '', [])\n\t\t\t\texcept dbus.exceptions.DBusException as e:\n\t\t\t\t\tif e.get_dbus_name() in (\n\t\t\t\t\t\t\t'org.freedesktop.DBus.Error.ServiceUnknown',\n\t\t\t\t\t\t\t'org.freedesktop.DBus.Error.Disconnected'):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\t\tvalue = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetValue', '', [])\n\t\t\t\t\tservice.set_seen(path)\n\t\t\t\t\ttext = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetText', '', [])\n\t\t\t\texcept dbus.exceptions.DBusException as e:\n\t\t\t\t\tif e.get_dbus_name() in (\n\t\t\t\t\t\t\t'org.freedesktop.DBus.Error.ServiceUnknown',\n\t\t\t\t\t\t\t'org.freedesktop.DBus.Error.Disconnected'):\n\t\t\t\t\t\traise # This exception will be handled below\n\t\t\t\t\t# TODO org.freedesktop.DBus.Error.UnknownMethod really\n\t\t\t\t\t# shouldn't happen but sometimes does.",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttext",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\t\ttext = self.dbusConn.call_blocking(serviceName, path, VE_INTERFACE, 'GetText', '', [])\n\t\t\t\texcept dbus.exceptions.DBusException as e:\n\t\t\t\t\tif e.get_dbus_name() in (\n\t\t\t\t\t\t\t'org.freedesktop.DBus.Error.ServiceUnknown',\n\t\t\t\t\t\t\t'org.freedesktop.DBus.Error.Disconnected'):\n\t\t\t\t\t\traise # This exception will be handled below\n\t\t\t\t\t# TODO org.freedesktop.DBus.Error.UnknownMethod really\n\t\t\t\t\t# shouldn't happen but sometimes does.\n\t\t\t\t\tlogger.debug(\"%s %s does not exist (yet)\" % (serviceName, path))\n\t\t\t\t\tvalue = None",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\t\tvalue = None\n\t\t\t\t\ttext = None\n\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tlogger.debug(\"Finished scanning and storing items for %s\" % serviceName)\n\t\t# Adjust self at the end of the scan, so we don't have an incomplete set of\n\t\t# data if an exception occurs during the scan.\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\ttext",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\t\ttext = None\n\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tlogger.debug(\"Finished scanning and storing items for %s\" % serviceName)\n\t\t# Adjust self at the end of the scan, so we don't have an incomplete set of\n\t\t# data if an exception occurs during the scan.\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef scan_dbus_service_getitems_done(self, serviceName, serviceId, values):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tservice.paths[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tlogger.debug(\"Finished scanning and storing items for %s\" % serviceName)\n\t\t# Adjust self at the end of the scan, so we don't have an incomplete set of\n\t\t# data if an exception occurs during the scan.\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef scan_dbus_service_getitems_done(self, serviceName, serviceId, values):\n\t\t# Keeping these exceptions for legacy reasons",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesByName[serviceName]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef scan_dbus_service_getitems_done(self, serviceName, serviceId, values):\n\t\t# Keeping these exceptions for legacy reasons\n\t\tif serviceName == 'com.victronenergy.settings' or serviceName == 'com.victronenergy.platform':\n\t\t\tdi = 0\n\t\telif serviceName.startswith('com.victronenergy.vecan.'):\n\t\t\tdi = 0",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesById[serviceId]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef scan_dbus_service_getitems_done(self, serviceName, serviceId, values):\n\t\t# Keeping these exceptions for legacy reasons\n\t\tif serviceName == 'com.victronenergy.settings' or serviceName == 'com.victronenergy.platform':\n\t\t\tdi = 0\n\t\telif serviceName.startswith('com.victronenergy.vecan.'):\n\t\t\tdi = 0\n\t\telse:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tdi = 0\n\t\telif serviceName.startswith('com.victronenergy.vecan.'):\n\t\t\tdi = 0\n\t\telse:\n\t\t\ttry:\n\t\t\t\tdi = values['/DeviceInstance']['Value']\n\t\t\texcept KeyError:\n\t\t\t\tlogger.info(\"       %s was skipped because it has no device instance\" % serviceName)\n\t\t\t\treturn False\n\t\t\telse:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tdi = 0\n\t\telse:\n\t\t\ttry:\n\t\t\t\tdi = values['/DeviceInstance']['Value']\n\t\t\texcept KeyError:\n\t\t\t\tlogger.info(\"       %s was skipped because it has no device instance\" % serviceName)\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tdi = int(di)\n\t\tlogger.info(\"       %s has device instance %s\" % (serviceName, di))",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tdi = values['/DeviceInstance']['Value']\n\t\t\texcept KeyError:\n\t\t\t\tlogger.info(\"       %s was skipped because it has no device instance\" % serviceName)\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tdi = int(di)\n\t\tlogger.info(\"       %s has device instance %s\" % (serviceName, di))\n\t\tservice = self.make_service(serviceId, serviceName, di)\n\t\tpaths = self.dbusTree.get('.'.join(serviceName.split('.')[0:3]), {})\n\t\tfor path, options in paths.items():",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdi",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tdi = int(di)\n\t\tlogger.info(\"       %s has device instance %s\" % (serviceName, di))\n\t\tservice = self.make_service(serviceId, serviceName, di)\n\t\tpaths = self.dbusTree.get('.'.join(serviceName.split('.')[0:3]), {})\n\t\tfor path, options in paths.items():\n\t\t\titem = values.get(path, notfound)\n\t\t\tif item is notfound:\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, None, None, options)\n\t\t\telse:\n\t\t\t\tservice.set_seen(path)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tservice = self.make_service(serviceId, serviceName, di)\n\t\tpaths = self.dbusTree.get('.'.join(serviceName.split('.')[0:3]), {})\n\t\tfor path, options in paths.items():\n\t\t\titem = values.get(path, notfound)\n\t\t\tif item is notfound:\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, None, None, options)\n\t\t\telse:\n\t\t\t\tservice.set_seen(path)\n\t\t\t\tvalue = item.get('Value', None)\n\t\t\t\ttext = item.get('Text', None)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tpaths",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tpaths = self.dbusTree.get('.'.join(serviceName.split('.')[0:3]), {})\n\t\tfor path, options in paths.items():\n\t\t\titem = values.get(path, notfound)\n\t\t\tif item is notfound:\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, None, None, options)\n\t\t\telse:\n\t\t\t\tservice.set_seen(path)\n\t\t\t\tvalue = item.get('Value', None)\n\t\t\t\ttext = item.get('Text', None)\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\titem",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\titem = values.get(path, notfound)\n\t\t\tif item is notfound:\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, None, None, options)\n\t\t\telse:\n\t\t\t\tservice.set_seen(path)\n\t\t\t\tvalue = item.get('Value', None)\n\t\t\t\ttext = item.get('Text', None)\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tservice.paths[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tservice.paths[path] = self.make_monitor(service, path, None, None, options)\n\t\t\telse:\n\t\t\t\tservice.set_seen(path)\n\t\t\t\tvalue = item.get('Value', None)\n\t\t\t\ttext = item.get('Text', None)\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tvalue = item.get('Value', None)\n\t\t\t\ttext = item.get('Text', None)\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef handler_item_changes(self, items, senderId):\n\t\tif not isinstance(items, dict):\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttext",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\ttext = item.get('Text', None)\n\t\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef handler_item_changes(self, items, senderId):\n\t\tif not isinstance(items, dict):\n\t\t\treturn\n\t\ttry:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tservice.paths[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tservice.paths[path] = self.make_monitor(service, path, unwrap_dbus_value(value), unwrap_dbus_value(text), options)\n\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef handler_item_changes(self, items, senderId):\n\t\tif not isinstance(items, dict):\n\t\t\treturn\n\t\ttry:\n\t\t\tservice = self.servicesById[senderId]",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesByName[serviceName]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesByName[serviceName] = service\n\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef handler_item_changes(self, items, senderId):\n\t\tif not isinstance(items, dict):\n\t\t\treturn\n\t\ttry:\n\t\t\tservice = self.servicesById[senderId]\n\t\texcept KeyError:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tself.servicesById[serviceId]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tself.servicesById[serviceId] = service\n\t\tself.servicesByClass[service.service_class].append(service)\n\t\treturn True\n\tdef handler_item_changes(self, items, senderId):\n\t\tif not isinstance(items, dict):\n\t\t\treturn\n\t\ttry:\n\t\t\tservice = self.servicesById[senderId]\n\t\texcept KeyError:\n\t\t\t# senderId isn't there, which means it hasn't been scanned yet.",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tservice = self.servicesById[senderId]\n\t\texcept KeyError:\n\t\t\t# senderId isn't there, which means it hasn't been scanned yet.\n\t\t\treturn\n\t\tfor path, changes in items.items():\n\t\t\ttry:\n\t\t\t\tv = unwrap_dbus_value(changes['Value'])\n\t\t\texcept (KeyError, TypeError):\n\t\t\t\tcontinue\n\t\t\ttry:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tv = unwrap_dbus_value(changes['Value'])\n\t\t\texcept (KeyError, TypeError):\n\t\t\t\tcontinue\n\t\t\ttry:\n\t\t\t\tt = changes['Text']\n\t\t\texcept KeyError:\n\t\t\t\tt = str(v)\n\t\t\tself._handler_value_changes(service, path, v, t)\n\tdef handler_value_changes(self, changes, path, senderId):\n\t\t# If this properyChange does not involve a value, our work is done.",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tt = changes['Text']\n\t\t\texcept KeyError:\n\t\t\t\tt = str(v)\n\t\t\tself._handler_value_changes(service, path, v, t)\n\tdef handler_value_changes(self, changes, path, senderId):\n\t\t# If this properyChange does not involve a value, our work is done.\n\t\tif 'Value' not in changes:\n\t\t\treturn\n\t\ttry:\n\t\t\tservice = self.servicesById[senderId]",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tt = str(v)\n\t\t\tself._handler_value_changes(service, path, v, t)\n\tdef handler_value_changes(self, changes, path, senderId):\n\t\t# If this properyChange does not involve a value, our work is done.\n\t\tif 'Value' not in changes:\n\t\t\treturn\n\t\ttry:\n\t\t\tservice = self.servicesById[senderId]\n\t\texcept KeyError:\n\t\t\t# senderId isn't there, which means it hasn't been scanned yet.",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tservice = self.servicesById[senderId]\n\t\texcept KeyError:\n\t\t\t# senderId isn't there, which means it hasn't been scanned yet.\n\t\t\treturn\n\t\tv = unwrap_dbus_value(changes['Value'])\n\t\t# Some services don't send Text with their PropertiesChanged events.\n\t\ttry:\n\t\t\tt = changes['Text']\n\t\texcept KeyError:\n\t\t\tt = str(v)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tv = unwrap_dbus_value(changes['Value'])\n\t\t# Some services don't send Text with their PropertiesChanged events.\n\t\ttry:\n\t\t\tt = changes['Text']\n\t\texcept KeyError:\n\t\t\tt = str(v)\n\t\tself._handler_value_changes(service, path, v, t)\n\tdef _handler_value_changes(self, service, path, value, text):\n\t\ttry:\n\t\t\ta = service.paths[path]",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tt = changes['Text']\n\t\texcept KeyError:\n\t\t\tt = str(v)\n\t\tself._handler_value_changes(service, path, v, t)\n\tdef _handler_value_changes(self, service, path, value, text):\n\t\ttry:\n\t\t\ta = service.paths[path]\n\t\texcept KeyError:\n\t\t\t# path isn't there, which means it hasn't been scanned yet.\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\tt = str(v)\n\t\tself._handler_value_changes(service, path, v, t)\n\tdef _handler_value_changes(self, service, path, value, text):\n\t\ttry:\n\t\t\ta = service.paths[path]\n\t\texcept KeyError:\n\t\t\t# path isn't there, which means it hasn't been scanned yet.\n\t\t\treturn\n\t\tservice.set_seen(path)\n\t\t# First update our store to the new value",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\ta = service.paths[path]\n\t\texcept KeyError:\n\t\t\t# path isn't there, which means it hasn't been scanned yet.\n\t\t\treturn\n\t\tservice.set_seen(path)\n\t\t# First update our store to the new value\n\t\tif a.value == value:\n\t\t\treturn\n\t\ta.value = value\n\t\ta.text = text",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\ta.value",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\ta.value = value\n\t\ta.text = text\n\t\t# And do the rest of the processing in on the mainloop\n\t\tif self.valueChangedCallback is not None:\n\t\t\tGLib.idle_add(exit_on_error, self._execute_value_changes, service.name, path, {\n\t\t\t\t'Value': value, 'Text': text}, a.options)\n\tdef _execute_value_changes(self, serviceName, objectPath, changes, options):\n\t\t# double check that the service still exists, as it might have\n\t\t# disappeared between scheduling-for and executing this function.\n\t\tif serviceName not in self.servicesByName:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\ta.text",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\ta.text = text\n\t\t# And do the rest of the processing in on the mainloop\n\t\tif self.valueChangedCallback is not None:\n\t\t\tGLib.idle_add(exit_on_error, self._execute_value_changes, service.name, path, {\n\t\t\t\t'Value': value, 'Text': text}, a.options)\n\tdef _execute_value_changes(self, serviceName, objectPath, changes, options):\n\t\t# double check that the service still exists, as it might have\n\t\t# disappeared between scheduling-for and executing this function.\n\t\tif serviceName not in self.servicesByName:\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tservice = self.servicesByName.get(serviceName, None)\n\t\tif service is None:\n\t\t\treturn default_value\n\t\tvalue = service.paths.get(objectPath, None)\n\t\tif value is None or value.value is None:\n\t\t\treturn default_value\n\t\treturn value.value\n\t# returns if a dbus exists now, by doing a blocking dbus call.\n\t# Typically seen will be sufficient and doesn't need access to the dbus.\n\tdef exists(self, serviceName, objectPath):",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tvalue = service.paths.get(objectPath, None)\n\t\tif value is None or value.value is None:\n\t\t\treturn default_value\n\t\treturn value.value\n\t# returns if a dbus exists now, by doing a blocking dbus call.\n\t# Typically seen will be sufficient and doesn't need access to the dbus.\n\tdef exists(self, serviceName, objectPath):\n\t\ttry:\n\t\t\tself.dbusConn.call_blocking(serviceName, objectPath, VE_INTERFACE, 'GetValue', '', [])\n\t\t\treturn True",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tservice = self.servicesByName.get(serviceName, None)\n\t\tif service is None:\n\t\t\treturn -1\n\t\tif objectPath not in service.paths:\n\t\t\treturn -1\n\t\t# We do not catch D-Bus exceptions here, because the previous implementation did not do that either.\n\t\treturn self.dbusConn.call_blocking(serviceName, objectPath,\n\t\t\t\t   dbus_interface=VE_INTERFACE,\n\t\t\t\t   method='SetValue', signature=None,\n\t\t\t\t   args=[wrap_dbus_value(value)])",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tservice",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tservice = self.servicesByName.get(serviceName, None)\n\t\tif service is not None:\n\t\t\tif objectPath in service.paths:\n\t\t\t\tself.dbusConn.call_async(serviceName, objectPath,\n\t\t\t\t\tdbus_interface=VE_INTERFACE,\n\t\t\t\t\tmethod='SetValue', signature=None,\n\t\t\t\t\targs=[wrap_dbus_value(value)],\n\t\t\t\t\treply_handler=reply_handler, error_handler=error_handler)\n\t\t\t\treturn\n\t\tif error_handler is not None:",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\tcb",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\tcb = partial(callback, *args, **kwargs)\n\t\tdef root_tracker(items):\n\t\t\t# Check if objectPath in dict\n\t\t\ttry:\n\t\t\t\tv = items[objectPath]\n\t\t\t\t_v = unwrap_dbus_value(v['Value'])\n\t\t\texcept (KeyError, TypeError):\n\t\t\t\treturn # not in this dict\n\t\t\ttry:\n\t\t\t\tt = v['Text']",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tv = items[objectPath]\n\t\t\t\t_v = unwrap_dbus_value(v['Value'])\n\t\t\texcept (KeyError, TypeError):\n\t\t\t\treturn # not in this dict\n\t\t\ttry:\n\t\t\t\tt = v['Text']\n\t\t\texcept KeyError:\n\t\t\t\tcb({'Value': _v })\n\t\t\telse:\n\t\t\t\tcb({'Value': _v, 'Text': t})",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t_v",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\t_v = unwrap_dbus_value(v['Value'])\n\t\t\texcept (KeyError, TypeError):\n\t\t\t\treturn # not in this dict\n\t\t\ttry:\n\t\t\t\tt = v['Text']\n\t\t\texcept KeyError:\n\t\t\t\tcb({'Value': _v })\n\t\t\telse:\n\t\t\t\tcb({'Value': _v, 'Text': t})\n\t\t# Track changes on the path, and also on root",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\t\t\t\tt = v['Text']\n\t\t\texcept KeyError:\n\t\t\t\tcb({'Value': _v })\n\t\t\telse:\n\t\t\t\tcb({'Value': _v, 'Text': t})\n\t\t# Track changes on the path, and also on root\n\t\tself.serviceWatches[serviceName].extend((\n\t\t\tself.dbusConn.add_signal_receiver(cb,\n\t\t\t\tdbus_interface='com.victronenergy.BusItem',\n\t\t\t\tsignal_name='PropertiesChanged',",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\tobjects",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\tobjects = gc.get_objects()\n\tprint (len([o for o in objects if type(o).__name__ == 'VeDbusItemImport']))\n\tprint (len([o for o in objects if type(o).__name__ == 'SignalMatch']))\n\tprint (len(objects))\ndef print_values(dbusmonitor):\n\ta = dbusmonitor.get_value('wrongservice', '/DbusInvalid', default_value=1000)\n\tb = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NotInTheMonitorList', default_value=1000)\n\tc = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/DbusInvalid', default_value=1000)\n\td = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NonExistingButMonitored', default_value=1000)\n\tprint (\"All should be 1000: Wrong Service: %s, NotInTheMonitorList: %s, DbusInvalid: %s, NonExistingButMonitored: %s\" % (a, b, c, d))",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\ta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\ta = dbusmonitor.get_value('wrongservice', '/DbusInvalid', default_value=1000)\n\tb = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NotInTheMonitorList', default_value=1000)\n\tc = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/DbusInvalid', default_value=1000)\n\td = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NonExistingButMonitored', default_value=1000)\n\tprint (\"All should be 1000: Wrong Service: %s, NotInTheMonitorList: %s, DbusInvalid: %s, NonExistingButMonitored: %s\" % (a, b, c, d))\n\treturn True\n# We have a mainloop, but that is just for developing this code. Normally above class & code is used from\n# some other class, such as vrmLogger or the pubsub Implementation.\ndef main():\n\t# Init logging",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\tb",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\tb = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NotInTheMonitorList', default_value=1000)\n\tc = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/DbusInvalid', default_value=1000)\n\td = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NonExistingButMonitored', default_value=1000)\n\tprint (\"All should be 1000: Wrong Service: %s, NotInTheMonitorList: %s, DbusInvalid: %s, NonExistingButMonitored: %s\" % (a, b, c, d))\n\treturn True\n# We have a mainloop, but that is just for developing this code. Normally above class & code is used from\n# some other class, such as vrmLogger or the pubsub Implementation.\ndef main():\n\t# Init logging\n\tlogging.basicConfig(level=logging.DEBUG)",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\tc",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\tc = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/DbusInvalid', default_value=1000)\n\td = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NonExistingButMonitored', default_value=1000)\n\tprint (\"All should be 1000: Wrong Service: %s, NotInTheMonitorList: %s, DbusInvalid: %s, NonExistingButMonitored: %s\" % (a, b, c, d))\n\treturn True\n# We have a mainloop, but that is just for developing this code. Normally above class & code is used from\n# some other class, such as vrmLogger or the pubsub Implementation.\ndef main():\n\t# Init logging\n\tlogging.basicConfig(level=logging.DEBUG)\n\tlogger.info(__file__ + \" is starting up\")",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\td = dbusmonitor.get_value('com.victronenergy.dummyservice.ttyO1', '/NonExistingButMonitored', default_value=1000)\n\tprint (\"All should be 1000: Wrong Service: %s, NotInTheMonitorList: %s, DbusInvalid: %s, NonExistingButMonitored: %s\" % (a, b, c, d))\n\treturn True\n# We have a mainloop, but that is just for developing this code. Normally above class & code is used from\n# some other class, such as vrmLogger or the pubsub Implementation.\ndef main():\n\t# Init logging\n\tlogging.basicConfig(level=logging.DEBUG)\n\tlogger.info(__file__ + \" is starting up\")\n\t# Have a mainloop, so we can send/receive asynchronous calls to and from dbus",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\tdummy",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\tdummy = {'code': None, 'whenToLog': 'configChange', 'accessLevel': None}\n\tmonitorlist = {'com.victronenergy.dummyservice': {\n\t\t\t\t'/Connected': dummy,\n\t\t\t\t'/ProductName': dummy,\n\t\t\t\t'/Mgmt/Connection': dummy,\n\t\t\t\t'/Dc/0/Voltage': dummy,\n\t\t\t\t'/Dc/0/Current': dummy,\n\t\t\t\t'/Dc/0/Temperature': dummy,\n\t\t\t\t'/Load/I': dummy,\n\t\t\t\t'/FirmwareVersion': dummy,",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\tmonitorlist",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\tmonitorlist = {'com.victronenergy.dummyservice': {\n\t\t\t\t'/Connected': dummy,\n\t\t\t\t'/ProductName': dummy,\n\t\t\t\t'/Mgmt/Connection': dummy,\n\t\t\t\t'/Dc/0/Voltage': dummy,\n\t\t\t\t'/Dc/0/Current': dummy,\n\t\t\t\t'/Dc/0/Temperature': dummy,\n\t\t\t\t'/Load/I': dummy,\n\t\t\t\t'/FirmwareVersion': dummy,\n\t\t\t\t'/DbusInvalid': dummy,",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\td = DbusMonitor(monitorlist, value_changed_on_dbus,\n\t\tdeviceAddedCallback=nameownerchange, deviceRemovedCallback=nameownerchange)\n\tGLib.timeout_add(1000, print_values, d)\n\t# Start and run the mainloop\n\tlogger.info(\"Starting mainloop, responding on only events\")\n\tmainloop = GLib.MainLoop()\n\tmainloop.run()\nif __name__ == \"__main__\":\n\tmain()",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "\tmainloop",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "description": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "peekOfCode": "\tmainloop = GLib.MainLoop()\n\tmainloop.run()\nif __name__ == \"__main__\":\n\tmain()",
        "detail": "dbus-serialbattery.ext.velib_python.dbusmonitor",
        "documentation": {}
    },
    {
        "label": "LevelFilter",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "class LevelFilter(logging.Filter):\n\tdef __init__(self, passlevels, reject):\n\t\tself.passlevels = passlevels\n\t\tself.reject = reject\n\tdef filter(self, record):\n\t\tif self.reject:\n\t\t\treturn (record.levelno not in self.passlevels)\n\t\telse:\n\t\t\treturn (record.levelno in self.passlevels)\n# Leave the name set to None to get the root logger. For some reason specifying 'root' has a",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "def setup_logging(debug=False, name=None):\n\tformatter = logging.Formatter(fmt='%(levelname)s:%(module)s:%(message)s')\n\t# Make info and debug stream to stdout and the rest to stderr\n\th1 = logging.StreamHandler(sys.stdout)\n\th1.addFilter(LevelFilter([logging.INFO, logging.DEBUG], False))\n\th1.setFormatter(formatter)\n\th2 = logging.StreamHandler(sys.stderr)\n\th2.addFilter(LevelFilter([logging.INFO, logging.DEBUG], True))\n\th2.setFormatter(formatter)\n\tlogger = logging.getLogger(name)",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\t\tself.passlevels",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\t\tself.passlevels = passlevels\n\t\tself.reject = reject\n\tdef filter(self, record):\n\t\tif self.reject:\n\t\t\treturn (record.levelno not in self.passlevels)\n\t\telse:\n\t\t\treturn (record.levelno in self.passlevels)\n# Leave the name set to None to get the root logger. For some reason specifying 'root' has a\n# different effect: there will be two root loggers, both with their own handlers...\ndef setup_logging(debug=False, name=None):",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\t\tself.reject",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\t\tself.reject = reject\n\tdef filter(self, record):\n\t\tif self.reject:\n\t\t\treturn (record.levelno not in self.passlevels)\n\t\telse:\n\t\t\treturn (record.levelno in self.passlevels)\n# Leave the name set to None to get the root logger. For some reason specifying 'root' has a\n# different effect: there will be two root loggers, both with their own handlers...\ndef setup_logging(debug=False, name=None):\n\tformatter = logging.Formatter(fmt='%(levelname)s:%(module)s:%(message)s')",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\tformatter",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\tformatter = logging.Formatter(fmt='%(levelname)s:%(module)s:%(message)s')\n\t# Make info and debug stream to stdout and the rest to stderr\n\th1 = logging.StreamHandler(sys.stdout)\n\th1.addFilter(LevelFilter([logging.INFO, logging.DEBUG], False))\n\th1.setFormatter(formatter)\n\th2 = logging.StreamHandler(sys.stderr)\n\th2.addFilter(LevelFilter([logging.INFO, logging.DEBUG], True))\n\th2.setFormatter(formatter)\n\tlogger = logging.getLogger(name)\n\tlogger.addHandler(h1)",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\th1",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\th1 = logging.StreamHandler(sys.stdout)\n\th1.addFilter(LevelFilter([logging.INFO, logging.DEBUG], False))\n\th1.setFormatter(formatter)\n\th2 = logging.StreamHandler(sys.stderr)\n\th2.addFilter(LevelFilter([logging.INFO, logging.DEBUG], True))\n\th2.setFormatter(formatter)\n\tlogger = logging.getLogger(name)\n\tlogger.addHandler(h1)\n\tlogger.addHandler(h2)\n\t# Set the loglevel and show it",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\th2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\th2 = logging.StreamHandler(sys.stderr)\n\th2.addFilter(LevelFilter([logging.INFO, logging.DEBUG], True))\n\th2.setFormatter(formatter)\n\tlogger = logging.getLogger(name)\n\tlogger.addHandler(h1)\n\tlogger.addHandler(h2)\n\t# Set the loglevel and show it\n\tlogger.setLevel(level=(logging.DEBUG if debug else logging.INFO))\n\tlogLevel = {0: 'NOTSET', 10: 'DEBUG', 20: 'INFO', 30: 'WARNING', 40: 'ERROR'}\n\tlogger.info('Loglevel set to ' + logLevel[logger.getEffectiveLevel()])",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\tlogger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\tlogger = logging.getLogger(name)\n\tlogger.addHandler(h1)\n\tlogger.addHandler(h2)\n\t# Set the loglevel and show it\n\tlogger.setLevel(level=(logging.DEBUG if debug else logging.INFO))\n\tlogLevel = {0: 'NOTSET', 10: 'DEBUG', 20: 'INFO', 30: 'WARNING', 40: 'ERROR'}\n\tlogger.info('Loglevel set to ' + logLevel[logger.getEffectiveLevel()])\n\treturn logger",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "\tlogLevel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.logger",
        "description": "dbus-serialbattery.ext.velib_python.logger",
        "peekOfCode": "\tlogLevel = {0: 'NOTSET', 10: 'DEBUG', 20: 'INFO', 30: 'WARNING', 40: 'ERROR'}\n\tlogger.info('Loglevel set to ' + logLevel[logger.getEffectiveLevel()])\n\treturn logger",
        "detail": "dbus-serialbattery.ext.velib_python.logger",
        "documentation": {}
    },
    {
        "label": "RepeatingTimer",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "class RepeatingTimer(threading.Thread):\n\tdef __init__(self, callback, interval):\n\t\tthreading.Thread.__init__(self)\n\t\tself.event = threading.Event()\n\t\tself.callback = callback\n\t\tself.interval = interval\n\tdef run(self):\n\t\twhile not self.event.is_set():\n\t\t\tif not self.callback():\n\t\t\t\tself.event.set()",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "MosquittoBridgeRegistrator",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "class MosquittoBridgeRegistrator(object):\n\t\"\"\"\n\tThe MosquittoBridgeRegistrator manages a bridge connection between the local\n\tMQTT server, and the global VRM broker. It can be called\n\tconcurrently by different processes; efforts will be synchronized using an\n\tadvisory lock file.\n\tIt now also supports registering the API key and getting it and the password without\n\trestarting the MQTT server. This allows using the API key, but not use the local broker\n\tand instead connect directly to the VRM broker url.\n\t\"\"\"",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "get_setting",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "def get_setting(path):\n\t\"\"\"Throwing exceptions on fail is desired.\"\"\"\n\tbus = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\tmsg = dbus.lowlevel.MethodCallMessage(\n\t\t\t'com.victronenergy.settings', path, 'com.victronenergy.BusItem', 'GetValue')\n\treply = bus.send_message_with_reply_and_block(msg)\n\tanswer = reply.get_args_list()[0].real\n\treturn answer\nclass RepeatingTimer(threading.Thread):\n\tdef __init__(self, callback, interval):",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "def get_random_string(size=32):\n\t\"\"\"Creates a random (hex) string which contains 'size' characters.\"\"\"\n\treturn ''.join(\"{0:02x}\".format(b) for b in open('/dev/urandom', 'rb').read(int(size/2)))\ndef main():\n\tfrom ve_utils import get_vrm_portal_id\n\tvrmid = get_vrm_portal_id()\n\tregistrator = MosquittoBridgeRegistrator(vrmid)\n\tregistrator.register()\nif __name__ == \"__main__\":\n    main()",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "def main():\n\tfrom ve_utils import get_vrm_portal_id\n\tvrmid = get_vrm_portal_id()\n\tregistrator = MosquittoBridgeRegistrator(vrmid)\n\tregistrator.register()\nif __name__ == \"__main__\":\n    main()\n# vim: noexpandtab:shiftwidth=4:tabstop=4:softtabstop=0",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "VrmNumberOfBrokers",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "VrmNumberOfBrokers = 128\nVrmApiServer = 'https://ccgxlogging.victronenergy.com'\nCaBundlePath = \"/etc/ssl/certs/ccgx-ca.pem\"\nRpcBroker = 'mqtt-rpc.victronenergy.com'\nSettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/flashmq.d'\nBridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')\nMosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "VrmApiServer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "VrmApiServer = 'https://ccgxlogging.victronenergy.com'\nCaBundlePath = \"/etc/ssl/certs/ccgx-ca.pem\"\nRpcBroker = 'mqtt-rpc.victronenergy.com'\nSettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/flashmq.d'\nBridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')\nMosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "CaBundlePath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "CaBundlePath = \"/etc/ssl/certs/ccgx-ca.pem\"\nRpcBroker = 'mqtt-rpc.victronenergy.com'\nSettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/flashmq.d'\nBridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')\nMosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "RpcBroker",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "RpcBroker = 'mqtt-rpc.victronenergy.com'\nSettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/flashmq.d'\nBridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')\nMosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000\n  address {3}",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "SettingsPath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "SettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/flashmq.d'\nBridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')\nMosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000\n  address {3}\n  port 443",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "BridgeConfigPath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "BridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')\nMosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000\n  address {3}\n  port 443\n  tls on",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "MosquittoConfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "MosquittoConfig = '/data/conf/mosquitto.d/vrm_bridge.conf'\nMqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000\n  address {3}\n  port 443\n  tls on\n  bridge_protocol_bit true",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "MqttPasswordFile",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "MqttPasswordFile = \"/data/conf/mqtt_password.txt\"\nBridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000\n  address {3}\n  port 443\n  tls on\n  bridge_protocol_bit true\n  publish   P/{0}/out/#",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "BridgeSettingsRPC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "BridgeSettingsRPC = '''\nbridge {{\n  protocol_version mqtt5\n  max_outgoing_topic_aliases 5000\n  address {3}\n  port 443\n  tls on\n  bridge_protocol_bit true\n  publish   P/{0}/out/#\n  subscribe P/{0}/in/#",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "BridgeSettingsDbus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "BridgeSettingsDbus = '''\nbridge {{\n  protocol_version mqtt5\n  address {2}\n  port 443\n  tls on\n  bridge_protocol_bit true\n  publish N/{0}/#\n  subscribe R/{0}/#\n  subscribe W/{0}/#",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "LockFilePath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "LockFilePath = \"/run/mosquittobridgeregistrator.lock\"\ndef get_setting(path):\n\t\"\"\"Throwing exceptions on fail is desired.\"\"\"\n\tbus = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\tmsg = dbus.lowlevel.MethodCallMessage(\n\t\t\t'com.victronenergy.settings', path, 'com.victronenergy.BusItem', 'GetValue')\n\treply = bus.send_message_with_reply_and_block(msg)\n\tanswer = reply.get_args_list()[0].real\n\treturn answer\nclass RepeatingTimer(threading.Thread):",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\tbus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\tbus = dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus()\n\tmsg = dbus.lowlevel.MethodCallMessage(\n\t\t\t'com.victronenergy.settings', path, 'com.victronenergy.BusItem', 'GetValue')\n\treply = bus.send_message_with_reply_and_block(msg)\n\tanswer = reply.get_args_list()[0].real\n\treturn answer\nclass RepeatingTimer(threading.Thread):\n\tdef __init__(self, callback, interval):\n\t\tthreading.Thread.__init__(self)\n\t\tself.event = threading.Event()",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\tmsg",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\tmsg = dbus.lowlevel.MethodCallMessage(\n\t\t\t'com.victronenergy.settings', path, 'com.victronenergy.BusItem', 'GetValue')\n\treply = bus.send_message_with_reply_and_block(msg)\n\tanswer = reply.get_args_list()[0].real\n\treturn answer\nclass RepeatingTimer(threading.Thread):\n\tdef __init__(self, callback, interval):\n\t\tthreading.Thread.__init__(self)\n\t\tself.event = threading.Event()\n\t\tself.callback = callback",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\treply",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\treply = bus.send_message_with_reply_and_block(msg)\n\tanswer = reply.get_args_list()[0].real\n\treturn answer\nclass RepeatingTimer(threading.Thread):\n\tdef __init__(self, callback, interval):\n\t\tthreading.Thread.__init__(self)\n\t\tself.event = threading.Event()\n\t\tself.callback = callback\n\t\tself.interval = interval\n\tdef run(self):",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\tanswer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\tanswer = reply.get_args_list()[0].real\n\treturn answer\nclass RepeatingTimer(threading.Thread):\n\tdef __init__(self, callback, interval):\n\t\tthreading.Thread.__init__(self)\n\t\tself.event = threading.Event()\n\t\tself.callback = callback\n\t\tself.interval = interval\n\tdef run(self):\n\t\twhile not self.event.is_set():",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself.event",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself.event = threading.Event()\n\t\tself.callback = callback\n\t\tself.interval = interval\n\tdef run(self):\n\t\twhile not self.event.is_set():\n\t\t\tif not self.callback():\n\t\t\t\tself.event.set()\n\t\t\t# either call your function here,\n\t\t\t# or put the body of the function here\n\t\t\tself.event.wait(self.interval)",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself.callback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself.callback = callback\n\t\tself.interval = interval\n\tdef run(self):\n\t\twhile not self.event.is_set():\n\t\t\tif not self.callback():\n\t\t\t\tself.event.set()\n\t\t\t# either call your function here,\n\t\t\t# or put the body of the function here\n\t\t\tself.event.wait(self.interval)\n\tdef stop(self):",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself.interval",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself.interval = interval\n\tdef run(self):\n\t\twhile not self.event.is_set():\n\t\t\tif not self.callback():\n\t\t\t\tself.event.set()\n\t\t\t# either call your function here,\n\t\t\t# or put the body of the function here\n\t\t\tself.event.wait(self.interval)\n\tdef stop(self):\n\t\tself.event.set()",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself._init_broker_timer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself._init_broker_timer = None\n\t\tself._aborted = threading.Event()\n\t\tself._system_id = system_id\n\t\tself._global_broker_username = \"ccgxapikey_\" + self._system_id\n\t\tself._global_broker_password = None\n\t\tself._requests_log_level = logging.getLogger(\"requests\").getEffectiveLevel()\n\tdef _get_vrm_broker_url(self):\n\t\t\"\"\"To allow scaling, the VRM broker URL is generated based on the system identifier\n\t\tThe function returns a numbered broker URL between 0 and VrmNumberOfBrokers, which makes sure\n\t\tthat broker connections are distributed equally between all VRM brokers",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself._aborted",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself._aborted = threading.Event()\n\t\tself._system_id = system_id\n\t\tself._global_broker_username = \"ccgxapikey_\" + self._system_id\n\t\tself._global_broker_password = None\n\t\tself._requests_log_level = logging.getLogger(\"requests\").getEffectiveLevel()\n\tdef _get_vrm_broker_url(self):\n\t\t\"\"\"To allow scaling, the VRM broker URL is generated based on the system identifier\n\t\tThe function returns a numbered broker URL between 0 and VrmNumberOfBrokers, which makes sure\n\t\tthat broker connections are distributed equally between all VRM brokers\n\t\t\"\"\"",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself._system_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself._system_id = system_id\n\t\tself._global_broker_username = \"ccgxapikey_\" + self._system_id\n\t\tself._global_broker_password = None\n\t\tself._requests_log_level = logging.getLogger(\"requests\").getEffectiveLevel()\n\tdef _get_vrm_broker_url(self):\n\t\t\"\"\"To allow scaling, the VRM broker URL is generated based on the system identifier\n\t\tThe function returns a numbered broker URL between 0 and VrmNumberOfBrokers, which makes sure\n\t\tthat broker connections are distributed equally between all VRM brokers\n\t\t\"\"\"\n\t\tsum = 0",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself._global_broker_username",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself._global_broker_username = \"ccgxapikey_\" + self._system_id\n\t\tself._global_broker_password = None\n\t\tself._requests_log_level = logging.getLogger(\"requests\").getEffectiveLevel()\n\tdef _get_vrm_broker_url(self):\n\t\t\"\"\"To allow scaling, the VRM broker URL is generated based on the system identifier\n\t\tThe function returns a numbered broker URL between 0 and VrmNumberOfBrokers, which makes sure\n\t\tthat broker connections are distributed equally between all VRM brokers\n\t\t\"\"\"\n\t\tsum = 0\n\t\tfor character in self._system_id.lower().strip():",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself._global_broker_password",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself._global_broker_password = None\n\t\tself._requests_log_level = logging.getLogger(\"requests\").getEffectiveLevel()\n\tdef _get_vrm_broker_url(self):\n\t\t\"\"\"To allow scaling, the VRM broker URL is generated based on the system identifier\n\t\tThe function returns a numbered broker URL between 0 and VrmNumberOfBrokers, which makes sure\n\t\tthat broker connections are distributed equally between all VRM brokers\n\t\t\"\"\"\n\t\tsum = 0\n\t\tfor character in self._system_id.lower().strip():\n\t\t\tsum += ord(character)",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tself._requests_log_level",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tself._requests_log_level = logging.getLogger(\"requests\").getEffectiveLevel()\n\tdef _get_vrm_broker_url(self):\n\t\t\"\"\"To allow scaling, the VRM broker URL is generated based on the system identifier\n\t\tThe function returns a numbered broker URL between 0 and VrmNumberOfBrokers, which makes sure\n\t\tthat broker connections are distributed equally between all VRM brokers\n\t\t\"\"\"\n\t\tsum = 0\n\t\tfor character in self._system_id.lower().strip():\n\t\t\tsum += ord(character)\n\t\tbroker_index = sum % VrmNumberOfBrokers",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tsum",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tsum = 0\n\t\tfor character in self._system_id.lower().strip():\n\t\t\tsum += ord(character)\n\t\tbroker_index = sum % VrmNumberOfBrokers\n\t\treturn \"mqtt{}.victronenergy.com\".format(broker_index)\n\tdef load_or_generate_mqtt_password(self):\n\t\t\"\"\"In case posting the password to storemqttpassword.php was processed\n\t\tby the server, but we never saw the response, we need to keep it around\n\t\tfor the next time (don't post a random new one).\n\t\tThis way of storing the password was incepted later, and makes it",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tbroker_index",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tbroker_index = sum % VrmNumberOfBrokers\n\t\treturn \"mqtt{}.victronenergy.com\".format(broker_index)\n\tdef load_or_generate_mqtt_password(self):\n\t\t\"\"\"In case posting the password to storemqttpassword.php was processed\n\t\tby the server, but we never saw the response, we need to keep it around\n\t\tfor the next time (don't post a random new one).\n\t\tThis way of storing the password was incepted later, and makes it\n\t\tbackwards compatible.\n\t\tThe MQTT password is now stored in the EEPROM on some devices and it is written\n\t\tto the mqtt_password file during boot. Note that not all devices have",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tpassword",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tpassword = None\n\t\tif os.path.exists(MqttPasswordFile):\n\t\t\twith open(MqttPasswordFile, \"r\") as f:\n\t\t\t\tlogging.info(\"Using {}\".format(MqttPasswordFile))\n\t\t\t\tpassword = f.read().strip()\n\t\t\t\treturn password\n\t\t# before FlashMQ, mosquitto was used. Check if it has a password.\n\t\telif os.path.exists(MosquittoConfig):\n\t\t\ttry:\n\t\t\t\twith open(MosquittoConfig, 'rt') as in_file:",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpassword",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\tpassword = f.read().strip()\n\t\t\t\treturn password\n\t\t# before FlashMQ, mosquitto was used. Check if it has a password.\n\t\telif os.path.exists(MosquittoConfig):\n\t\t\ttry:\n\t\t\t\twith open(MosquittoConfig, 'rt') as in_file:\n\t\t\t\t\tconfig = in_file.read()\n\t\t\t\t\tfor l in config.split('\\n'):\n\t\t\t\t\t\tif l.startswith(\"remote_password\"):\n\t\t\t\t\t\t\tpassword = l.split(' ')[1]",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tconfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\tconfig = in_file.read()\n\t\t\t\t\tfor l in config.split('\\n'):\n\t\t\t\t\t\tif l.startswith(\"remote_password\"):\n\t\t\t\t\t\t\tpassword = l.split(' ')[1]\n\t\t\t\t\t\t\tprint(\"Using mosquitto password\")\n\t\t\t\t\t\t\tbreak\n\t\t\texcept:\n\t\t\t\tpass\n\t\tif password == None:\n\t\t\tpassword = get_random_string(32)",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tpassword",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\t\tpassword = l.split(' ')[1]\n\t\t\t\t\t\t\tprint(\"Using mosquitto password\")\n\t\t\t\t\t\t\tbreak\n\t\t\texcept:\n\t\t\t\tpass\n\t\tif password == None:\n\t\t\tpassword = get_random_string(32)\n\t\twith open(MqttPasswordFile + \".tmp\", \"w\") as f:\n\t\t\tlogging.info(\"Writing new {}\".format(MqttPasswordFile))\n\t\t\t# make sure the password is on the disk",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\tpassword",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\tpassword = get_random_string(32)\n\t\twith open(MqttPasswordFile + \".tmp\", \"w\") as f:\n\t\t\tlogging.info(\"Writing new {}\".format(MqttPasswordFile))\n\t\t\t# make sure the password is on the disk\n\t\t\tf.write(password)\n\t\t\tf.flush()\n\t\t\tos.fsync(f.fileno())\n\t\t\tos.rename(MqttPasswordFile + \".tmp\", MqttPasswordFile)\n\t\t\t# update the directory meta-info\n\t\t\tfd = os.open(os.path.dirname(MqttPasswordFile), 0)",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\tfd",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\tfd = os.open(os.path.dirname(MqttPasswordFile), 0)\n\t\t\tos.fsync(fd)\n\t\t\tos.close(fd)\n\t\t\tif os.path.exists(MosquittoConfig):\n\t\t\t\tself._delete_silently(MosquittoConfig)\n\t\t\treturn password\n\tdef register(self):\n\t\tif self._init_broker_timer is not None:\n\t\t\treturn\n\t\tif self._init_broker(quiet=False, timeout=5):",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself._init_broker_timer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\tself._init_broker_timer = RepeatingTimer(self._init_broker, 60)\n\t\t\t\tself._init_broker_timer.start()\n\tdef abort_gracefully(self):\n\t\tself._aborted.set()\n\t\tif self._init_broker_timer:\n\t\t\tself._init_broker_timer.stop()\n\t\t\tself._init_broker_timer.join()\n\tdef _write_config_atomically(self, path, contents):\n\t\tconfig_dir = os.path.dirname(path)\n\t\tif not os.path.exists(config_dir):",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\tconfig_dir",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\tconfig_dir = os.path.dirname(path)\n\t\tif not os.path.exists(config_dir):\n\t\t\tos.makedirs(config_dir)\n\t\twith open(path + \".tmp\", 'wt') as out_file:\n\t\t\t# make sure the new config is on the disk\n\t\t\tout_file.write(contents)\n\t\t\tout_file.flush()\n\t\t\tos.fsync(out_file.fileno())\n\t\t\t# make sure there is either the old file or the new one\n\t\t\tos.rename(path + \".tmp\", path)",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\tfd",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\tfd = os.open(os.path.dirname(path), 0)\n\t\t\tos.fsync(fd)\n\t\t\tos.close(fd)\n\tdef _delete_silently(self, path):\n\t\ttry:\n\t\t\tos.remove(path)\n\t\texcept:\n\t\t\tpass\n\tdef _init_broker(self, quiet=True, timeout=5):\n\t\ttry:",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\torig_config",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\torig_config = None\n\t\t\t\t# Read the current config file (if present)\n\t\t\t\ttry:\n\t\t\t\t\tif not quiet:\n\t\t\t\t\t\tlogging.info('[InitBroker] Reading config file')\n\t\t\t\t\twith open(BridgeConfigPath, 'rt') as in_file:\n\t\t\t\t\t\torig_config = in_file.read()\n\t\t\t\texcept IOError:\n\t\t\t\t\tif not quiet:\n\t\t\t\t\t\tlogging.info('[InitBroker] Reading config file failed.')",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\torig_config",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\torig_config = in_file.read()\n\t\t\t\texcept IOError:\n\t\t\t\t\tif not quiet:\n\t\t\t\t\t\tlogging.info('[InitBroker] Reading config file failed.')\n\t\t\t\t# We need a guarantee an empty file, otherwise Mosquitto crashes on load.\n\t\t\t\tif not os.path.exists(BridgeConfigPath):\n\t\t\t\t\tself._write_config_atomically(BridgeConfigPath, \"\");\n\t\t\t\tself._global_broker_password = self.load_or_generate_mqtt_password()\n\t\t\t\t# Get to the actual registration\n\t\t\t\tif not quiet:",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself._global_broker_password",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\tself._global_broker_password = self.load_or_generate_mqtt_password()\n\t\t\t\t# Get to the actual registration\n\t\t\t\tif not quiet:\n\t\t\t\t\tlogging.info('[InitBroker] Registering CCGX at VRM portal')\n\t\t\t\twith requests.Session() as session:\n\t\t\t\t\theaders = {'content-type': 'application/x-www-form-urlencoded', 'User-Agent': 'dbus-mqtt'}\n\t\t\t\t\tr = session.post(\n\t\t\t\t\t\tVrmApiServer + '/log/storemqttpassword.php',\n\t\t\t\t\t\tdata=dict(identifier=self._global_broker_username, mqttPassword=self._global_broker_password),\n\t\t\t\t\t\theaders=headers,",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\theaders",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\theaders = {'content-type': 'application/x-www-form-urlencoded', 'User-Agent': 'dbus-mqtt'}\n\t\t\t\t\tr = session.post(\n\t\t\t\t\t\tVrmApiServer + '/log/storemqttpassword.php',\n\t\t\t\t\t\tdata=dict(identifier=self._global_broker_username, mqttPassword=self._global_broker_password),\n\t\t\t\t\t\theaders=headers,\n\t\t\t\t\t\tverify=CaBundlePath,\n\t\t\t\t\t\ttimeout=(timeout,timeout))\n\t\t\t\t\tif r.status_code == requests.codes.ok:\n\t\t\t\t\t\tvrm_portal_mode = get_setting('/Settings/Network/VrmPortal')\n\t\t\t\t\t\tconfig_rpc = \"\"",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\tr = session.post(\n\t\t\t\t\t\tVrmApiServer + '/log/storemqttpassword.php',\n\t\t\t\t\t\tdata=dict(identifier=self._global_broker_username, mqttPassword=self._global_broker_password),\n\t\t\t\t\t\theaders=headers,\n\t\t\t\t\t\tverify=CaBundlePath,\n\t\t\t\t\t\ttimeout=(timeout,timeout))\n\t\t\t\t\tif r.status_code == requests.codes.ok:\n\t\t\t\t\t\tvrm_portal_mode = get_setting('/Settings/Network/VrmPortal')\n\t\t\t\t\t\tconfig_rpc = \"\"\n\t\t\t\t\t\tconfig_dbus = \"\"",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tvrm_portal_mode",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\tvrm_portal_mode = get_setting('/Settings/Network/VrmPortal')\n\t\t\t\t\t\tconfig_rpc = \"\"\n\t\t\t\t\t\tconfig_dbus = \"\"\n\t\t\t\t\t\tif vrm_portal_mode == 2:\n\t\t\t\t\t\t\tconfig_rpc = BridgeSettingsRPC.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,\n\t\t\t\t\t\t\t\tself._global_broker_username)\n\t\t\t\t\t\tif vrm_portal_mode >= 1:\n\t\t\t\t\t\t\tconfig_dbus = BridgeSettingsDbus.format(self._system_id,",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tconfig_rpc",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\tconfig_rpc = \"\"\n\t\t\t\t\t\tconfig_dbus = \"\"\n\t\t\t\t\t\tif vrm_portal_mode == 2:\n\t\t\t\t\t\t\tconfig_rpc = BridgeSettingsRPC.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,\n\t\t\t\t\t\t\t\tself._global_broker_username)\n\t\t\t\t\t\tif vrm_portal_mode >= 1:\n\t\t\t\t\t\t\tconfig_dbus = BridgeSettingsDbus.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tconfig_dbus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\tconfig_dbus = \"\"\n\t\t\t\t\t\tif vrm_portal_mode == 2:\n\t\t\t\t\t\t\tconfig_rpc = BridgeSettingsRPC.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,\n\t\t\t\t\t\t\t\tself._global_broker_username)\n\t\t\t\t\t\tif vrm_portal_mode >= 1:\n\t\t\t\t\t\t\tconfig_dbus = BridgeSettingsDbus.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tconfig_rpc",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\t\tconfig_rpc = BridgeSettingsRPC.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,\n\t\t\t\t\t\t\t\tself._global_broker_username)\n\t\t\t\t\t\tif vrm_portal_mode >= 1:\n\t\t\t\t\t\t\tconfig_dbus = BridgeSettingsDbus.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,\n\t\t\t\t\t\t\t\tself._global_broker_username)\n\t\t\t\t\t\tconfig = \"# Generated by BridgeRegistrator. Any changes will be overwritten on service start.\\n\"",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tconfig_dbus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\t\tconfig_dbus = BridgeSettingsDbus.format(self._system_id,\n\t\t\t\t\t\t\t\tself._global_broker_password,\n\t\t\t\t\t\t\t\tself._get_vrm_broker_url(), RpcBroker, CaBundlePath,\n\t\t\t\t\t\t\t\tself._global_broker_username)\n\t\t\t\t\t\tconfig = \"# Generated by BridgeRegistrator. Any changes will be overwritten on service start.\\n\"\n\t\t\t\t\t\tconfig += config_rpc\n\t\t\t\t\t\tconfig += config_dbus\n\t\t\t\t\t\t# Do we need to adjust the settings file?\n\t\t\t\t\t\tchanged = config != orig_config\n\t\t\t\t\t\tif changed:",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tconfig",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\tconfig = \"# Generated by BridgeRegistrator. Any changes will be overwritten on service start.\\n\"\n\t\t\t\t\t\tconfig += config_rpc\n\t\t\t\t\t\tconfig += config_dbus\n\t\t\t\t\t\t# Do we need to adjust the settings file?\n\t\t\t\t\t\tchanged = config != orig_config\n\t\t\t\t\t\tif changed:\n\t\t\t\t\t\t\tlogging.info('[InitBroker] Writing new config file')\n\t\t\t\t\t\t\tself._write_config_atomically(BridgeConfigPath, config)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tlogging.info('[InitBroker] Not updating the config file, because config is correct.')",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tchanged",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\tchanged = config != orig_config\n\t\t\t\t\t\tif changed:\n\t\t\t\t\t\t\tlogging.info('[InitBroker] Writing new config file')\n\t\t\t\t\t\t\tself._write_config_atomically(BridgeConfigPath, config)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tlogging.info('[InitBroker] Not updating the config file, because config is correct.')\n\t\t\t\t\t\tself._init_broker_timer = None\n\t\t\t\t\t\tlogging.getLogger(\"requests\").setLevel(self._requests_log_level)\n\t\t\t\t\t\tlogging.info('[InitBroker] Registration successful')\n\t\t\t\t\t\tif changed:",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tself._init_broker_timer",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\t\t\t\t\t\tself._init_broker_timer = None\n\t\t\t\t\t\tlogging.getLogger(\"requests\").setLevel(self._requests_log_level)\n\t\t\t\t\t\tlogging.info('[InitBroker] Registration successful')\n\t\t\t\t\t\tif changed:\n\t\t\t\t\t\t\tos._exit(100)\n\t\t\t\t\t\treturn False\n\t\t\t\t\tif not quiet:\n\t\t\t\t\t\tlogging.error('VRM registration failed. Http status was: {}'.format(r.status_code))\n\t\t\t\t\t\tlogging.error('Message was: {}'.format(r.text))\n\t\texcept:",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\tvrmid",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\tvrmid = get_vrm_portal_id()\n\tregistrator = MosquittoBridgeRegistrator(vrmid)\n\tregistrator.register()\nif __name__ == \"__main__\":\n    main()\n# vim: noexpandtab:shiftwidth=4:tabstop=4:softtabstop=0",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "\tregistrator",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "description": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "peekOfCode": "\tregistrator = MosquittoBridgeRegistrator(vrmid)\n\tregistrator.register()\nif __name__ == \"__main__\":\n    main()\n# vim: noexpandtab:shiftwidth=4:tabstop=4:softtabstop=0",
        "detail": "dbus-serialbattery.ext.velib_python.mosquitto_bridge_registrator",
        "documentation": {}
    },
    {
        "label": "SettingsDevice",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "class SettingsDevice(object):\n\t## The constructor processes the tree of dbus-items.\n\t# @param bus the system-dbus object\n\t# @param name the dbus-service-name of the settings dbus service, 'com.victronenergy.settings'\n\t# @param supportedSettings dictionary with all setting-names, and their defaultvalue, min, max and whether\n\t# the setting is silent. The 'silent' entry is optional. If set to true, no changes in the setting will\n\t# be logged by localsettings.\n\t# @param eventCallback function that will be called on changes on any of these settings\n\t# @param timeout Maximum interval to wait for localsettings. An exception is thrown at the end of the\n\t# interval if the localsettings D-Bus service has not appeared yet.",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "PATH = 0\nVALUE = 1\nMINIMUM = 2\nMAXIMUM = 3\nSILENT = 4\n## The Settings Device class.\n# Used by python programs, such as the vrm-logger, to read and write settings they\n# need to store on disk. And since these settings might be changed from a different\n# source, such as the GUI, the program can pass an eventCallback that will be called\n# as soon as some setting is changed.",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "VALUE = 1\nMINIMUM = 2\nMAXIMUM = 3\nSILENT = 4\n## The Settings Device class.\n# Used by python programs, such as the vrm-logger, to read and write settings they\n# need to store on disk. And since these settings might be changed from a different\n# source, such as the GUI, the program can pass an eventCallback that will be called\n# as soon as some setting is changed.\n#",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "MINIMUM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "MINIMUM = 2\nMAXIMUM = 3\nSILENT = 4\n## The Settings Device class.\n# Used by python programs, such as the vrm-logger, to read and write settings they\n# need to store on disk. And since these settings might be changed from a different\n# source, such as the GUI, the program can pass an eventCallback that will be called\n# as soon as some setting is changed.\n#\n# The settings are stored in flash via the com.victronenergy.settings service on dbus.",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "MAXIMUM",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "MAXIMUM = 3\nSILENT = 4\n## The Settings Device class.\n# Used by python programs, such as the vrm-logger, to read and write settings they\n# need to store on disk. And since these settings might be changed from a different\n# source, such as the GUI, the program can pass an eventCallback that will be called\n# as soon as some setting is changed.\n#\n# The settings are stored in flash via the com.victronenergy.settings service on dbus.\n# See https://github.com/victronenergy/localsettings for more info.",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "SILENT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "SILENT = 4\n## The Settings Device class.\n# Used by python programs, such as the vrm-logger, to read and write settings they\n# need to store on disk. And since these settings might be changed from a different\n# source, such as the GUI, the program can pass an eventCallback that will be called\n# as soon as some setting is changed.\n#\n# The settings are stored in flash via the com.victronenergy.settings service on dbus.\n# See https://github.com/victronenergy/localsettings for more info.\n#",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tself._bus",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tself._bus = bus\n\t\tself._dbus_name = name\n\t\tself._eventCallback = eventCallback\n\t\tself._values = {} # stored the values, used to pass the old value along on a setting change\n\t\tself._settings = {}\n\t\tcount = 0\n\t\twhile True:\n\t\t\tif 'com.victronenergy.settings' in self._bus.list_names():\n\t\t\t\tbreak\n\t\t\tif count == timeout:",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbus_name",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tself._dbus_name = name\n\t\tself._eventCallback = eventCallback\n\t\tself._values = {} # stored the values, used to pass the old value along on a setting change\n\t\tself._settings = {}\n\t\tcount = 0\n\t\twhile True:\n\t\t\tif 'com.victronenergy.settings' in self._bus.list_names():\n\t\t\t\tbreak\n\t\t\tif count == timeout:\n\t\t\t\traise Exception(\"The settings service com.victronenergy.settings does not exist!\")",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tself._eventCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tself._eventCallback = eventCallback\n\t\tself._values = {} # stored the values, used to pass the old value along on a setting change\n\t\tself._settings = {}\n\t\tcount = 0\n\t\twhile True:\n\t\t\tif 'com.victronenergy.settings' in self._bus.list_names():\n\t\t\t\tbreak\n\t\t\tif count == timeout:\n\t\t\t\traise Exception(\"The settings service com.victronenergy.settings does not exist!\")\n\t\t\tcount += 1",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tself._values",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tself._values = {} # stored the values, used to pass the old value along on a setting change\n\t\tself._settings = {}\n\t\tcount = 0\n\t\twhile True:\n\t\t\tif 'com.victronenergy.settings' in self._bus.list_names():\n\t\t\t\tbreak\n\t\t\tif count == timeout:\n\t\t\t\traise Exception(\"The settings service com.victronenergy.settings does not exist!\")\n\t\t\tcount += 1\n\t\t\tlogging.info('waiting for settings')",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tself._settings",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tself._settings = {}\n\t\tcount = 0\n\t\twhile True:\n\t\t\tif 'com.victronenergy.settings' in self._bus.list_names():\n\t\t\t\tbreak\n\t\t\tif count == timeout:\n\t\t\t\traise Exception(\"The settings service com.victronenergy.settings does not exist!\")\n\t\t\tcount += 1\n\t\t\tlogging.info('waiting for settings')\n\t\t\ttime.sleep(1)",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tcount",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tcount = 0\n\t\twhile True:\n\t\t\tif 'com.victronenergy.settings' in self._bus.list_names():\n\t\t\t\tbreak\n\t\t\tif count == timeout:\n\t\t\t\traise Exception(\"The settings service com.victronenergy.settings does not exist!\")\n\t\t\tcount += 1\n\t\t\tlogging.info('waiting for settings')\n\t\t\ttime.sleep(1)\n\t\t# Add the items.",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tsilent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tsilent = len(options) > SILENT and options[SILENT]\n\t\t\tbusitem = self.addSetting(options[PATH], options[VALUE],\n\t\t\t\toptions[MINIMUM], options[MAXIMUM], silent, callback=partial(self.handleChangedSetting, setting))\n\t\t\tself._settings[setting] = busitem\n\t\t\tself._values[setting] = busitem.get_value()\n\tdef addSetting(self, path, value, _min, _max, silent=False, callback=None):\n\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\tif busitem.exists and (value, _min, _max, silent) == busitem._proxy.GetAttributes():\n\t\t\tlogging.debug(\"Setting %s found\" % path)\n\t\telse:",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tbusitem",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tbusitem = self.addSetting(options[PATH], options[VALUE],\n\t\t\t\toptions[MINIMUM], options[MAXIMUM], silent, callback=partial(self.handleChangedSetting, setting))\n\t\t\tself._settings[setting] = busitem\n\t\t\tself._values[setting] = busitem.get_value()\n\tdef addSetting(self, path, value, _min, _max, silent=False, callback=None):\n\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\tif busitem.exists and (value, _min, _max, silent) == busitem._proxy.GetAttributes():\n\t\t\tlogging.debug(\"Setting %s found\" % path)\n\t\telse:\n\t\t\tlogging.info(\"Setting %s does not exist yet or must be adjusted\" % path)",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._settings[setting]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tself._settings[setting] = busitem\n\t\t\tself._values[setting] = busitem.get_value()\n\tdef addSetting(self, path, value, _min, _max, silent=False, callback=None):\n\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\tif busitem.exists and (value, _min, _max, silent) == busitem._proxy.GetAttributes():\n\t\t\tlogging.debug(\"Setting %s found\" % path)\n\t\telse:\n\t\t\tlogging.info(\"Setting %s does not exist yet or must be adjusted\" % path)\n\t\t\t# Prepare to add the setting. Most dbus types extend the python\n\t\t\t# type so it is only necessary to additionally test for Int64.",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._values[setting]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tself._values[setting] = busitem.get_value()\n\tdef addSetting(self, path, value, _min, _max, silent=False, callback=None):\n\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\tif busitem.exists and (value, _min, _max, silent) == busitem._proxy.GetAttributes():\n\t\t\tlogging.debug(\"Setting %s found\" % path)\n\t\telse:\n\t\t\tlogging.info(\"Setting %s does not exist yet or must be adjusted\" % path)\n\t\t\t# Prepare to add the setting. Most dbus types extend the python\n\t\t\t# type so it is only necessary to additionally test for Int64.\n\t\t\tif isinstance(value, (int, dbus.Int64)):",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tbusitem",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\tif busitem.exists and (value, _min, _max, silent) == busitem._proxy.GetAttributes():\n\t\t\tlogging.debug(\"Setting %s found\" % path)\n\t\telse:\n\t\t\tlogging.info(\"Setting %s does not exist yet or must be adjusted\" % path)\n\t\t\t# Prepare to add the setting. Most dbus types extend the python\n\t\t\t# type so it is only necessary to additionally test for Int64.\n\t\t\tif isinstance(value, (int, dbus.Int64)):\n\t\t\t\titemType = 'i'\n\t\t\telif isinstance(value, float):",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\t\titemType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\t\titemType = 'i'\n\t\t\telif isinstance(value, float):\n\t\t\t\titemType = 'f'\n\t\t\telse:\n\t\t\t\titemType = 's'\n\t\t\t# Add the setting\n\t\t\t# TODO, make an object that inherits VeDbusItemImport, and complete the D-Bus settingsitem interface\n\t\t\tsettings_item = VeDbusItemImport(self._bus, self._dbus_name, '/Settings', createsignal=False)\n\t\t\tsetting_path = path.replace('/Settings/', '', 1)\n\t\t\tif silent:",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\t\titemType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\t\titemType = 'f'\n\t\t\telse:\n\t\t\t\titemType = 's'\n\t\t\t# Add the setting\n\t\t\t# TODO, make an object that inherits VeDbusItemImport, and complete the D-Bus settingsitem interface\n\t\t\tsettings_item = VeDbusItemImport(self._bus, self._dbus_name, '/Settings', createsignal=False)\n\t\t\tsetting_path = path.replace('/Settings/', '', 1)\n\t\t\tif silent:\n\t\t\t\tsettings_item._proxy.AddSilentSetting('', setting_path, value, itemType, _min, _max)\n\t\t\telse:",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\t\titemType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\t\titemType = 's'\n\t\t\t# Add the setting\n\t\t\t# TODO, make an object that inherits VeDbusItemImport, and complete the D-Bus settingsitem interface\n\t\t\tsettings_item = VeDbusItemImport(self._bus, self._dbus_name, '/Settings', createsignal=False)\n\t\t\tsetting_path = path.replace('/Settings/', '', 1)\n\t\t\tif silent:\n\t\t\t\tsettings_item._proxy.AddSilentSetting('', setting_path, value, itemType, _min, _max)\n\t\t\telse:\n\t\t\t\tsettings_item._proxy.AddSetting('', setting_path, value, itemType, _min, _max)\n\t\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tsettings_item",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tsettings_item = VeDbusItemImport(self._bus, self._dbus_name, '/Settings', createsignal=False)\n\t\t\tsetting_path = path.replace('/Settings/', '', 1)\n\t\t\tif silent:\n\t\t\t\tsettings_item._proxy.AddSilentSetting('', setting_path, value, itemType, _min, _max)\n\t\t\telse:\n\t\t\t\tsettings_item._proxy.AddSetting('', setting_path, value, itemType, _min, _max)\n\t\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\treturn busitem\n\tdef handleChangedSetting(self, setting, servicename, path, changes):\n\t\toldvalue = self._values[setting] if setting in self._values else None",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tsetting_path",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tsetting_path = path.replace('/Settings/', '', 1)\n\t\t\tif silent:\n\t\t\t\tsettings_item._proxy.AddSilentSetting('', setting_path, value, itemType, _min, _max)\n\t\t\telse:\n\t\t\t\tsettings_item._proxy.AddSetting('', setting_path, value, itemType, _min, _max)\n\t\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\treturn busitem\n\tdef handleChangedSetting(self, setting, servicename, path, changes):\n\t\toldvalue = self._values[setting] if setting in self._values else None\n\t\tself._values[setting] = changes['Value']",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\t\tbusitem",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\t\tbusitem = VeDbusItemImport(self._bus, self._dbus_name, path, callback)\n\t\treturn busitem\n\tdef handleChangedSetting(self, setting, servicename, path, changes):\n\t\toldvalue = self._values[setting] if setting in self._values else None\n\t\tself._values[setting] = changes['Value']\n\t\tif self._eventCallback is None:\n\t\t\treturn\n\t\tself._eventCallback(setting, oldvalue, changes['Value'])\n\tdef setDefault(self, path):\n                item = VeDbusItemImport(self._bus, self._dbus_name, path, createsignal=False)",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\toldvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\toldvalue = self._values[setting] if setting in self._values else None\n\t\tself._values[setting] = changes['Value']\n\t\tif self._eventCallback is None:\n\t\t\treturn\n\t\tself._eventCallback(setting, oldvalue, changes['Value'])\n\tdef setDefault(self, path):\n                item = VeDbusItemImport(self._bus, self._dbus_name, path, createsignal=False)\n                item.set_default()\n\tdef __getitem__(self, setting):\n\t\treturn self._settings[setting].get_value()",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tself._values[setting]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tself._values[setting] = changes['Value']\n\t\tif self._eventCallback is None:\n\t\t\treturn\n\t\tself._eventCallback(setting, oldvalue, changes['Value'])\n\tdef setDefault(self, path):\n                item = VeDbusItemImport(self._bus, self._dbus_name, path, createsignal=False)\n                item.set_default()\n\tdef __getitem__(self, setting):\n\t\treturn self._settings[setting].get_value()\n\tdef __setitem__(self, setting, newvalue):",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "description": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "peekOfCode": "\t\tresult = self._settings[setting].set_value(newvalue)\n\t\tif result != 0:\n\t\t\t# Trying to make some false change to our own settings? How dumb!\n\t\t\tassert False",
        "detail": "dbus-serialbattery.ext.velib_python.settingsdevice",
        "documentation": {}
    },
    {
        "label": "LogDummy",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "class LogDummy(object):\n\tdef __init__(self):\n\t\tself._str = ''\n\tdef info(self, str, *args):\n\t\tself._str = str\n\tdef debug(self, str, *args):\n\t\tself._str = str\n\tdef warning(self, str, *args):\n\t\tprint(\"Warning: \" + (str % args))\n\tdef error(self, str, *args):",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "setupTraces",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "def setupTraces(enabled, path, fileName, toConsole, toFile, debugOn):\n\tglobal log\n\tif enabled:\n\t\timport logging\n\t\timport logging.handlers\n\t\tlog = logging.getLogger(fileName)\n\t\tif debugOn == True:\n\t\t\tlevel = logging.DEBUG\n\t\telse:\n\t\t\tlevel = logging.INFO",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "log = None\n## Setup the debug traces.\n# The traces can be logged to console and/or file.\n# When logged to file a logrotate is used.\n# @param enabled When True traces are enabled.\n# @param path The path for the trace-file.\n# @param fileName The trace-file-name.\n# @param toConsole When True show traces to console.\n# @param debugOn When True show debug-traces.\ndef setupTraces(enabled, path, fileName, toConsole, toFile, debugOn):",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\tlog",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\tlog = logging.getLogger(fileName)\n\t\tif debugOn == True:\n\t\t\tlevel = logging.DEBUG\n\t\telse:\n\t\t\tlevel = logging.INFO\n\t\tlog.setLevel(level)\n\t\tlog.disabled = not enabled\n\t\tif toConsole == True:\n\t\t\tsth = logging.StreamHandler()\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\t\tlevel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\t\tlevel = logging.DEBUG\n\t\telse:\n\t\t\tlevel = logging.INFO\n\t\tlog.setLevel(level)\n\t\tlog.disabled = not enabled\n\t\tif toConsole == True:\n\t\t\tsth = logging.StreamHandler()\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tsth.setFormatter(fmt)\n\t\t\tsth.setLevel(level)",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\t\tlevel",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\t\tlevel = logging.INFO\n\t\tlog.setLevel(level)\n\t\tlog.disabled = not enabled\n\t\tif toConsole == True:\n\t\t\tsth = logging.StreamHandler()\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tsth.setFormatter(fmt)\n\t\t\tsth.setLevel(level)\n\t\t\tlog.addHandler(sth)\n\t\tif toFile == True:",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\tlog.disabled",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\tlog.disabled = not enabled\n\t\tif toConsole == True:\n\t\t\tsth = logging.StreamHandler()\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tsth.setFormatter(fmt)\n\t\t\tsth.setLevel(level)\n\t\t\tlog.addHandler(sth)\n\t\tif toFile == True:\n\t\t\tfd = logging.handlers.RotatingFileHandler(path + fileName, maxBytes=1048576, backupCount=5)\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\t\tsth",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\t\tsth = logging.StreamHandler()\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tsth.setFormatter(fmt)\n\t\t\tsth.setLevel(level)\n\t\t\tlog.addHandler(sth)\n\t\tif toFile == True:\n\t\t\tfd = logging.handlers.RotatingFileHandler(path + fileName, maxBytes=1048576, backupCount=5)\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tfd.setFormatter(fmt)\n\t\t\tfd.setLevel(level)",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\t\tfmt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tsth.setFormatter(fmt)\n\t\t\tsth.setLevel(level)\n\t\t\tlog.addHandler(sth)\n\t\tif toFile == True:\n\t\t\tfd = logging.handlers.RotatingFileHandler(path + fileName, maxBytes=1048576, backupCount=5)\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tfd.setFormatter(fmt)\n\t\t\tfd.setLevel(level)\n\t\t\tlog.addHandler(fd)",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\t\tfd",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\t\tfd = logging.handlers.RotatingFileHandler(path + fileName, maxBytes=1048576, backupCount=5)\n\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tfd.setFormatter(fmt)\n\t\t\tfd.setLevel(level)\n\t\t\tlog.addHandler(fd)\n\telse:\n\t\tlog = LogDummy()\nclass LogDummy(object):\n\tdef __init__(self):\n\t\tself._str = ''",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\t\tfmt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\t\tfmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n\t\t\tfd.setFormatter(fmt)\n\t\t\tfd.setLevel(level)\n\t\t\tlog.addHandler(fd)\n\telse:\n\t\tlog = LogDummy()\nclass LogDummy(object):\n\tdef __init__(self):\n\t\tself._str = ''\n\tdef info(self, str, *args):",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\tlog",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\tlog = LogDummy()\nclass LogDummy(object):\n\tdef __init__(self):\n\t\tself._str = ''\n\tdef info(self, str, *args):\n\t\tself._str = str\n\tdef debug(self, str, *args):\n\t\tself._str = str\n\tdef warning(self, str, *args):\n\t\tprint(\"Warning: \" + (str % args))",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\tself._str",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\tself._str = ''\n\tdef info(self, str, *args):\n\t\tself._str = str\n\tdef debug(self, str, *args):\n\t\tself._str = str\n\tdef warning(self, str, *args):\n\t\tprint(\"Warning: \" + (str % args))\n\tdef error(self, str, *args):\n\t\tprint(\"Error: \" + (str % args))",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\tself._str",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\tself._str = str\n\tdef debug(self, str, *args):\n\t\tself._str = str\n\tdef warning(self, str, *args):\n\t\tprint(\"Warning: \" + (str % args))\n\tdef error(self, str, *args):\n\t\tprint(\"Error: \" + (str % args))",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "\t\tself._str",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.tracing",
        "description": "dbus-serialbattery.ext.velib_python.tracing",
        "peekOfCode": "\t\tself._str = str\n\tdef warning(self, str, *args):\n\t\tprint(\"Warning: \" + (str % args))\n\tdef error(self, str, *args):\n\t\tprint(\"Error: \" + (str % args))",
        "detail": "dbus-serialbattery.ext.velib_python.tracing",
        "documentation": {}
    },
    {
        "label": "NoVrmPortalIdError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "class NoVrmPortalIdError(Exception):\n\tpass\n# Use this function to make sure the code quits on an unexpected exception. Make sure to use it\n# when using GLib.idle_add and also GLib.timeout_add.\n# Without this, the code will just keep running, since GLib does not stop the mainloop on an\n# exception.\n# Example: GLib.idle_add(exit_on_error, myfunc, arg1, arg2)\ndef exit_on_error(func, *args, **kwargs):\n\ttry:\n\t\treturn func(*args, **kwargs)",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "exit_on_error",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def exit_on_error(func, *args, **kwargs):\n\ttry:\n\t\treturn func(*args, **kwargs)\n\texcept:\n\t\ttry:\n\t\t\tprint ('exit_on_error: there was an exception. Printing stacktrace will be tried and then exit')\n\t\t\tprint_exc()\n\t\texcept:\n\t\t\tpass\n\t\t# sys.exit() is not used, since that throws an exception, which does not lead to a program",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "get_vrm_portal_id",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def get_vrm_portal_id():\n\t# The original definition of the VRM Portal ID is that it is the mac\n\t# address of the onboard- ethernet port (eth0), stripped from its colons\n\t# (:) and lower case. This may however differ between platforms. On Venus\n\t# the task is therefore deferred to /sbin/get-unique-id so that a\n\t# platform specific method can be easily defined.\n\t#\n\t# If /sbin/get-unique-id does not exist, then use the ethernet address\n\t# of eth0. This also handles the case where velib_python is used as a\n\t# package install on a Raspberry Pi.",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "convert_vreg_version_to_readable",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def convert_vreg_version_to_readable(version):\n\tdef str_to_arr(x, length):\n\t\ta = []\n\t\tfor i in range(0, len(x), length):\n\t\t\ta.append(x[i:i+length])\n\t\treturn a\n\tx = \"%x\" % version\n\tx = x.upper()\n\tif len(x) == 5 or len(x) == 3 or len(x) == 1:\n\t\tx = '0' + x",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "get_free_space",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def get_free_space(path):\n\tresult = -1\n\ttry:\n\t\ts = statvfs(path)\n\t\tresult = s.f_frsize * s.f_bavail     # Number of free bytes that ordinary users\n\texcept Exception as ex:\n\t\tlogger.info(\"Error while retrieving free space for path %s: %s\" % (path, ex))\n\treturn result\ndef _get_sysfs_machine_name():\n\ttry:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "get_machine_name",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def get_machine_name():\n\t# First try calling the venus utility script\n\ttry:\n\t\treturn check_output(\"/usr/bin/product-name\").strip().decode('UTF-8')\n\texcept (CalledProcessError, OSError):\n\t\tpass\n\t# Fall back to sysfs\n\tname = _get_sysfs_machine_name()\n\tif name is not None:\n\t\treturn name",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "get_product_id",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def get_product_id():\n\t\"\"\" Find the machine ID and return it. \"\"\"\n\t# First try calling the venus utility script\n\ttry:\n\t\treturn check_output(\"/usr/bin/product-id\").strip().decode('UTF-8')\n\texcept (CalledProcessError, OSError):\n\t\tpass\n\t# Fall back machine name mechanism\n\tname = _get_sysfs_machine_name()\n\treturn {",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def read_file(path):\n\tcontent = False\n\ttry:\n\t\twith open(path, 'r') as f:\n\t\t\tcontent = f.read().rstrip()\n\texcept Exception as ex:\n\t\tlogger.debug(\"Error while reading %s: %s\" % (path, ex))\n\treturn content\ndef wrap_dbus_value(value):\n\tif value is None:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "wrap_dbus_value",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def wrap_dbus_value(value):\n\tif value is None:\n\t\treturn VEDBUS_INVALID\n\tif isinstance(value, float):\n\t\treturn dbus.Double(value, variant_level=1)\n\tif isinstance(value, bool):\n\t\treturn dbus.Boolean(value, variant_level=1)\n\tif isinstance(value, int):\n\t\ttry:\n\t\t\treturn dbus.Int32(value, variant_level=1)",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "unwrap_dbus_value",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def unwrap_dbus_value(val):\n\t\"\"\"Converts D-Bus values back to the original type. For example if val is of type DBus.Double,\n\ta float will be returned.\"\"\"\n\tif isinstance(val, dbus_int_types):\n\t\treturn int(val)\n\tif isinstance(val, dbus.Double):\n\t\treturn float(val)\n\tif isinstance(val, dbus.Array):\n\t\tv = [unwrap_dbus_value(x) for x in val]\n\t\treturn None if len(v) == 0 else v",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "add_name_owner_changed_receiver",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "def add_name_owner_changed_receiver(dbus, name_owner_changed, namespace=\"com.victronenergy\"):\n\t# support for arg0namespace is submitted upstream, but not included at the time of\n\t# writing, Venus OS does support it, so try if it works.\n\tif namespace is None:\n\t\tdbus.add_signal_receiver(name_owner_changed, signal_name='NameOwnerChanged')\n\telse:\n\t\ttry:\n\t\t\tdbus.add_signal_receiver(name_owner_changed,\n\t\t\t\tsignal_name='NameOwnerChanged', arg0namespace=namespace)\n\t\texcept TypeError:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nVEDBUS_INVALID = dbus.Array([], signature=dbus.Signature('i'), variant_level=1)\nclass NoVrmPortalIdError(Exception):\n\tpass\n# Use this function to make sure the code quits on an unexpected exception. Make sure to use it\n# when using GLib.idle_add and also GLib.timeout_add.\n# Without this, the code will just keep running, since GLib does not stop the mainloop on an\n# exception.\n# Example: GLib.idle_add(exit_on_error, myfunc, arg1, arg2)\ndef exit_on_error(func, *args, **kwargs):",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "VEDBUS_INVALID",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "VEDBUS_INVALID = dbus.Array([], signature=dbus.Signature('i'), variant_level=1)\nclass NoVrmPortalIdError(Exception):\n\tpass\n# Use this function to make sure the code quits on an unexpected exception. Make sure to use it\n# when using GLib.idle_add and also GLib.timeout_add.\n# Without this, the code will just keep running, since GLib does not stop the mainloop on an\n# exception.\n# Example: GLib.idle_add(exit_on_error, myfunc, arg1, arg2)\ndef exit_on_error(func, *args, **kwargs):\n\ttry:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "__vrm_portal_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "__vrm_portal_id = None\ndef get_vrm_portal_id():\n\t# The original definition of the VRM Portal ID is that it is the mac\n\t# address of the onboard- ethernet port (eth0), stripped from its colons\n\t# (:) and lower case. This may however differ between platforms. On Venus\n\t# the task is therefore deferred to /sbin/get-unique-id so that a\n\t# platform specific method can be easily defined.\n\t#\n\t# If /sbin/get-unique-id does not exist, then use the ethernet address\n\t# of eth0. This also handles the case where velib_python is used as a",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tportal_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tportal_id = None\n\t# First try the method that works if we don't have a data partition. This\n\t# will fail when the current user is not root.\n\ttry:\n\t\tportal_id = check_output(\"/sbin/get-unique-id\").decode(\"utf-8\", \"ignore\").strip()\n\t\tif not portal_id:\n\t\t\traise NoVrmPortalIdError(\"get-unique-id returned blank\")\n\t\t__vrm_portal_id = portal_id\n\t\treturn portal_id\n\texcept CalledProcessError:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\tportal_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\tportal_id = check_output(\"/sbin/get-unique-id\").decode(\"utf-8\", \"ignore\").strip()\n\t\tif not portal_id:\n\t\t\traise NoVrmPortalIdError(\"get-unique-id returned blank\")\n\t\t__vrm_portal_id = portal_id\n\t\treturn portal_id\n\texcept CalledProcessError:\n\t\t# get-unique-id returned non-zero\n\t\traise NoVrmPortalIdError(\"get-unique-id returned non-zero\")\n\texcept OSError:\n\t\t# File doesn't exist, use fallback",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\t__vrm_portal_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\t__vrm_portal_id = portal_id\n\t\treturn portal_id\n\texcept CalledProcessError:\n\t\t# get-unique-id returned non-zero\n\t\traise NoVrmPortalIdError(\"get-unique-id returned non-zero\")\n\texcept OSError:\n\t\t# File doesn't exist, use fallback\n\t\tpass\n\t# Fall back to getting our id using a syscall. Assume we are on linux.\n\t# Allow the user to override what interface is used using an environment",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tiface",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tiface = os.environ.get('VRM_IFACE', 'eth0').encode('ascii')\n\ts = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\ttry:\n\t\tinfo = fcntl.ioctl(s.fileno(), 0x8927,  struct.pack('256s', iface[:15]))\n\texcept IOError:\n\t\traise NoVrmPortalIdError(\"ioctl failed for eth0\")\n\t__vrm_portal_id = info[18:24].hex()\n\treturn __vrm_portal_id\n# See VE.Can registers - public.docx for definition of this conversion\ndef convert_vreg_version_to_readable(version):",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\ts",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\ts = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\ttry:\n\t\tinfo = fcntl.ioctl(s.fileno(), 0x8927,  struct.pack('256s', iface[:15]))\n\texcept IOError:\n\t\traise NoVrmPortalIdError(\"ioctl failed for eth0\")\n\t__vrm_portal_id = info[18:24].hex()\n\treturn __vrm_portal_id\n# See VE.Can registers - public.docx for definition of this conversion\ndef convert_vreg_version_to_readable(version):\n\tdef str_to_arr(x, length):",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\tinfo",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\tinfo = fcntl.ioctl(s.fileno(), 0x8927,  struct.pack('256s', iface[:15]))\n\texcept IOError:\n\t\traise NoVrmPortalIdError(\"ioctl failed for eth0\")\n\t__vrm_portal_id = info[18:24].hex()\n\treturn __vrm_portal_id\n# See VE.Can registers - public.docx for definition of this conversion\ndef convert_vreg_version_to_readable(version):\n\tdef str_to_arr(x, length):\n\t\ta = []\n\t\tfor i in range(0, len(x), length):",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t__vrm_portal_id",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t__vrm_portal_id = info[18:24].hex()\n\treturn __vrm_portal_id\n# See VE.Can registers - public.docx for definition of this conversion\ndef convert_vreg_version_to_readable(version):\n\tdef str_to_arr(x, length):\n\t\ta = []\n\t\tfor i in range(0, len(x), length):\n\t\t\ta.append(x[i:i+length])\n\t\treturn a\n\tx = \"%x\" % version",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\ta = []\n\t\tfor i in range(0, len(x), length):\n\t\t\ta.append(x[i:i+length])\n\t\treturn a\n\tx = \"%x\" % version\n\tx = x.upper()\n\tif len(x) == 5 or len(x) == 3 or len(x) == 1:\n\t\tx = '0' + x\n\ta = str_to_arr(x, 2);\n\t# remove the first 00 if there are three bytes and it is 00",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tx = \"%x\" % version\n\tx = x.upper()\n\tif len(x) == 5 or len(x) == 3 or len(x) == 1:\n\t\tx = '0' + x\n\ta = str_to_arr(x, 2);\n\t# remove the first 00 if there are three bytes and it is 00\n\tif len(a) == 3 and a[0] == '00':\n\t\ta.remove(0);\n\t# if we have two or three bytes now, and the first character is a 0, remove it\n\tif len(a) >= 2 and a[0][0:1] == '0':",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tx = x.upper()\n\tif len(x) == 5 or len(x) == 3 or len(x) == 1:\n\t\tx = '0' + x\n\ta = str_to_arr(x, 2);\n\t# remove the first 00 if there are three bytes and it is 00\n\tif len(a) == 3 and a[0] == '00':\n\t\ta.remove(0);\n\t# if we have two or three bytes now, and the first character is a 0, remove it\n\tif len(a) >= 2 and a[0][0:1] == '0':\n\t\ta[0] = a[0][1];",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\tx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\tx = '0' + x\n\ta = str_to_arr(x, 2);\n\t# remove the first 00 if there are three bytes and it is 00\n\tif len(a) == 3 and a[0] == '00':\n\t\ta.remove(0);\n\t# if we have two or three bytes now, and the first character is a 0, remove it\n\tif len(a) >= 2 and a[0][0:1] == '0':\n\t\ta[0] = a[0][1];\n\tresult = ''\n\tfor item in a:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\ta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\ta = str_to_arr(x, 2);\n\t# remove the first 00 if there are three bytes and it is 00\n\tif len(a) == 3 and a[0] == '00':\n\t\ta.remove(0);\n\t# if we have two or three bytes now, and the first character is a 0, remove it\n\tif len(a) >= 2 and a[0][0:1] == '0':\n\t\ta[0] = a[0][1];\n\tresult = ''\n\tfor item in a:\n\t\tresult += ('.' if result != '' else '') + item",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\ta[0]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\ta[0] = a[0][1];\n\tresult = ''\n\tfor item in a:\n\t\tresult += ('.' if result != '' else '') + item\n\tresult = 'v' + result\n\treturn result\ndef get_free_space(path):\n\tresult = -1\n\ttry:\n\t\ts = statvfs(path)",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tresult",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tresult = ''\n\tfor item in a:\n\t\tresult += ('.' if result != '' else '') + item\n\tresult = 'v' + result\n\treturn result\ndef get_free_space(path):\n\tresult = -1\n\ttry:\n\t\ts = statvfs(path)\n\t\tresult = s.f_frsize * s.f_bavail     # Number of free bytes that ordinary users",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tresult",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tresult = 'v' + result\n\treturn result\ndef get_free_space(path):\n\tresult = -1\n\ttry:\n\t\ts = statvfs(path)\n\t\tresult = s.f_frsize * s.f_bavail     # Number of free bytes that ordinary users\n\texcept Exception as ex:\n\t\tlogger.info(\"Error while retrieving free space for path %s: %s\" % (path, ex))\n\treturn result",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tresult",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tresult = -1\n\ttry:\n\t\ts = statvfs(path)\n\t\tresult = s.f_frsize * s.f_bavail     # Number of free bytes that ordinary users\n\texcept Exception as ex:\n\t\tlogger.info(\"Error while retrieving free space for path %s: %s\" % (path, ex))\n\treturn result\ndef _get_sysfs_machine_name():\n\ttry:\n\t\twith open('/sys/firmware/devicetree/base/model', 'r') as f:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\ts",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\ts = statvfs(path)\n\t\tresult = s.f_frsize * s.f_bavail     # Number of free bytes that ordinary users\n\texcept Exception as ex:\n\t\tlogger.info(\"Error while retrieving free space for path %s: %s\" % (path, ex))\n\treturn result\ndef _get_sysfs_machine_name():\n\ttry:\n\t\twith open('/sys/firmware/devicetree/base/model', 'r') as f:\n\t\t\treturn f.read().rstrip('\\x00')\n\texcept IOError:",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\tresult = s.f_frsize * s.f_bavail     # Number of free bytes that ordinary users\n\texcept Exception as ex:\n\t\tlogger.info(\"Error while retrieving free space for path %s: %s\" % (path, ex))\n\treturn result\ndef _get_sysfs_machine_name():\n\ttry:\n\t\twith open('/sys/firmware/devicetree/base/model', 'r') as f:\n\t\t\treturn f.read().rstrip('\\x00')\n\texcept IOError:\n\t\tpass",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tname = _get_sysfs_machine_name()\n\tif name is not None:\n\t\treturn name\n\t# Fall back to venus build machine name\n\ttry:\n\t\twith open('/etc/venus/machine', 'r', encoding='UTF-8') as f:\n\t\t\treturn f.read().strip()\n\texcept IOError:\n\t\tpass\n\treturn None",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tname = _get_sysfs_machine_name()\n\treturn {\n\t\t'Color Control GX': 'C001',\n\t\t'Venus GX': 'C002',\n\t\t'Octo GX': 'C006',\n\t\t'EasySolar-II': 'C007',\n\t\t'MultiPlus-II': 'C008',\n\t\t'Maxi GX': 'C009',\n\t\t'Cerbo GX': 'C00A'\n\t}.get(name, 'C003') # C003 is Generic",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\tcontent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\tcontent = False\n\ttry:\n\t\twith open(path, 'r') as f:\n\t\t\tcontent = f.read().rstrip()\n\texcept Exception as ex:\n\t\tlogger.debug(\"Error while reading %s: %s\" % (path, ex))\n\treturn content\ndef wrap_dbus_value(value):\n\tif value is None:\n\t\treturn VEDBUS_INVALID",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\t\tcontent = f.read().rstrip()\n\texcept Exception as ex:\n\t\tlogger.debug(\"Error while reading %s: %s\" % (path, ex))\n\treturn content\ndef wrap_dbus_value(value):\n\tif value is None:\n\t\treturn VEDBUS_INVALID\n\tif isinstance(value, float):\n\t\treturn dbus.Double(value, variant_level=1)\n\tif isinstance(value, bool):",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "dbus_int_types",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "dbus_int_types = (dbus.Int32, dbus.UInt32, dbus.Byte, dbus.Int16, dbus.UInt16, dbus.UInt32, dbus.Int64, dbus.UInt64)\ndef unwrap_dbus_value(val):\n\t\"\"\"Converts D-Bus values back to the original type. For example if val is of type DBus.Double,\n\ta float will be returned.\"\"\"\n\tif isinstance(val, dbus_int_types):\n\t\treturn int(val)\n\tif isinstance(val, dbus.Double):\n\t\treturn float(val)\n\tif isinstance(val, dbus.Array):\n\t\tv = [unwrap_dbus_value(x) for x in val]",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.ve_utils",
        "description": "dbus-serialbattery.ext.velib_python.ve_utils",
        "peekOfCode": "\t\tv = [unwrap_dbus_value(x) for x in val]\n\t\treturn None if len(v) == 0 else v\n\tif isinstance(val, (dbus.Signature, dbus.String)):\n\t\treturn str(val)\n\t# Python has no byte type, so we convert to an integer.\n\tif isinstance(val, dbus.Byte):\n\t\treturn int(val)\n\tif isinstance(val, dbus.ByteArray):\n\t\treturn \"\".join([bytes(x) for x in val])\n\tif isinstance(val, (list, tuple)):",
        "detail": "dbus-serialbattery.ext.velib_python.ve_utils",
        "documentation": {}
    },
    {
        "label": "VeDbusService",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class VeDbusService(object):\n\tdef __init__(self, servicename, bus=None, register=None):\n\t\t# dict containing the VeDbusItemExport objects, with their path as the key.\n\t\tself._dbusobjects = {}\n\t\tself._dbusnodes = {}\n\t\tself._ratelimiters = []\n\t\tself._dbusname = None\n\t\tself.name = servicename\n\t\t# dict containing the onchange callbacks, for each object. Object path is the key\n\t\tself._onchangecallbacks = {}",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "ServiceContext",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class ServiceContext(object):\n\tdef __init__(self, parent):\n\t\tself.parent = parent\n\t\tself.changes = {}\n\tdef __contains__(self, path):\n\t\treturn path in self.parent\n\tdef __getitem__(self, path):\n\t\treturn self.parent[path]\n\tdef __setitem__(self, path, newvalue):\n\t\tc = self.parent._dbusobjects[path]._local_set_value(newvalue)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "TrackerDict",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class TrackerDict(defaultdict):\n\t\"\"\" Same as defaultdict, but passes the key to default_factory. \"\"\"\n\tdef __missing__(self, key):\n\t\tself[key] = x = self.default_factory(key)\n\t\treturn x\nclass VeDbusRootTracker(object):\n\t\"\"\" This tracks the root of a dbus path and listens for PropertiesChanged\n\t    signals. When a signal arrives, parse it and unpack the key/value changes\n\t    into traditional events, then pass it to the original eventCallback\n\t    method. \"\"\"",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusRootTracker",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class VeDbusRootTracker(object):\n\t\"\"\" This tracks the root of a dbus path and listens for PropertiesChanged\n\t    signals. When a signal arrives, parse it and unpack the key/value changes\n\t    into traditional events, then pass it to the original eventCallback\n\t    method. \"\"\"\n\tdef __init__(self, bus, serviceName):\n\t\tself.importers = defaultdict(weakref.WeakSet)\n\t\tself.serviceName = serviceName\n\t\tself._match = bus.get_object(serviceName, '/', introspect=False).connect_to_signal(\n\t\t\t\"ItemsChanged\", weak_functor(self._items_changed_handler))",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemImport",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class VeDbusItemImport(object):\n\tdef __new__(cls, bus, serviceName, path, eventCallback=None, createsignal=True):\n\t\tinstance = object.__new__(cls)\n\t\t# If signal tracking should be done, also add to root tracker\n\t\tif createsignal:\n\t\t\tif \"_roots\" not in cls.__dict__:\n\t\t\t\tcls._roots = TrackerDict(lambda k: VeDbusRootTracker(bus, k))\n\t\treturn instance\n\t## Constructor\n\t# @param bus\t\t\tthe bus-object (SESSION or SYSTEM).",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusTreeExport",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class VeDbusTreeExport(dbus.service.Object):\n\tdef __init__(self, bus, objectPath, service):\n\t\tdbus.service.Object.__init__(self, bus, objectPath)\n\t\tself._service = service\n\t\tlogging.debug(\"VeDbusTreeExport %s has been created\" % objectPath)\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the call to .remove_from_connection,\n\t\t# so we need a copy.\n\t\tpath = self._get_path()\n\t\tif path is None:",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusRootExport",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class VeDbusRootExport(VeDbusTreeExport):\n\t@dbus.service.signal('com.victronenergy.BusItem', signature='a{sa{sv}}')\n\tdef ItemsChanged(self, changes):\n\t\tpass\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='a{sa{sv}}')\n\tdef GetItems(self):\n\t\treturn {\n\t\t\tpath: {\n\t\t\t\t'Value': wrap_dbus_value(item.local_get_value()),\n\t\t\t\t'Text': item.GetText() }",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "VeDbusItemExport",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class VeDbusItemExport(dbus.service.Object):\n\t## Constructor of VeDbusItemExport\n\t#\n\t# Use this object to export (publish), values on the dbus\n\t# Creates the dbus-object under the given dbus-service-name.\n\t# @param bus\t\t  The dbus object.\n\t# @param objectPath\t  The dbus-object-path.\n\t# @param value\t\t  Value to initialize ourselves with, defaults to None which means Invalid\n\t# @param description  String containing a description. Can be called over the dbus with GetDescription()\n\t# @param writeable\t  what would this do!? :).",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "weak_functor",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "class weak_functor:\n\tdef __init__(self, f):\n\t\tself._r = weakref.ref(f.__self__)\n\t\tself._f = weakref.ref(f.__func__)\n\tdef __call__(self, *args, **kargs):\n\t\tr = self._r()\n\t\tf = self._f()\n\t\tif r == None or f == None:\n\t\t\treturn\n\t\tf(r, *args, **kargs)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusobjects",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusobjects = {}\n\t\tself._dbusnodes = {}\n\t\tself._ratelimiters = []\n\t\tself._dbusname = None\n\t\tself.name = servicename\n\t\t# dict containing the onchange callbacks, for each object. Object path is the key\n\t\tself._onchangecallbacks = {}\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusnodes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusnodes = {}\n\t\tself._ratelimiters = []\n\t\tself._dbusname = None\n\t\tself.name = servicename\n\t\t# dict containing the onchange callbacks, for each object. Object path is the key\n\t\tself._onchangecallbacks = {}\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..\n\t\tself.dbusconn = self._dbusconn",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._ratelimiters",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._ratelimiters = []\n\t\tself._dbusname = None\n\t\tself.name = servicename\n\t\t# dict containing the onchange callbacks, for each object. Object path is the key\n\t\tself._onchangecallbacks = {}\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..\n\t\tself.dbusconn = self._dbusconn\n\t\t# Add the root item that will return all items as a tree",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusname",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusname = None\n\t\tself.name = servicename\n\t\t# dict containing the onchange callbacks, for each object. Object path is the key\n\t\tself._onchangecallbacks = {}\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..\n\t\tself.dbusconn = self._dbusconn\n\t\t# Add the root item that will return all items as a tree\n\t\tself._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.name = servicename\n\t\t# dict containing the onchange callbacks, for each object. Object path is the key\n\t\tself._onchangecallbacks = {}\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..\n\t\tself.dbusconn = self._dbusconn\n\t\t# Add the root item that will return all items as a tree\n\t\tself._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)\n\t\t# Immediately register the service unless requested not to",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._onchangecallbacks",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._onchangecallbacks = {}\n\t\t# Connect to session bus whenever present, else use the system bus\n\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..\n\t\tself.dbusconn = self._dbusconn\n\t\t# Add the root item that will return all items as a tree\n\t\tself._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)\n\t\t# Immediately register the service unless requested not to\n\t\tif register is None:\n\t\t\tlogging.warning(\"USING OUTDATED REGISTRATION METHOD!\")",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusconn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusconn = bus or (dbus.SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else dbus.SystemBus())\n\t\t# make the dbus connection available to outside, could make this a true property instead, but ach..\n\t\tself.dbusconn = self._dbusconn\n\t\t# Add the root item that will return all items as a tree\n\t\tself._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)\n\t\t# Immediately register the service unless requested not to\n\t\tif register is None:\n\t\t\tlogging.warning(\"USING OUTDATED REGISTRATION METHOD!\")\n\t\t\tlogging.warning(\"Please set register=False, then call the register method \"\n\t\t\t\t\"after adding all mandatory paths. See \"",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.dbusconn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.dbusconn = self._dbusconn\n\t\t# Add the root item that will return all items as a tree\n\t\tself._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)\n\t\t# Immediately register the service unless requested not to\n\t\tif register is None:\n\t\t\tlogging.warning(\"USING OUTDATED REGISTRATION METHOD!\")\n\t\t\tlogging.warning(\"Please set register=False, then call the register method \"\n\t\t\t\t\"after adding all mandatory paths. See \"\n\t\t\t\t\"https://github.com/victronenergy/venus/wiki/dbus-api\")\n\t\t\tself.register()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusnodes['/']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusnodes['/'] = VeDbusRootExport(self._dbusconn, '/', self)\n\t\t# Immediately register the service unless requested not to\n\t\tif register is None:\n\t\t\tlogging.warning(\"USING OUTDATED REGISTRATION METHOD!\")\n\t\t\tlogging.warning(\"Please set register=False, then call the register method \"\n\t\t\t\t\"after adding all mandatory paths. See \"\n\t\t\t\t\"https://github.com/victronenergy/venus/wiki/dbus-api\")\n\t\t\tself.register()\n\t\telif register:\n\t\t\tself.register()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusname",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusname = dbus.service.BusName(self.name, self._dbusconn, do_not_queue=True)\n\t\tlogging.info(\"registered ourselves on D-Bus as %s\" % self.name)\n\t# To force immediate deregistering of this dbus service and all its object paths, explicitly\n\t# call __del__().\n\tdef __del__(self):\n\t\tfor node in list(self._dbusnodes.values()):\n\t\t\tnode.__del__()\n\t\tself._dbusnodes.clear()\n\t\tfor item in list(self._dbusobjects.values()):\n\t\t\titem.__del__()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusname",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusname = None\n\tdef get_name(self):\n\t\treturn self._dbusname.get_name()\n\t# @param callbackonchange\tfunction that will be called when this value is changed. First parameter will\n\t#\t\t\t\t\t\t\tbe the path of the object, second the new value. This callback should return\n\t#\t\t\t\t\t\t\tTrue to accept the change, False to reject it.\n\tdef add_path(self, path, value, description=\"\", writeable=False,\n\t\t\t\t\tonchangecallback=None, gettextcallback=None, valuetype=None, itemtype=None):\n\t\tif onchangecallback is not None:\n\t\t\tself._onchangecallbacks[path] = onchangecallback",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._onchangecallbacks[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tself._onchangecallbacks[path] = onchangecallback\n\t\titemtype = itemtype or VeDbusItemExport\n\t\titem = itemtype(self._dbusconn, path, value, description, writeable,\n\t\t\t\tself._value_changed, gettextcallback, deletecallback=self._item_deleted, valuetype=valuetype)\n\t\tspl = path.split('/')\n\t\tfor i in range(2, len(spl)):\n\t\t\tsubPath = '/'.join(spl[:i])\n\t\t\tif subPath not in self._dbusnodes and subPath not in self._dbusobjects:\n\t\t\t\tself._dbusnodes[subPath] = VeDbusTreeExport(self._dbusconn, subPath, self)\n\t\tself._dbusobjects[path] = item",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\titemtype",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\titemtype = itemtype or VeDbusItemExport\n\t\titem = itemtype(self._dbusconn, path, value, description, writeable,\n\t\t\t\tself._value_changed, gettextcallback, deletecallback=self._item_deleted, valuetype=valuetype)\n\t\tspl = path.split('/')\n\t\tfor i in range(2, len(spl)):\n\t\t\tsubPath = '/'.join(spl[:i])\n\t\t\tif subPath not in self._dbusnodes and subPath not in self._dbusobjects:\n\t\t\t\tself._dbusnodes[subPath] = VeDbusTreeExport(self._dbusconn, subPath, self)\n\t\tself._dbusobjects[path] = item\n\t\tlogging.debug('added %s with start value %s. Writeable is %s' % (path, value, writeable))",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\titem",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\titem = itemtype(self._dbusconn, path, value, description, writeable,\n\t\t\t\tself._value_changed, gettextcallback, deletecallback=self._item_deleted, valuetype=valuetype)\n\t\tspl = path.split('/')\n\t\tfor i in range(2, len(spl)):\n\t\t\tsubPath = '/'.join(spl[:i])\n\t\t\tif subPath not in self._dbusnodes and subPath not in self._dbusobjects:\n\t\t\t\tself._dbusnodes[subPath] = VeDbusTreeExport(self._dbusconn, subPath, self)\n\t\tself._dbusobjects[path] = item\n\t\tlogging.debug('added %s with start value %s. Writeable is %s' % (path, value, writeable))\n\t\treturn item",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tspl",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tspl = path.split('/')\n\t\tfor i in range(2, len(spl)):\n\t\t\tsubPath = '/'.join(spl[:i])\n\t\t\tif subPath not in self._dbusnodes and subPath not in self._dbusobjects:\n\t\t\t\tself._dbusnodes[subPath] = VeDbusTreeExport(self._dbusconn, subPath, self)\n\t\tself._dbusobjects[path] = item\n\t\tlogging.debug('added %s with start value %s. Writeable is %s' % (path, value, writeable))\n\t\treturn item\n\t# Add the mandatory paths, as per victron dbus api doc\n\tdef add_mandatory_paths(self, processname, processversion, connection,",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tsubPath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tsubPath = '/'.join(spl[:i])\n\t\t\tif subPath not in self._dbusnodes and subPath not in self._dbusobjects:\n\t\t\t\tself._dbusnodes[subPath] = VeDbusTreeExport(self._dbusconn, subPath, self)\n\t\tself._dbusobjects[path] = item\n\t\tlogging.debug('added %s with start value %s. Writeable is %s' % (path, value, writeable))\n\t\treturn item\n\t# Add the mandatory paths, as per victron dbus api doc\n\tdef add_mandatory_paths(self, processname, processversion, connection,\n\t\t\tdeviceinstance, productid, productname, firmwareversion, hardwareversion, connected):\n\t\tself.add_path('/Mgmt/ProcessName', processname)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself._dbusnodes[subPath]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tself._dbusnodes[subPath] = VeDbusTreeExport(self._dbusconn, subPath, self)\n\t\tself._dbusobjects[path] = item\n\t\tlogging.debug('added %s with start value %s. Writeable is %s' % (path, value, writeable))\n\t\treturn item\n\t# Add the mandatory paths, as per victron dbus api doc\n\tdef add_mandatory_paths(self, processname, processversion, connection,\n\t\t\tdeviceinstance, productid, productname, firmwareversion, hardwareversion, connected):\n\t\tself.add_path('/Mgmt/ProcessName', processname)\n\t\tself.add_path('/Mgmt/ProcessVersion', processversion)\n\t\tself.add_path('/Mgmt/Connection', connection)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._dbusobjects[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._dbusobjects[path] = item\n\t\tlogging.debug('added %s with start value %s. Writeable is %s' % (path, value, writeable))\n\t\treturn item\n\t# Add the mandatory paths, as per victron dbus api doc\n\tdef add_mandatory_paths(self, processname, processversion, connection,\n\t\t\tdeviceinstance, productid, productname, firmwareversion, hardwareversion, connected):\n\t\tself.add_path('/Mgmt/ProcessName', processname)\n\t\tself.add_path('/Mgmt/ProcessVersion', processversion)\n\t\tself.add_path('/Mgmt/Connection', connection)\n\t\t# Create rest of the mandatory objects",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tl",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tl = ServiceContext(self)\n\t\tself._ratelimiters.append(l)\n\t\treturn l\n\tdef __exit__(self, *exc):\n\t\t# pop off the top one and flush it. If with statements are nested\n\t\t# then each exit flushes its own part.\n\t\tif self._ratelimiters:\n\t\t\tself._ratelimiters.pop().flush()\nclass ServiceContext(object):\n\tdef __init__(self, parent):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.parent",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.parent = parent\n\t\tself.changes = {}\n\tdef __contains__(self, path):\n\t\treturn path in self.parent\n\tdef __getitem__(self, path):\n\t\treturn self.parent[path]\n\tdef __setitem__(self, path, newvalue):\n\t\tc = self.parent._dbusobjects[path]._local_set_value(newvalue)\n\t\tif c is not None:\n\t\t\tself.changes[path] = c",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.changes",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.changes = {}\n\tdef __contains__(self, path):\n\t\treturn path in self.parent\n\tdef __getitem__(self, path):\n\t\treturn self.parent[path]\n\tdef __setitem__(self, path, newvalue):\n\t\tc = self.parent._dbusobjects[path]._local_set_value(newvalue)\n\t\tif c is not None:\n\t\t\tself.changes[path] = c\n\tdef __delitem__(self, path):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tc = self.parent._dbusobjects[path]._local_set_value(newvalue)\n\t\tif c is not None:\n\t\t\tself.changes[path] = c\n\tdef __delitem__(self, path):\n\t\tif path in self.changes:\n\t\t\tdel self.changes[path]\n\t\tdel self.parent[path]\n\tdef flush(self):\n\t\tif self.changes:\n\t\t\tself.parent._dbusnodes['/'].ItemsChanged(self.changes)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.changes[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tself.changes[path] = c\n\tdef __delitem__(self, path):\n\t\tif path in self.changes:\n\t\t\tdel self.changes[path]\n\t\tdel self.parent[path]\n\tdef flush(self):\n\t\tif self.changes:\n\t\t\tself.parent._dbusnodes['/'].ItemsChanged(self.changes)\n\t\t\tself.changes.clear()\n\tdef add_path(self, path, value, *args, **kwargs):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.changes[path]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.changes[path] = {\n\t\t\t'Value': wrap_dbus_value(value),\n\t\t\t'Text': self.parent._dbusobjects[path].GetText()\n\t\t}\n\tdef del_tree(self, root):\n\t\troot = root.rstrip('/')\n\t\tfor p in list(self.parent._dbusobjects.keys()):\n\t\t\tif p == root or p.startswith(root + '/'):\n\t\t\t\tself[p] = None\n\t\t\t\tself.parent._dbusobjects[p].__del__()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\troot",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\troot = root.rstrip('/')\n\t\tfor p in list(self.parent._dbusobjects.keys()):\n\t\t\tif p == root or p.startswith(root + '/'):\n\t\t\t\tself[p] = None\n\t\t\t\tself.parent._dbusobjects[p].__del__()\n\tdef get_name(self):\n\t\treturn self.parent.get_name()\nclass TrackerDict(defaultdict):\n\t\"\"\" Same as defaultdict, but passes the key to default_factory. \"\"\"\n\tdef __missing__(self, key):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself[p]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tself[p] = None\n\t\t\t\tself.parent._dbusobjects[p].__del__()\n\tdef get_name(self):\n\t\treturn self.parent.get_name()\nclass TrackerDict(defaultdict):\n\t\"\"\" Same as defaultdict, but passes the key to default_factory. \"\"\"\n\tdef __missing__(self, key):\n\t\tself[key] = x = self.default_factory(key)\n\t\treturn x\nclass VeDbusRootTracker(object):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself[key]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself[key] = x = self.default_factory(key)\n\t\treturn x\nclass VeDbusRootTracker(object):\n\t\"\"\" This tracks the root of a dbus path and listens for PropertiesChanged\n\t    signals. When a signal arrives, parse it and unpack the key/value changes\n\t    into traditional events, then pass it to the original eventCallback\n\t    method. \"\"\"\n\tdef __init__(self, bus, serviceName):\n\t\tself.importers = defaultdict(weakref.WeakSet)\n\t\tself.serviceName = serviceName",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.importers",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.importers = defaultdict(weakref.WeakSet)\n\t\tself.serviceName = serviceName\n\t\tself._match = bus.get_object(serviceName, '/', introspect=False).connect_to_signal(\n\t\t\t\"ItemsChanged\", weak_functor(self._items_changed_handler))\n\tdef __del__(self):\n\t\tself._match.remove()\n\t\tself._match = None\n\tdef add(self, i):\n\t\tself.importers[i.path].add(i)\n\tdef _items_changed_handler(self, items):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.serviceName",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.serviceName = serviceName\n\t\tself._match = bus.get_object(serviceName, '/', introspect=False).connect_to_signal(\n\t\t\t\"ItemsChanged\", weak_functor(self._items_changed_handler))\n\tdef __del__(self):\n\t\tself._match.remove()\n\t\tself._match = None\n\tdef add(self, i):\n\t\tself.importers[i.path].add(i)\n\tdef _items_changed_handler(self, items):\n\t\tif not isinstance(items, dict):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._match",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._match = bus.get_object(serviceName, '/', introspect=False).connect_to_signal(\n\t\t\t\"ItemsChanged\", weak_functor(self._items_changed_handler))\n\tdef __del__(self):\n\t\tself._match.remove()\n\t\tself._match = None\n\tdef add(self, i):\n\t\tself.importers[i.path].add(i)\n\tdef _items_changed_handler(self, items):\n\t\tif not isinstance(items, dict):\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._match",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._match = None\n\tdef add(self, i):\n\t\tself.importers[i.path].add(i)\n\tdef _items_changed_handler(self, items):\n\t\tif not isinstance(items, dict):\n\t\t\treturn\n\t\tfor path, changes in items.items():\n\t\t\ttry:\n\t\t\t\tv = changes['Value']\n\t\t\texcept KeyError:",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tv = changes['Value']\n\t\t\texcept KeyError:\n\t\t\t\tcontinue\n\t\t\ttry:\n\t\t\t\tt = changes['Text']\n\t\t\texcept KeyError:\n\t\t\t\tt = str(unwrap_dbus_value(v))\n\t\t\tfor i in self.importers.get(path, ()):\n\t\t\t\ti._properties_changed_handler({'Value': v, 'Text': t})\n\"\"\"",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tt = changes['Text']\n\t\t\texcept KeyError:\n\t\t\t\tt = str(unwrap_dbus_value(v))\n\t\t\tfor i in self.importers.get(path, ()):\n\t\t\t\ti._properties_changed_handler({'Value': v, 'Text': t})\n\"\"\"\nImporting basics:\n\t- If when we power up, the D-Bus service does not exist, or it does exist and the path does not\n\t  yet exist, still subscribe to a signal: as soon as it comes online it will send a signal with its\n\t  initial value, which VeDbusItemImport will receive and use to update local cache. And, when set,",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tt",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tt = str(unwrap_dbus_value(v))\n\t\t\tfor i in self.importers.get(path, ()):\n\t\t\t\ti._properties_changed_handler({'Value': v, 'Text': t})\n\"\"\"\nImporting basics:\n\t- If when we power up, the D-Bus service does not exist, or it does exist and the path does not\n\t  yet exist, still subscribe to a signal: as soon as it comes online it will send a signal with its\n\t  initial value, which VeDbusItemImport will receive and use to update local cache. And, when set,\n\t  call the eventCallback.\n\t- If when we power up, save it",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tinstance",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tinstance = object.__new__(cls)\n\t\t# If signal tracking should be done, also add to root tracker\n\t\tif createsignal:\n\t\t\tif \"_roots\" not in cls.__dict__:\n\t\t\t\tcls._roots = TrackerDict(lambda k: VeDbusRootTracker(bus, k))\n\t\treturn instance\n\t## Constructor\n\t# @param bus\t\t\tthe bus-object (SESSION or SYSTEM).\n\t# @param serviceName\tthe dbus-service-name (string), for example 'com.victronenergy.battery.ttyO1'\n\t# @param path\t\t\tthe object-path, for example '/Dc/V'",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcls._roots",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tcls._roots = TrackerDict(lambda k: VeDbusRootTracker(bus, k))\n\t\treturn instance\n\t## Constructor\n\t# @param bus\t\t\tthe bus-object (SESSION or SYSTEM).\n\t# @param serviceName\tthe dbus-service-name (string), for example 'com.victronenergy.battery.ttyO1'\n\t# @param path\t\t\tthe object-path, for example '/Dc/V'\n\t# @param eventCallback\tfunction that you want to be called on a value change\n\t# @param createSignal   only set this to False if you use this function to one time read a value. When\n\t#\t\t\t\t\t\tleaving it to True, make sure to also subscribe to the NameOwnerChanged signal\n\t#\t\t\t\t\t\telsewhere. See also note some 15 lines up.",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._serviceName",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._serviceName = serviceName\n\t\tself._path = path\n\t\tself._match = None\n\t\t# TODO: _proxy is being used in settingsdevice.py, make a getter for that\n\t\tself._proxy = bus.get_object(serviceName, path, introspect=False)\n\t\tself.eventCallback = eventCallback\n\t\tassert eventCallback is None or createsignal == True\n\t\tif createsignal:\n\t\t\tself._match = self._proxy.connect_to_signal(\n\t\t\t\t\"PropertiesChanged\", weak_functor(self._properties_changed_handler))",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._path",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._path = path\n\t\tself._match = None\n\t\t# TODO: _proxy is being used in settingsdevice.py, make a getter for that\n\t\tself._proxy = bus.get_object(serviceName, path, introspect=False)\n\t\tself.eventCallback = eventCallback\n\t\tassert eventCallback is None or createsignal == True\n\t\tif createsignal:\n\t\t\tself._match = self._proxy.connect_to_signal(\n\t\t\t\t\"PropertiesChanged\", weak_functor(self._properties_changed_handler))\n\t\t\tself._roots[serviceName].add(self)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._match",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._match = None\n\t\t# TODO: _proxy is being used in settingsdevice.py, make a getter for that\n\t\tself._proxy = bus.get_object(serviceName, path, introspect=False)\n\t\tself.eventCallback = eventCallback\n\t\tassert eventCallback is None or createsignal == True\n\t\tif createsignal:\n\t\t\tself._match = self._proxy.connect_to_signal(\n\t\t\t\t\"PropertiesChanged\", weak_functor(self._properties_changed_handler))\n\t\t\tself._roots[serviceName].add(self)\n\t\t# store the current value in _cachedvalue. When it doesn't exists set _cachedvalue to",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._proxy",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._proxy = bus.get_object(serviceName, path, introspect=False)\n\t\tself.eventCallback = eventCallback\n\t\tassert eventCallback is None or createsignal == True\n\t\tif createsignal:\n\t\t\tself._match = self._proxy.connect_to_signal(\n\t\t\t\t\"PropertiesChanged\", weak_functor(self._properties_changed_handler))\n\t\t\tself._roots[serviceName].add(self)\n\t\t# store the current value in _cachedvalue. When it doesn't exists set _cachedvalue to\n\t\t# None, same as when a value is invalid\n\t\tself._cachedvalue = None",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself.eventCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself.eventCallback = eventCallback\n\t\tassert eventCallback is None or createsignal == True\n\t\tif createsignal:\n\t\t\tself._match = self._proxy.connect_to_signal(\n\t\t\t\t\"PropertiesChanged\", weak_functor(self._properties_changed_handler))\n\t\t\tself._roots[serviceName].add(self)\n\t\t# store the current value in _cachedvalue. When it doesn't exists set _cachedvalue to\n\t\t# None, same as when a value is invalid\n\t\tself._cachedvalue = None\n\t\ttry:",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._match",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tself._match = self._proxy.connect_to_signal(\n\t\t\t\t\"PropertiesChanged\", weak_functor(self._properties_changed_handler))\n\t\t\tself._roots[serviceName].add(self)\n\t\t# store the current value in _cachedvalue. When it doesn't exists set _cachedvalue to\n\t\t# None, same as when a value is invalid\n\t\tself._cachedvalue = None\n\t\ttry:\n\t\t\tv = self._proxy.GetValue()\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tpass",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._cachedvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._cachedvalue = None\n\t\ttry:\n\t\t\tv = self._proxy.GetValue()\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tpass\n\t\telse:\n\t\t\tself._cachedvalue = unwrap_dbus_value(v)\n\tdef __del__(self):\n\t\tif self._match is not None:\n\t\t\tself._match.remove()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tv = self._proxy.GetValue()\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tpass\n\t\telse:\n\t\t\tself._cachedvalue = unwrap_dbus_value(v)\n\tdef __del__(self):\n\t\tif self._match is not None:\n\t\t\tself._match.remove()\n\t\t\tself._match = None\n\t\tself._proxy = None",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._cachedvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tself._cachedvalue = unwrap_dbus_value(v)\n\tdef __del__(self):\n\t\tif self._match is not None:\n\t\t\tself._match.remove()\n\t\t\tself._match = None\n\t\tself._proxy = None\n\tdef _refreshcachedvalue(self):\n\t\tself._cachedvalue = unwrap_dbus_value(self._proxy.GetValue())\n\t## Returns the path as a string, for example '/AC/L1/V'\n\t@property",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._match",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tself._match = None\n\t\tself._proxy = None\n\tdef _refreshcachedvalue(self):\n\t\tself._cachedvalue = unwrap_dbus_value(self._proxy.GetValue())\n\t## Returns the path as a string, for example '/AC/L1/V'\n\t@property\n\tdef path(self):\n\t\treturn self._path\n\t## Returns the dbus service name as a string, for example com.victronenergy.vebus.ttyO1\n\t@property",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._proxy",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._proxy = None\n\tdef _refreshcachedvalue(self):\n\t\tself._cachedvalue = unwrap_dbus_value(self._proxy.GetValue())\n\t## Returns the path as a string, for example '/AC/L1/V'\n\t@property\n\tdef path(self):\n\t\treturn self._path\n\t## Returns the dbus service name as a string, for example com.victronenergy.vebus.ttyO1\n\t@property\n\tdef serviceName(self):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._cachedvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._cachedvalue = unwrap_dbus_value(self._proxy.GetValue())\n\t## Returns the path as a string, for example '/AC/L1/V'\n\t@property\n\tdef path(self):\n\t\treturn self._path\n\t## Returns the dbus service name as a string, for example com.victronenergy.vebus.ttyO1\n\t@property\n\tdef serviceName(self):\n\t\treturn self._serviceName\n\t## Returns the value of the dbus-item.",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tr = self._proxy.SetValue(wrap_dbus_value(newvalue))\n\t\t# instead of just saving the value, go to the dbus and get it. So we have the right type etc.\n\t\tif r == 0:\n\t\t\tself._refreshcachedvalue()\n\t\treturn r\n\t## Resets the item to its default value\n\tdef set_default(self):\n\t\tself._proxy.SetDefault()\n\t\tself._refreshcachedvalue()\n\t## Returns the text representation of the value.",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tr = False\n\t\ttry:\n\t\t\tr = self._proxy.GetValue()\n\t\t\tr = True\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tpass\n\t\treturn r\n\t## callback for the trigger-event.\n\t# @param eventCallback the event-callback-function.\n\t@property",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tr = self._proxy.GetValue()\n\t\t\tr = True\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tpass\n\t\treturn r\n\t## callback for the trigger-event.\n\t# @param eventCallback the event-callback-function.\n\t@property\n\tdef eventCallback(self):\n\t\treturn self._eventCallback",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tr = True\n\t\texcept dbus.exceptions.DBusException:\n\t\t\tpass\n\t\treturn r\n\t## callback for the trigger-event.\n\t# @param eventCallback the event-callback-function.\n\t@property\n\tdef eventCallback(self):\n\t\treturn self._eventCallback\n\t@eventCallback.setter",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._eventCallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._eventCallback = eventCallback\n\t## Is called when the value of the imported bus-item changes.\n\t# Stores the new value in our local cache, and calls the eventCallback, if set.\n\tdef _properties_changed_handler(self, changes):\n\t\tif \"Value\" in changes:\n\t\t\tchanges['Value'] = unwrap_dbus_value(changes['Value'])\n\t\t\tself._cachedvalue = changes['Value']\n\t\t\tif self._eventCallback:\n\t\t\t\t# The reason behind this try/except is to prevent errors silently ending up the an error\n\t\t\t\t# handler in the dbus code.",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tchanges['Value']",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tchanges['Value'] = unwrap_dbus_value(changes['Value'])\n\t\t\tself._cachedvalue = changes['Value']\n\t\t\tif self._eventCallback:\n\t\t\t\t# The reason behind this try/except is to prevent errors silently ending up the an error\n\t\t\t\t# handler in the dbus code.\n\t\t\t\ttry:\n\t\t\t\t\tself._eventCallback(self._serviceName, self._path, changes)\n\t\t\t\texcept:\n\t\t\t\t\ttraceback.print_exc()\n\t\t\t\t\tos._exit(1)  # sys.exit() is not used, since that also throws an exception",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._cachedvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\tself._cachedvalue = changes['Value']\n\t\t\tif self._eventCallback:\n\t\t\t\t# The reason behind this try/except is to prevent errors silently ending up the an error\n\t\t\t\t# handler in the dbus code.\n\t\t\t\ttry:\n\t\t\t\t\tself._eventCallback(self._serviceName, self._path, changes)\n\t\t\t\texcept:\n\t\t\t\t\ttraceback.print_exc()\n\t\t\t\t\tos._exit(1)  # sys.exit() is not used, since that also throws an exception\nclass VeDbusTreeExport(dbus.service.Object):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._service",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._service = service\n\t\tlogging.debug(\"VeDbusTreeExport %s has been created\" % objectPath)\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the call to .remove_from_connection,\n\t\t# so we need a copy.\n\t\tpath = self._get_path()\n\t\tif path is None:\n\t\t\treturn\n\t\tself.remove_from_connection()\n\t\tlogging.debug(\"VeDbusTreeExport %s has been removed\" % path)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tpath = self._get_path()\n\t\tif path is None:\n\t\t\treturn\n\t\tself.remove_from_connection()\n\t\tlogging.debug(\"VeDbusTreeExport %s has been removed\" % path)\n\tdef _get_path(self):\n\t\tif len(self._locations) == 0:\n\t\t\treturn None\n\t\treturn self._locations[0][1]\n\tdef _get_value_handler(self, path, get_text=False):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tr = {}\n\t\tpx = path\n\t\tif not px.endswith('/'):\n\t\t\tpx += '/'\n\t\tfor p, item in self._service._dbusobjects.items():\n\t\t\tif p.startswith(px):\n\t\t\t\tv = item.GetText() if get_text else wrap_dbus_value(item.local_get_value())\n\t\t\t\tr[p[len(px):]] = v\n\t\tlogging.debug(r)\n\t\treturn r",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tpx",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tpx = path\n\t\tif not px.endswith('/'):\n\t\t\tpx += '/'\n\t\tfor p, item in self._service._dbusobjects.items():\n\t\t\tif p.startswith(px):\n\t\t\t\tv = item.GetText() if get_text else wrap_dbus_value(item.local_get_value())\n\t\t\t\tr[p[len(px):]] = v\n\t\tlogging.debug(r)\n\t\treturn r\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='v')",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tv",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tv = item.GetText() if get_text else wrap_dbus_value(item.local_get_value())\n\t\t\t\tr[p[len(px):]] = v\n\t\tlogging.debug(r)\n\t\treturn r\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='v')\n\tdef GetValue(self):\n\t\tvalue = self._get_value_handler(self._get_path())\n\t\treturn dbus.Dictionary(value, signature=dbus.Signature('sv'), variant_level=1)\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='v')\n\tdef GetText(self):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tr[p[len(px):]]",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tr[p[len(px):]] = v\n\t\tlogging.debug(r)\n\t\treturn r\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='v')\n\tdef GetValue(self):\n\t\tvalue = self._get_value_handler(self._get_path())\n\t\treturn dbus.Dictionary(value, signature=dbus.Signature('sv'), variant_level=1)\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='v')\n\tdef GetText(self):\n\t\treturn self._get_value_handler(self._get_path(), True)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tvalue = self._get_value_handler(self._get_path())\n\t\treturn dbus.Dictionary(value, signature=dbus.Signature('sv'), variant_level=1)\n\t@dbus.service.method('com.victronenergy.BusItem', out_signature='v')\n\tdef GetText(self):\n\t\treturn self._get_value_handler(self._get_path(), True)\n\tdef local_get_value(self):\n\t\treturn self._get_value_handler(self.path)\nclass VeDbusRootExport(VeDbusTreeExport):\n\t@dbus.service.signal('com.victronenergy.BusItem', signature='a{sa{sv}}')\n\tdef ItemsChanged(self, changes):",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._onchangecallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._onchangecallback = onchangecallback\n\t\tself._gettextcallback = gettextcallback\n\t\tself._value = value\n\t\tself._description = description\n\t\tself._writeable = writeable\n\t\tself._deletecallback = deletecallback\n\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._gettextcallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._gettextcallback = gettextcallback\n\t\tself._value = value\n\t\tself._description = description\n\t\tself._writeable = writeable\n\t\tself._deletecallback = deletecallback\n\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the\n\t\t# call to .remove_from_connection, so we need a copy.",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._value",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._value = value\n\t\tself._description = description\n\t\tself._writeable = writeable\n\t\tself._deletecallback = deletecallback\n\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the\n\t\t# call to .remove_from_connection, so we need a copy.\n\t\tpath = self._get_path()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._description",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._description = description\n\t\tself._writeable = writeable\n\t\tself._deletecallback = deletecallback\n\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the\n\t\t# call to .remove_from_connection, so we need a copy.\n\t\tpath = self._get_path()\n\t\tif path == None:",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._writeable",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._writeable = writeable\n\t\tself._deletecallback = deletecallback\n\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the\n\t\t# call to .remove_from_connection, so we need a copy.\n\t\tpath = self._get_path()\n\t\tif path == None:\n\t\t\treturn",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._deletecallback",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._deletecallback = deletecallback\n\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the\n\t\t# call to .remove_from_connection, so we need a copy.\n\t\tpath = self._get_path()\n\t\tif path == None:\n\t\t\treturn\n\t\tif self._deletecallback is not None:",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._type",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._type = valuetype\n\t# To force immediate deregistering of this dbus object, explicitly call __del__().\n\tdef __del__(self):\n\t\t# self._get_path() will raise an exception when retrieved after the\n\t\t# call to .remove_from_connection, so we need a copy.\n\t\tpath = self._get_path()\n\t\tif path == None:\n\t\t\treturn\n\t\tif self._deletecallback is not None:\n\t\t\tself._deletecallback(path)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tpath = self._get_path()\n\t\tif path == None:\n\t\t\treturn\n\t\tif self._deletecallback is not None:\n\t\t\tself._deletecallback(path)\n\t\tself.remove_from_connection()\n\t\tlogging.debug(\"VeDbusItemExport %s has been removed\" % path)\n\tdef _get_path(self):\n\t\tif len(self._locations) == 0:\n\t\t\treturn None",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tchanges",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tchanges = self._local_set_value(newvalue)\n\t\tif changes is not None:\n\t\t\tself.PropertiesChanged(changes)\n\tdef _local_set_value(self, newvalue):\n\t\tif self._value == newvalue:\n\t\t\treturn None\n\t\tself._value = newvalue\n\t\treturn {\n\t\t\t'Value': wrap_dbus_value(newvalue),\n\t\t\t'Text': self.GetText()",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._value",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._value = newvalue\n\t\treturn {\n\t\t\t'Value': wrap_dbus_value(newvalue),\n\t\t\t'Text': self.GetText()\n\t\t}\n\tdef local_get_value(self):\n\t\treturn self._value\n\t# ==== ALL FUNCTIONS BELOW THIS LINE WILL BE CALLED BY OTHER PROCESSES OVER THE DBUS ====\n\t## Dbus exported method SetValue\n\t# Function is called over the D-Bus by other process. It will first check (via callback) if new",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tnewvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tnewvalue = unwrap_dbus_value(newvalue)\n\t\t# If value type is enforced, cast it. If the type can be coerced\n\t\t# python will do it for us. This allows ints to become floats,\n\t\t# or bools to become ints. Additionally also allow None, so that\n\t\t# a path may be invalidated.\n\t\tif self._type is not None and newvalue is not None:\n\t\t\ttry:\n\t\t\t\tnewvalue = self._type(newvalue)\n\t\t\texcept (ValueError, TypeError):\n\t\t\t\treturn 1 # NOT OK",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnewvalue",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\t\t\tnewvalue = self._type(newvalue)\n\t\t\texcept (ValueError, TypeError):\n\t\t\t\treturn 1 # NOT OK\n\t\tif newvalue == self._value:\n\t\t\treturn 0  # OK\n\t\t# call the callback given to us, and check if new value is OK.\n\t\tif (self._onchangecallback is None or\n\t\t\t\t(self._onchangecallback is not None and self._onchangecallback(self.__dbus_object_path__, newvalue))):\n\t\t\tself.local_set_value(newvalue)\n\t\t\treturn 0  # OK",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._r",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._r = weakref.ref(f.__self__)\n\t\tself._f = weakref.ref(f.__func__)\n\tdef __call__(self, *args, **kargs):\n\t\tr = self._r()\n\t\tf = self._f()\n\t\tif r == None or f == None:\n\t\t\treturn\n\t\tf(r, *args, **kargs)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tself._f",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tself._f = weakref.ref(f.__func__)\n\tdef __call__(self, *args, **kargs):\n\t\tr = self._r()\n\t\tf = self._f()\n\t\tif r == None or f == None:\n\t\t\treturn\n\t\tf(r, *args, **kargs)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tr = self._r()\n\t\tf = self._f()\n\t\tif r == None or f == None:\n\t\t\treturn\n\t\tf(r, *args, **kargs)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.velib_python.vedbus",
        "description": "dbus-serialbattery.ext.velib_python.vedbus",
        "peekOfCode": "\t\tf = self._f()\n\t\tif r == None or f == None:\n\t\t\treturn\n\t\tf(r, *args, **kargs)",
        "detail": "dbus-serialbattery.ext.velib_python.vedbus",
        "documentation": {}
    },
    {
        "label": "_AdapterFunctionCode",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "class _AdapterFunctionCode(CallableObjectProxy):\n    def __init__(self, wrapped_code, adapter_code):\n        super(_AdapterFunctionCode, self).__init__(wrapped_code)\n        self._self_adapter_code = adapter_code\n    @property\n    def co_argcount(self):\n        return self._self_adapter_code.co_argcount\n    @property\n    def co_code(self):\n        return self._self_adapter_code.co_code",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "_AdapterFunctionSurrogate",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "class _AdapterFunctionSurrogate(CallableObjectProxy):\n    def __init__(self, wrapped, adapter):\n        super(_AdapterFunctionSurrogate, self).__init__(wrapped)\n        self._self_adapter = adapter\n    @property\n    def __code__(self):\n        return _AdapterFunctionCode(self.__wrapped__.__code__,\n                self._self_adapter.__code__)\n    @property\n    def __defaults__(self):",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "_BoundAdapterWrapper",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "class _BoundAdapterWrapper(BoundFunctionWrapper):\n    @property\n    def __func__(self):\n        return _AdapterFunctionSurrogate(self.__wrapped__.__func__,\n                self._self_parent._self_adapter)\n    @property\n    def __signature__(self):\n        if 'signature' not in globals():\n            return self.__wrapped__.__signature__\n        else:",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "AdapterWrapper",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "class AdapterWrapper(FunctionWrapper):\n    __bound_function_wrapper__ = _BoundAdapterWrapper\n    def __init__(self, *args, **kwargs):\n        adapter = kwargs.pop('adapter')\n        super(AdapterWrapper, self).__init__(*args, **kwargs)\n        self._self_surrogate = _AdapterFunctionSurrogate(\n                self.__wrapped__, adapter)\n        self._self_adapter = adapter\n    @property\n    def __code__(self):",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "AdapterFactory",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "class AdapterFactory(object):\n    def __call__(self, wrapped):\n        raise NotImplementedError()\nclass DelegatedAdapterFactory(AdapterFactory):\n    def __init__(self, factory):\n        super(DelegatedAdapterFactory, self).__init__()\n        self.factory = factory\n    def __call__(self, wrapped):\n        return self.factory(wrapped)\nadapter_factory = DelegatedAdapterFactory",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "DelegatedAdapterFactory",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "class DelegatedAdapterFactory(AdapterFactory):\n    def __init__(self, factory):\n        super(DelegatedAdapterFactory, self).__init__()\n        self.factory = factory\n    def __call__(self, wrapped):\n        return self.factory(wrapped)\nadapter_factory = DelegatedAdapterFactory\n# Decorator for creating other decorators. This decorator and the\n# wrappers which they use are designed to properly preserve any name\n# attributes, function signatures etc, in addition to the wrappers",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "def decorator(wrapper=None, enabled=None, adapter=None, proxy=FunctionWrapper):\n    # The decorator should be supplied with a single positional argument\n    # which is the wrapper function to be used to implement the\n    # decorator. This may be preceded by a step whereby the keyword\n    # arguments are supplied to customise the behaviour of the\n    # decorator. The 'adapter' argument is used to optionally denote a\n    # separate function which is notionally used by an adapter\n    # decorator. In that case parts of the function '__code__' and\n    # '__defaults__' attributes are used from the adapter function\n    # rather than those of the wrapped function. This allows for the",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "synchronized",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "def synchronized(wrapped):\n    # Determine if being passed an object which is a synchronization\n    # primitive. We can't check by type for Lock, RLock, Semaphore etc,\n    # as the means of creating them isn't the type. Therefore use the\n    # existence of acquire() and release() methods. This is more\n    # extensible anyway as it allows custom synchronization mechanisms.\n    if hasattr(wrapped, 'acquire') and hasattr(wrapped, 'release'):\n        # We remember what the original lock is and then return a new\n        # decorator which accesses and locks it. When returning the new\n        # decorator we wrap it with an object proxy so we can override",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "PY2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "PY2 = sys.version_info[0] == 2\nif PY2:\n    string_types = basestring,\n    def exec_(_code_, _globs_=None, _locs_=None):\n        \"\"\"Execute code in a namespace.\"\"\"\n        if _globs_ is None:\n            frame = sys._getframe(1)\n            _globs_ = frame.f_globals\n            if _locs_ is None:\n                _locs_ = frame.f_locals",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "adapter_factory",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "adapter_factory = DelegatedAdapterFactory\n# Decorator for creating other decorators. This decorator and the\n# wrappers which they use are designed to properly preserve any name\n# attributes, function signatures etc, in addition to the wrappers\n# themselves acting like a transparent proxy for the original wrapped\n# function so the wrapper is effectively indistinguishable from the\n# original wrapped function.\ndef decorator(wrapper=None, enabled=None, adapter=None, proxy=FunctionWrapper):\n    # The decorator should be supplied with a single positional argument\n    # which is the wrapper function to be used to implement the",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "synchronized._synchronized_meta_lock",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.decorators",
        "description": "dbus-serialbattery.ext.wrapt.decorators",
        "peekOfCode": "synchronized._synchronized_meta_lock = Lock()",
        "detail": "dbus-serialbattery.ext.wrapt.decorators",
        "documentation": {}
    },
    {
        "label": "_ImportHookLoader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "class _ImportHookLoader:\n    def load_module(self, fullname):\n        module = sys.modules[fullname]\n        notify_module_loaded(module)\n        return module\nclass _ImportHookChainedLoader(ObjectProxy):\n    def __init__(self, loader):\n        super(_ImportHookChainedLoader, self).__init__(loader)\n        if hasattr(loader, \"load_module\"):\n          self.__self_setattr__('load_module', self._self_load_module)",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "_ImportHookChainedLoader",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "class _ImportHookChainedLoader(ObjectProxy):\n    def __init__(self, loader):\n        super(_ImportHookChainedLoader, self).__init__(loader)\n        if hasattr(loader, \"load_module\"):\n          self.__self_setattr__('load_module', self._self_load_module)\n        if hasattr(loader, \"create_module\"):\n          self.__self_setattr__('create_module', self._self_create_module)\n        if hasattr(loader, \"exec_module\"):\n          self.__self_setattr__('exec_module', self._self_exec_module)\n    def _self_set_loader(self, module):",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "ImportHookFinder",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "class ImportHookFinder:\n    def __init__(self):\n        self.in_progress = {}\n    def find_module(self, fullname, path=None):\n        # If the module being imported is not one we have registered\n        # post import hooks for, we can return immediately. We will\n        # take no further part in the importing of this module.\n        with _post_import_hooks_lock:\n            if fullname not in _post_import_hooks:\n                return None",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "register_post_import_hook",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "def register_post_import_hook(hook, name):\n    # Create a deferred import hook if hook is a string name rather than\n    # a callable function.\n    if isinstance(hook, string_types):\n        hook = _create_import_hook_from_string(hook)\n    with _post_import_hooks_lock:\n        # Automatically install the import hook finder if it has not already\n        # been installed.\n        global _post_import_hooks_init\n        if not _post_import_hooks_init:",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "discover_post_import_hooks",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "def discover_post_import_hooks(group):\n    try:\n        import pkg_resources\n    except ImportError:\n        return\n    for entrypoint in pkg_resources.iter_entry_points(group=group):\n        callback = _create_import_hook_from_entrypoint(entrypoint)\n        register_post_import_hook(callback, entrypoint.name)\n# Indicate that a module has been loaded. Any post import hooks which\n# were registered against the target module will be invoked. If an",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "notify_module_loaded",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "def notify_module_loaded(module):\n    name = getattr(module, '__name__', None)\n    with _post_import_hooks_lock:\n        hooks = _post_import_hooks.pop(name, ())\n    # Note that the hook is called outside of the lock to avoid deadlocks if\n    # code run as a consequence of calling the module import hook in turn\n    # triggers a separate thread which tries to register an import hook.\n    for hook in hooks:\n        hook(module)\n# A custom module import finder. This intercepts attempts to import",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "when_imported",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "def when_imported(name):\n    def register(hook):\n        register_post_import_hook(hook, name)\n        return hook\n    return register",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "PY2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "PY2 = sys.version_info[0] == 2\nif PY2:\n    string_types = basestring,\n    find_spec = None\nelse:\n    string_types = str,\n    from importlib.util import find_spec\nfrom .__wrapt__ import ObjectProxy\n# The dictionary registering any post import hooks to be triggered once\n# the target module has been imported. Once a module has been imported",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "_post_import_hooks",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "_post_import_hooks = {}\n_post_import_hooks_init = False\n_post_import_hooks_lock = threading.RLock()\n# Register a new post import hook for the target module name. This\n# differs from the PEP-369 implementation in that it also allows the\n# hook function to be specified as a string consisting of the name of\n# the callback in the form 'module:function'. This will result in a\n# proxy callback being registered which will defer loading of the\n# specified module containing the callback function until required.\ndef _create_import_hook_from_string(name):",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "_post_import_hooks_init",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "_post_import_hooks_init = False\n_post_import_hooks_lock = threading.RLock()\n# Register a new post import hook for the target module name. This\n# differs from the PEP-369 implementation in that it also allows the\n# hook function to be specified as a string consisting of the name of\n# the callback in the form 'module:function'. This will result in a\n# proxy callback being registered which will defer loading of the\n# specified module containing the callback function until required.\ndef _create_import_hook_from_string(name):\n    def import_hook(module):",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "_post_import_hooks_lock",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.importer",
        "description": "dbus-serialbattery.ext.wrapt.importer",
        "peekOfCode": "_post_import_hooks_lock = threading.RLock()\n# Register a new post import hook for the target module name. This\n# differs from the PEP-369 implementation in that it also allows the\n# hook function to be specified as a string consisting of the name of\n# the callback in the form 'module:function'. This will result in a\n# proxy callback being registered which will defer loading of the\n# specified module containing the callback function until required.\ndef _create_import_hook_from_string(name):\n    def import_hook(module):\n        module_name, function = name.split(':')",
        "detail": "dbus-serialbattery.ext.wrapt.importer",
        "documentation": {}
    },
    {
        "label": "AttributeWrapper",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "class AttributeWrapper(object):\n    def __init__(self, attribute, factory, args, kwargs):\n        self.attribute = attribute\n        self.factory = factory\n        self.args = args\n        self.kwargs = kwargs\n    def __get__(self, instance, owner):\n        value = instance.__dict__[self.attribute]\n        return self.factory(value, *self.args, **self.kwargs)\n    def __set__(self, instance, value):",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "resolve_path",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def resolve_path(module, name):\n    if isinstance(module, string_types):\n        __import__(module)\n        module = sys.modules[module]\n    parent = module\n    path = name.split('.')\n    attribute = path[0]\n    # We can't just always use getattr() because in doing\n    # that on a class it will cause binding to occur which\n    # will complicate things later and cause some things not",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "apply_patch",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def apply_patch(parent, attribute, replacement):\n    setattr(parent, attribute, replacement)\ndef wrap_object(module, name, factory, args=(), kwargs={}):\n    (parent, attribute, original) = resolve_path(module, name)\n    wrapper = factory(original, *args, **kwargs)\n    apply_patch(parent, attribute, wrapper)\n    return wrapper\n# Function for applying a proxy object to an attribute of a class\n# instance. The wrapper works by defining an attribute of the same name\n# on the class which is a descriptor and which intercepts access to the",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "wrap_object",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def wrap_object(module, name, factory, args=(), kwargs={}):\n    (parent, attribute, original) = resolve_path(module, name)\n    wrapper = factory(original, *args, **kwargs)\n    apply_patch(parent, attribute, wrapper)\n    return wrapper\n# Function for applying a proxy object to an attribute of a class\n# instance. The wrapper works by defining an attribute of the same name\n# on the class which is a descriptor and which intercepts access to the\n# instance attribute. Note that this cannot be used on attributes which\n# are themselves defined by a property object.",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "wrap_object_attribute",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def wrap_object_attribute(module, name, factory, args=(), kwargs={}):\n    path, attribute = name.rsplit('.', 1)\n    parent = resolve_path(module, path)[2]\n    wrapper = AttributeWrapper(attribute, factory, args, kwargs)\n    apply_patch(parent, attribute, wrapper)\n    return wrapper\n# Functions for creating a simple decorator using a FunctionWrapper,\n# plus short cut functions for applying wrappers to functions. These are\n# for use when doing monkey patching. For a more featured way of\n# creating decorators see the decorator decorator instead.",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "function_wrapper",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def function_wrapper(wrapper):\n    def _wrapper(wrapped, instance, args, kwargs):\n        target_wrapped = args[0]\n        if instance is None:\n            target_wrapper = wrapper\n        elif inspect.isclass(instance):\n            target_wrapper = wrapper.__get__(None, instance)\n        else:\n            target_wrapper = wrapper.__get__(instance, type(instance))\n        return FunctionWrapper(target_wrapped, target_wrapper)",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "wrap_function_wrapper",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def wrap_function_wrapper(module, name, wrapper):\n    return wrap_object(module, name, FunctionWrapper, (wrapper,))\ndef patch_function_wrapper(module, name, enabled=None):\n    def _wrapper(wrapper):\n        return wrap_object(module, name, FunctionWrapper, (wrapper, enabled))\n    return _wrapper\ndef transient_function_wrapper(module, name):\n    def _decorator(wrapper):\n        def _wrapper(wrapped, instance, args, kwargs):\n            target_wrapped = args[0]",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "patch_function_wrapper",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def patch_function_wrapper(module, name, enabled=None):\n    def _wrapper(wrapper):\n        return wrap_object(module, name, FunctionWrapper, (wrapper, enabled))\n    return _wrapper\ndef transient_function_wrapper(module, name):\n    def _decorator(wrapper):\n        def _wrapper(wrapped, instance, args, kwargs):\n            target_wrapped = args[0]\n            if instance is None:\n                target_wrapper = wrapper",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "transient_function_wrapper",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "def transient_function_wrapper(module, name):\n    def _decorator(wrapper):\n        def _wrapper(wrapped, instance, args, kwargs):\n            target_wrapped = args[0]\n            if instance is None:\n                target_wrapper = wrapper\n            elif inspect.isclass(instance):\n                target_wrapper = wrapper.__get__(None, instance)\n            else:\n                target_wrapper = wrapper.__get__(instance, type(instance))",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "PY2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.patches",
        "description": "dbus-serialbattery.ext.wrapt.patches",
        "peekOfCode": "PY2 = sys.version_info[0] == 2\nif PY2:\n    string_types = basestring,\nelse:\n    string_types = str,\nfrom .__wrapt__ import FunctionWrapper\n# Helper functions for applying wrappers to existing functions.\ndef resolve_path(module, name):\n    if isinstance(module, string_types):\n        __import__(module)",
        "detail": "dbus-serialbattery.ext.wrapt.patches",
        "documentation": {}
    },
    {
        "label": "WeakFunctionProxy",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.weakrefs",
        "description": "dbus-serialbattery.ext.wrapt.weakrefs",
        "peekOfCode": "class WeakFunctionProxy(ObjectProxy):\n    __slots__ = ('_self_expired', '_self_instance')\n    def __init__(self, wrapped, callback=None):\n        # We need to determine if the wrapped function is actually a\n        # bound method. In the case of a bound method, we need to keep a\n        # reference to the original unbound function and the instance.\n        # This is necessary because if we hold a reference to the bound\n        # function, it will be the only reference and given it is a\n        # temporary object, it will almost immediately expire and\n        # the weakref callback triggered. So what is done is that we",
        "detail": "dbus-serialbattery.ext.wrapt.weakrefs",
        "documentation": {}
    },
    {
        "label": "_ObjectProxyMethods",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class _ObjectProxyMethods(object):\n    # We use properties to override the values of __module__ and\n    # __doc__. If we add these in ObjectProxy, the derived class\n    # __dict__ will still be setup to have string variants of these\n    # attributes and the rules of descriptors means that they appear to\n    # take precedence over the properties in the base class. To avoid\n    # that, we copy the properties into the derived class type itself\n    # via a meta class. In that way the properties will always take\n    # precedence.\n    @property",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "_ObjectProxyMetaType",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class _ObjectProxyMetaType(type):\n    def __new__(cls, name, bases, dictionary):\n        # Copy our special properties into the class so that they\n        # always take precedence over attributes of the same name added\n        # during construction of a derived class. This is to save\n        # duplicating the implementation for them in all derived classes.\n        dictionary.update(vars(_ObjectProxyMethods))\n        return type.__new__(cls, name, bases, dictionary)\nclass ObjectProxy(with_metaclass(_ObjectProxyMetaType)):\n    __slots__ = '__wrapped__'",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "ObjectProxy",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class ObjectProxy(with_metaclass(_ObjectProxyMetaType)):\n    __slots__ = '__wrapped__'\n    def __init__(self, wrapped):\n        object.__setattr__(self, '__wrapped__', wrapped)\n        # Python 3.2+ has the __qualname__ attribute, but it does not\n        # allow it to be overridden using a property and it must instead\n        # be an actual string object instead.\n        try:\n            object.__setattr__(self, '__qualname__', wrapped.__qualname__)\n        except AttributeError:",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "CallableObjectProxy",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class CallableObjectProxy(ObjectProxy):\n    def __call__(*args, **kwargs):\n        def _unpack_self(self, *args):\n            return self, args\n        self, args = _unpack_self(*args)\n        return self.__wrapped__(*args, **kwargs)\nclass PartialCallableObjectProxy(ObjectProxy):\n    def __init__(*args, **kwargs):\n        def _unpack_self(self, *args):\n            return self, args",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "PartialCallableObjectProxy",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class PartialCallableObjectProxy(ObjectProxy):\n    def __init__(*args, **kwargs):\n        def _unpack_self(self, *args):\n            return self, args\n        self, args = _unpack_self(*args)\n        if len(args) < 1:\n            raise TypeError('partial type takes at least one argument')\n        wrapped, args = args[0], args[1:]\n        if not callable(wrapped):\n            raise TypeError('the first argument must be callable')",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "_FunctionWrapperBase",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class _FunctionWrapperBase(ObjectProxy):\n    __slots__ = ('_self_instance', '_self_wrapper', '_self_enabled',\n            '_self_binding', '_self_parent', '_self_owner')\n    def __init__(self, wrapped, instance, wrapper, enabled=None,\n            binding='callable', parent=None, owner=None):\n        super(_FunctionWrapperBase, self).__init__(wrapped)\n        object.__setattr__(self, '_self_instance', instance)\n        object.__setattr__(self, '_self_wrapper', wrapper)\n        object.__setattr__(self, '_self_enabled', enabled)\n        object.__setattr__(self, '_self_binding', binding)",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "BoundFunctionWrapper",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class BoundFunctionWrapper(_FunctionWrapperBase):\n    def __call__(*args, **kwargs):\n        def _unpack_self(self, *args):\n            return self, args\n        self, args = _unpack_self(*args)\n        # If enabled has been specified, then evaluate it at this point and if\n        # the wrapper is not to be executed, then simply return the bound\n        # function rather than a bound wrapper for the bound function. When\n        # evaluating enabled, if it is callable we call it, otherwise we\n        # evaluate it as a boolean.",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "FunctionWrapper",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "class FunctionWrapper(_FunctionWrapperBase):\n    __bound_function_wrapper__ = BoundFunctionWrapper\n    def __init__(self, wrapped, wrapper, enabled=None):\n        # What it is we are wrapping here could be anything. We need to\n        # try and detect specific cases though. In particular, we need\n        # to detect when we are given something that is a method of a\n        # class. Further, we need to know when it is likely an instance\n        # method, as opposed to a class or static method. This can\n        # become problematic though as there isn't strictly a fool proof\n        # method of knowing.",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "with_metaclass",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "def with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    return meta(\"NewBase\", bases, {})\nclass _ObjectProxyMethods(object):\n    # We use properties to override the values of __module__ and\n    # __doc__. If we add these in ObjectProxy, the derived class\n    # __dict__ will still be setup to have string variants of these\n    # attributes and the rules of descriptors means that they appear to\n    # take precedence over the properties in the base class. To avoid\n    # that, we copy the properties into the derived class type itself",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "PY2",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.wrapt.wrappers",
        "description": "dbus-serialbattery.ext.wrapt.wrappers",
        "peekOfCode": "PY2 = sys.version_info[0] == 2\nif PY2:\n    string_types = basestring,\nelse:\n    string_types = str,\ndef with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    return meta(\"NewBase\", bases, {})\nclass _ObjectProxyMethods(object):\n    # We use properties to override the values of __module__ and",
        "detail": "dbus-serialbattery.ext.wrapt.wrappers",
        "documentation": {}
    },
    {
        "label": "_Payloadformat",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class _Payloadformat(enum.Enum):\n    BIT = enum.auto()\n    BITS = enum.auto()\n    FLOAT = enum.auto()\n    LONG = enum.auto()\n    REGISTER = enum.auto()\n    REGISTERS = enum.auto()\n    STRING = enum.auto()\n# ######################## #\n# Modbus instrument object #",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class Instrument:\n    \"\"\"Instrument class for talking to instruments (slaves).\n    Uses the Modbus RTU or ASCII protocols (via RS485 or RS232).\n    Args:\n        * port: The serial port name, for example ``/dev/ttyUSB0`` (Linux),\n          ``/dev/tty.usbserial`` (OS X) or ``COM4`` (Windows).\n          It is also possible to pass in an already opened ``serial.Serial``\n          object (new in version 2.1).\n        * slaveaddress: Slave address in the range 0 to 247.\n          Address 0 is for broadcast, and 248-255 are reserved.",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "ModbusException",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class ModbusException(IOError):\n    \"\"\"Base class for Modbus communication exceptions.\n    Inherits from IOError, which is an alias for OSError in Python3.\n    \"\"\"\nclass SlaveReportedException(ModbusException):\n    \"\"\"Base class for exceptions that the slave (instrument) reports.\"\"\"\nclass SlaveDeviceBusyError(SlaveReportedException):\n    \"\"\"The slave is busy processing some command.\"\"\"\nclass NegativeAcknowledgeError(SlaveReportedException):\n    \"\"\"The slave can not fulfil the programming request.",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "SlaveReportedException",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class SlaveReportedException(ModbusException):\n    \"\"\"Base class for exceptions that the slave (instrument) reports.\"\"\"\nclass SlaveDeviceBusyError(SlaveReportedException):\n    \"\"\"The slave is busy processing some command.\"\"\"\nclass NegativeAcknowledgeError(SlaveReportedException):\n    \"\"\"The slave can not fulfil the programming request.\n    This typically happens when using function code 13 or 14 decimal.\n    \"\"\"\nclass IllegalRequestError(SlaveReportedException):\n    \"\"\"The slave has received an illegal request.\"\"\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "SlaveDeviceBusyError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class SlaveDeviceBusyError(SlaveReportedException):\n    \"\"\"The slave is busy processing some command.\"\"\"\nclass NegativeAcknowledgeError(SlaveReportedException):\n    \"\"\"The slave can not fulfil the programming request.\n    This typically happens when using function code 13 or 14 decimal.\n    \"\"\"\nclass IllegalRequestError(SlaveReportedException):\n    \"\"\"The slave has received an illegal request.\"\"\"\nclass MasterReportedException(ModbusException):\n    \"\"\"Base class for exceptions that the master (computer) detects.\"\"\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "NegativeAcknowledgeError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class NegativeAcknowledgeError(SlaveReportedException):\n    \"\"\"The slave can not fulfil the programming request.\n    This typically happens when using function code 13 or 14 decimal.\n    \"\"\"\nclass IllegalRequestError(SlaveReportedException):\n    \"\"\"The slave has received an illegal request.\"\"\"\nclass MasterReportedException(ModbusException):\n    \"\"\"Base class for exceptions that the master (computer) detects.\"\"\"\nclass NoResponseError(MasterReportedException):\n    \"\"\"No response from the slave.\"\"\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "IllegalRequestError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class IllegalRequestError(SlaveReportedException):\n    \"\"\"The slave has received an illegal request.\"\"\"\nclass MasterReportedException(ModbusException):\n    \"\"\"Base class for exceptions that the master (computer) detects.\"\"\"\nclass NoResponseError(MasterReportedException):\n    \"\"\"No response from the slave.\"\"\"\nclass LocalEchoError(MasterReportedException):\n    \"\"\"There is some problem with the local echo.\"\"\"\nclass InvalidResponseError(MasterReportedException):\n    \"\"\"The response does not fulfill the Modbus standad, for example wrong checksum.\"\"\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "MasterReportedException",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class MasterReportedException(ModbusException):\n    \"\"\"Base class for exceptions that the master (computer) detects.\"\"\"\nclass NoResponseError(MasterReportedException):\n    \"\"\"No response from the slave.\"\"\"\nclass LocalEchoError(MasterReportedException):\n    \"\"\"There is some problem with the local echo.\"\"\"\nclass InvalidResponseError(MasterReportedException):\n    \"\"\"The response does not fulfill the Modbus standad, for example wrong checksum.\"\"\"\n# ################ #\n# Payload handling #",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "NoResponseError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class NoResponseError(MasterReportedException):\n    \"\"\"No response from the slave.\"\"\"\nclass LocalEchoError(MasterReportedException):\n    \"\"\"There is some problem with the local echo.\"\"\"\nclass InvalidResponseError(MasterReportedException):\n    \"\"\"The response does not fulfill the Modbus standad, for example wrong checksum.\"\"\"\n# ################ #\n# Payload handling #\n# ################ #\ndef _create_payload(",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "LocalEchoError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class LocalEchoError(MasterReportedException):\n    \"\"\"There is some problem with the local echo.\"\"\"\nclass InvalidResponseError(MasterReportedException):\n    \"\"\"The response does not fulfill the Modbus standad, for example wrong checksum.\"\"\"\n# ################ #\n# Payload handling #\n# ################ #\ndef _create_payload(\n    functioncode: int,\n    registeraddress: int,",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "InvalidResponseError",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "class InvalidResponseError(MasterReportedException):\n    \"\"\"The response does not fulfill the Modbus standad, for example wrong checksum.\"\"\"\n# ################ #\n# Payload handling #\n# ################ #\ndef _create_payload(\n    functioncode: int,\n    registeraddress: int,\n    value: Union[None, str, int, float, List[int]],\n    number_of_decimals: int,",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "__author__ = \"Jonas Berg\"\n__license__ = \"Apache License, Version 2.0\"\n__url__ = \"https://github.com/pyhys/minimalmodbus\"\n__version__ = \"2.1.1\"\nimport sys\nif sys.version_info < (3, 8, 0):\n    raise ImportError(\n        \"Your Python version is too old for this version of MinimalModbus\"\n    )\nimport binascii",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "__license__ = \"Apache License, Version 2.0\"\n__url__ = \"https://github.com/pyhys/minimalmodbus\"\n__version__ = \"2.1.1\"\nimport sys\nif sys.version_info < (3, 8, 0):\n    raise ImportError(\n        \"Your Python version is too old for this version of MinimalModbus\"\n    )\nimport binascii\nimport enum",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "__url__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "__url__ = \"https://github.com/pyhys/minimalmodbus\"\n__version__ = \"2.1.1\"\nimport sys\nif sys.version_info < (3, 8, 0):\n    raise ImportError(\n        \"Your Python version is too old for this version of MinimalModbus\"\n    )\nimport binascii\nimport enum\nimport os",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "__version__ = \"2.1.1\"\nimport sys\nif sys.version_info < (3, 8, 0):\n    raise ImportError(\n        \"Your Python version is too old for this version of MinimalModbus\"\n    )\nimport binascii\nimport enum\nimport os\nimport struct",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_NUMBER_OF_BYTES_BEFORE_REGISTERDATA",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_NUMBER_OF_BYTES_BEFORE_REGISTERDATA = 1  # Within the payload\n_NUMBER_OF_BYTES_PER_REGISTER = 2\n_MAX_NUMBER_OF_REGISTERS_TO_WRITE = 123\n_MAX_NUMBER_OF_REGISTERS_TO_READ = 125\n_MAX_NUMBER_OF_BITS_TO_WRITE = 1968  # 0x7B0\n_MAX_NUMBER_OF_BITS_TO_READ = 2000  # 0x7D0\n_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_NUMBER_OF_BYTES_PER_REGISTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_NUMBER_OF_BYTES_PER_REGISTER = 2\n_MAX_NUMBER_OF_REGISTERS_TO_WRITE = 123\n_MAX_NUMBER_OF_REGISTERS_TO_READ = 125\n_MAX_NUMBER_OF_BITS_TO_WRITE = 1968  # 0x7B0\n_MAX_NUMBER_OF_BITS_TO_READ = 2000  # 0x7D0\n_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_MAX_NUMBER_OF_REGISTERS_TO_WRITE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_MAX_NUMBER_OF_REGISTERS_TO_WRITE = 123\n_MAX_NUMBER_OF_REGISTERS_TO_READ = 125\n_MAX_NUMBER_OF_BITS_TO_WRITE = 1968  # 0x7B0\n_MAX_NUMBER_OF_BITS_TO_READ = 2000  # 0x7D0\n_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_MAX_NUMBER_OF_REGISTERS_TO_READ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_MAX_NUMBER_OF_REGISTERS_TO_READ = 125\n_MAX_NUMBER_OF_BITS_TO_WRITE = 1968  # 0x7B0\n_MAX_NUMBER_OF_BITS_TO_READ = 2000  # 0x7D0\n_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_MAX_NUMBER_OF_BITS_TO_WRITE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_MAX_NUMBER_OF_BITS_TO_WRITE = 1968  # 0x7B0\n_MAX_NUMBER_OF_BITS_TO_READ = 2000  # 0x7D0\n_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_MAX_NUMBER_OF_BITS_TO_READ",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_MAX_NUMBER_OF_BITS_TO_READ = 2000  # 0x7D0\n_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_MAX_NUMBER_OF_DECIMALS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_MAX_NUMBER_OF_DECIMALS = 10  # Some instrument might store 0.00000154 Ampere as 154 etc\n_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_MAX_BYTEORDER_VALUE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_MAX_BYTEORDER_VALUE = 3\n_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_SECONDS_TO_MILLISECONDS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_SECONDS_TO_MILLISECONDS = 1000\n_BROADCAST_DELAY: float = 0.2  # seconds\n_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_BITS_PER_BYTE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_BITS_PER_BYTE = 8\n_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_ASCII_HEADER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_ASCII_HEADER = b\":\"\n_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_ASCII_FOOTER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_ASCII_FOOTER = b\"\\r\\n\"\n_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_BYTEPOSITION_FOR_ASCII_HEADER",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_BYTEPOSITION_FOR_ASCII_HEADER = 0  # Relative to plain response\n_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp\n# ############### #",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_BYTEPOSITION_FOR_SLAVEADDRESS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_BYTEPOSITION_FOR_SLAVEADDRESS = 0  # Relative to (stripped) response\n_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp\n# ############### #\n# Named constants #",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_BYTEPOSITION_FOR_FUNCTIONCODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_BYTEPOSITION_FOR_FUNCTIONCODE = 1  # Relative to (stripped) response\n_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp\n# ############### #\n# Named constants #\n# ############### #",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_BYTEPOSITION_FOR_SLAVE_ERROR_CODE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_BYTEPOSITION_FOR_SLAVE_ERROR_CODE = 2  # Relative to (stripped) response\n_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp\n# ############### #\n# Named constants #\n# ############### #\nMODE_RTU: str = \"rtu\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_BITNUMBER_FUNCTIONCODE_ERRORINDICATION",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_BITNUMBER_FUNCTIONCODE_ERRORINDICATION = 7\n_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp\n# ############### #\n# Named constants #\n# ############### #\nMODE_RTU: str = \"rtu\"\n\"\"\"Use Modbus RTU communication.\"\"\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_SLAVEADDRESS_BROADCAST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_SLAVEADDRESS_BROADCAST = 0\n# Several instrument instances can share the same serialport\n_serialports: Dict[str, serial.Serial] = {}  # Key: port name, value: port instance\n_latest_read_times: Dict[str, float] = {}  # Key: port name, value: timestamp\n# ############### #\n# Named constants #\n# ############### #\nMODE_RTU: str = \"rtu\"\n\"\"\"Use Modbus RTU communication.\"\"\"\nMODE_ASCII: str = \"ascii\"",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_CRC16TABLE",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_CRC16TABLE = (\n    0,\n    49345,\n    49537,\n    320,\n    49921,\n    960,\n    640,\n    49729,\n    50689,",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_getDiagnosticString",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.minimalmodbus",
        "description": "dbus-serialbattery.ext.minimalmodbus",
        "peekOfCode": "_getDiagnosticString = _get_diagnostic_string",
        "detail": "dbus-serialbattery.ext.minimalmodbus",
        "documentation": {}
    },
    {
        "label": "_Sentinel",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"\n_marker = _Sentinel()\nif sys.version_info >= (3, 10):\n    def _should_collect_from_parameters(t):\n        return isinstance(\n            t, (typing._GenericAlias, _types.GenericAlias, _types.UnionType)\n        )\nelif sys.version_info >= (3, 9):",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_ExtensionsSpecialForm",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class _ExtensionsSpecialForm(typing._SpecialForm, _root=True):\n    def __repr__(self):\n        return 'typing_extensions.' + self._name\nFinal = typing.Final\nif sys.version_info >= (3, 11):\n    final = typing.final\nelse:\n    # @final exists in 3.8+, but we backport it for all versions\n    # before 3.11 to keep support for the __final__ attribute.\n    # See https://bugs.python.org/issue46342",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_DefaultMixin",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class _DefaultMixin:\n    \"\"\"Mixin for TypeVarLike defaults.\"\"\"\n    __slots__ = ()\n    __init__ = _set_default\n# Classes using this metaclass must provide a _backported_typevarlike ClassVar\nclass _TypeVarLikeMeta(type):\n    def __instancecheck__(cls, __instance: Any) -> bool:\n        return isinstance(__instance, cls._backported_typevarlike)\nif _PEP_696_IMPLEMENTED:\n    from typing import TypeVar",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_TypeVarLikeMeta",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class _TypeVarLikeMeta(type):\n    def __instancecheck__(cls, __instance: Any) -> bool:\n        return isinstance(__instance, cls._backported_typevarlike)\nif _PEP_696_IMPLEMENTED:\n    from typing import TypeVar\nelse:\n    # Add default and infer_variance parameters from PEP 696 and 695\n    class TypeVar(metaclass=_TypeVarLikeMeta):\n        \"\"\"Type variable.\"\"\"\n        _backported_typevarlike = typing.TypeVar",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_EllipsisDummy",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class _EllipsisDummy: ...\n# 3.8-3.10\ndef _create_concatenate_alias(origin, parameters):\n    if parameters[-1] is ... and sys.version_info < (3, 9, 2):\n        # Hack: Arguments must be types, replace it with one.\n        parameters = (*parameters[:-1], _EllipsisDummy)\n    if sys.version_info >= (3, 10, 2):\n        concatenate = _ConcatenateGenericAlias(origin, parameters,\n                                        _typevar_types=(TypeVar, ParamSpec),\n                                        _paramspec_tvars=True)",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_SpecialForm",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class _SpecialForm(typing._Final, _root=True):\n    __slots__ = ('_name', '__doc__', '_getitem')\n    def __init__(self, getitem):\n        self._getitem = getitem\n        self._name = getitem.__name__\n        self.__doc__ = getitem.__doc__\n    def __getattr__(self, item):\n        if item in {'__name__', '__qualname__'}:\n            return self._name\n        raise AttributeError(item)",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Format",
        "kind": 6,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "class Format(enum.IntEnum):\n    VALUE = 1\n    FORWARDREF = 2\n    STRING = 3\nif _PEP_649_OR_749_IMPLEMENTED:\n    get_annotations = inspect.get_annotations\nelse:\n    def get_annotations(obj, *, globals=None, locals=None, eval_str=False,\n                        format=Format.VALUE):\n        \"\"\"Compute the annotations dict for an object.",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "IntVar",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "def IntVar(name):\n    return typing.TypeVar(name)\n# A Literal bug was fixed in 3.11.0, 3.10.1 and 3.9.8\nif sys.version_info >= (3, 10, 1):\n    Literal = typing.Literal\nelse:\n    def _flatten_literal_params(parameters):\n        \"\"\"An internal helper for Literal creation: flatten Literals among parameters\"\"\"\n        params = []\n        for p in parameters:",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "__all__ = [\n    # Super-special typing primitives.\n    'Any',\n    'ClassVar',\n    'Concatenate',\n    'Final',\n    'LiteralString',\n    'ParamSpec',\n    'ParamSpecArgs',\n    'ParamSpecKwargs',",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "PEP_560",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "PEP_560 = True\nGenericMeta = type\n_PEP_696_IMPLEMENTED = sys.version_info >= (3, 13, 0, \"beta\")\n# Added with bpo-45166 to 3.10.1+ and some 3.9 versions\n_FORWARD_REF_HAS_CLASS = \"__forward_is_class__\" in typing.ForwardRef.__slots__\n# The functions below are modified copies of typing internal helpers.\n# They are needed by _ProtocolMeta and they provide support for PEP 646.\nclass _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "GenericMeta",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "GenericMeta = type\n_PEP_696_IMPLEMENTED = sys.version_info >= (3, 13, 0, \"beta\")\n# Added with bpo-45166 to 3.10.1+ and some 3.9 versions\n_FORWARD_REF_HAS_CLASS = \"__forward_is_class__\" in typing.ForwardRef.__slots__\n# The functions below are modified copies of typing internal helpers.\n# They are needed by _ProtocolMeta and they provide support for PEP 646.\nclass _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"\n_marker = _Sentinel()",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_PEP_696_IMPLEMENTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_PEP_696_IMPLEMENTED = sys.version_info >= (3, 13, 0, \"beta\")\n# Added with bpo-45166 to 3.10.1+ and some 3.9 versions\n_FORWARD_REF_HAS_CLASS = \"__forward_is_class__\" in typing.ForwardRef.__slots__\n# The functions below are modified copies of typing internal helpers.\n# They are needed by _ProtocolMeta and they provide support for PEP 646.\nclass _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"\n_marker = _Sentinel()\nif sys.version_info >= (3, 10):",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_FORWARD_REF_HAS_CLASS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_FORWARD_REF_HAS_CLASS = \"__forward_is_class__\" in typing.ForwardRef.__slots__\n# The functions below are modified copies of typing internal helpers.\n# They are needed by _ProtocolMeta and they provide support for PEP 646.\nclass _Sentinel:\n    def __repr__(self):\n        return \"<sentinel>\"\n_marker = _Sentinel()\nif sys.version_info >= (3, 10):\n    def _should_collect_from_parameters(t):\n        return isinstance(",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_marker",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_marker = _Sentinel()\nif sys.version_info >= (3, 10):\n    def _should_collect_from_parameters(t):\n        return isinstance(\n            t, (typing._GenericAlias, _types.GenericAlias, _types.UnionType)\n        )\nelif sys.version_info >= (3, 9):\n    def _should_collect_from_parameters(t):\n        return isinstance(t, (typing._GenericAlias, _types.GenericAlias))\nelse:",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "NoReturn = typing.NoReturn\n# Some unconstrained type variables.  These are used by the container types.\n# (These are not for export.)\nT = typing.TypeVar('T')  # Any type.\nKT = typing.TypeVar('KT')  # Key type.\nVT = typing.TypeVar('VT')  # Value type.\nT_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\nif sys.version_info >= (3, 11):\n    from typing import Any",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "T = typing.TypeVar('T')  # Any type.\nKT = typing.TypeVar('KT')  # Key type.\nVT = typing.TypeVar('VT')  # Value type.\nT_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "KT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "KT = typing.TypeVar('KT')  # Key type.\nVT = typing.TypeVar('VT')  # Value type.\nT_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):\n            if self is Any:",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "VT",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "VT = typing.TypeVar('VT')  # Value type.\nT_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):\n            if self is Any:\n                raise TypeError(\"typing_extensions.Any cannot be used with isinstance()\")",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "T_co",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "T_co = typing.TypeVar('T_co', covariant=True)  # Any type covariant containers.\nT_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):\n            if self is Any:\n                raise TypeError(\"typing_extensions.Any cannot be used with isinstance()\")\n            return super().__instancecheck__(obj)",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "T_contra = typing.TypeVar('T_contra', contravariant=True)  # Ditto contravariant.\nif sys.version_info >= (3, 11):\n    from typing import Any\nelse:\n    class _AnyMeta(type):\n        def __instancecheck__(self, obj):\n            if self is Any:\n                raise TypeError(\"typing_extensions.Any cannot be used with isinstance()\")\n            return super().__instancecheck__(obj)\n        def __repr__(self):",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "ClassVar = typing.ClassVar\nclass _ExtensionsSpecialForm(typing._SpecialForm, _root=True):\n    def __repr__(self):\n        return 'typing_extensions.' + self._name\nFinal = typing.Final\nif sys.version_info >= (3, 11):\n    final = typing.final\nelse:\n    # @final exists in 3.8+, but we backport it for all versions\n    # before 3.11 to keep support for the __final__ attribute.",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Final",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Final = typing.Final\nif sys.version_info >= (3, 11):\n    final = typing.final\nelse:\n    # @final exists in 3.8+, but we backport it for all versions\n    # before 3.11 to keep support for the __final__ attribute.\n    # See https://bugs.python.org/issue46342\n    def final(f):\n        \"\"\"This decorator can be used to indicate to type checkers that\n        the decorated method cannot be overridden, and decorated class",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_overload_dummy",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_overload_dummy = typing._overload_dummy\nif hasattr(typing, \"get_overloads\"):  # 3.11+\n    overload = typing.overload\n    get_overloads = typing.get_overloads\n    clear_overloads = typing.clear_overloads\nelse:\n    # {module: {qualname: {firstlineno: func}}}\n    _overload_registry = collections.defaultdict(\n        functools.partial(collections.defaultdict, dict)\n    )",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Type",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Type = typing.Type\n# Various ABCs mimicking those in collections.abc.\n# A few are simply re-exported for completeness.\nAwaitable = typing.Awaitable\nCoroutine = typing.Coroutine\nAsyncIterable = typing.AsyncIterable\nAsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Awaitable = typing.Awaitable\nCoroutine = typing.Coroutine\nAsyncIterable = typing.AsyncIterable\nAsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Coroutine = typing.Coroutine\nAsyncIterable = typing.AsyncIterable\nAsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "AsyncIterable = typing.AsyncIterable\nAsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "AsyncIterator = typing.AsyncIterator\nDeque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Deque",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Deque = typing.Deque\nDefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "DefaultDict = typing.DefaultDict\nOrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "OrderedDict = typing.OrderedDict\nCounter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Counter",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Counter = typing.Counter\nChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')\n    # Python <3.9 doesn't have typing._SpecialGenericAlias",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "ChainMap",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "ChainMap = typing.ChainMap\nText = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')\n    # Python <3.9 doesn't have typing._SpecialGenericAlias\n    _special_generic_alias_base = getattr(",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Text = typing.Text\nTYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')\n    # Python <3.9 doesn't have typing._SpecialGenericAlias\n    _special_generic_alias_base = getattr(\n        typing, \"_SpecialGenericAlias\", typing._GenericAlias",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "TYPE_CHECKING = typing.TYPE_CHECKING\nif sys.version_info >= (3, 13, 0, \"beta\"):\n    from typing import AsyncContextManager, AsyncGenerator, ContextManager, Generator\nelse:\n    def _is_dunder(attr):\n        return attr.startswith('__') and attr.endswith('__')\n    # Python <3.9 doesn't have typing._SpecialGenericAlias\n    _special_generic_alias_base = getattr(\n        typing, \"_SpecialGenericAlias\", typing._GenericAlias\n    )",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_PROTO_ALLOWLIST",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_PROTO_ALLOWLIST = {\n    'collections.abc': [\n        'Callable', 'Awaitable', 'Iterable', 'Iterator', 'AsyncIterable',\n        'Hashable', 'Sized', 'Container', 'Collection', 'Reversible', 'Buffer',\n    ],\n    'contextlib': ['AbstractContextManager', 'AbstractAsyncContextManager'],\n    'typing_extensions': ['Buffer'],\n}\n_EXCLUDED_ATTRS = frozenset(typing.EXCLUDED_ATTRIBUTES) | {\n    \"__match_args__\", \"__protocol_attrs__\", \"__non_callable_proto_members__\",",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_EXCLUDED_ATTRS",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_EXCLUDED_ATTRS = frozenset(typing.EXCLUDED_ATTRIBUTES) | {\n    \"__match_args__\", \"__protocol_attrs__\", \"__non_callable_proto_members__\",\n    \"__final__\",\n}\ndef _get_protocol_attrs(cls):\n    attrs = set()\n    for base in cls.__mro__[:-1]:  # without object\n        if base.__name__ in {'Protocol', 'Generic'}:\n            continue\n        annotations = getattr(base, '__annotations__', {})",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "runtime",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "runtime = runtime_checkable\n# Our version of runtime-checkable protocols is faster on Python 3.8-3.11\nif sys.version_info >= (3, 12):\n    SupportsInt = typing.SupportsInt\n    SupportsFloat = typing.SupportsFloat\n    SupportsComplex = typing.SupportsComplex\n    SupportsBytes = typing.SupportsBytes\n    SupportsIndex = typing.SupportsIndex\n    SupportsAbs = typing.SupportsAbs\n    SupportsRound = typing.SupportsRound",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_PEP_728_IMPLEMENTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_PEP_728_IMPLEMENTED = False\nif _PEP_728_IMPLEMENTED:\n    # The standard library TypedDict in Python 3.8 does not store runtime information\n    # about which (if any) keys are optional.  See https://bugs.python.org/issue38834\n    # The standard library TypedDict in Python 3.9.0/1 does not honour the \"total\"\n    # keyword with old-style TypedDict().  See https://bugs.python.org/issue42059\n    # The standard library TypedDict below Python 3.11 does not store runtime\n    # information about optional and required keys when using Required or NotRequired.\n    # Generic TypedDicts are also impossible using typing.TypedDict on Python <3.11.\n    # Aaaand on 3.12 we add __orig_bases__ to TypedDict",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_UNPACK_DOC",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_UNPACK_DOC = \"\"\"\\\nType unpack operator.\nThe type unpack operator takes the child types from some container type,\nsuch as `tuple[int, str]` or a `TypeVarTuple`, and 'pulls them out'. For\nexample:\n  # For some generic class `Foo`:\n  Foo[Unpack[tuple[int, str]]]  # Equivalent to Foo[int, str]\n  Ts = TypeVarTuple('Ts')\n  # Specifies that `Bar` is generic in an arbitrary number of types.\n  # (Think of `Ts` as a tuple of an arbitrary number of individual",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_TYPEVARTUPLE_TYPES",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_TYPEVARTUPLE_TYPES = {TypeVarTuple, getattr(typing, \"TypeVarTuple\", None)}\ndef _is_unpacked_typevartuple(x) -> bool:\n    if get_origin(x) is not Unpack:\n        return False\n    args = get_args(x)\n    return (\n        bool(args)\n        and len(args) == 1\n        and type(args[0]) in _TYPEVARTUPLE_TYPES\n    )",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_CapsuleType",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_CapsuleType = getattr(_types, \"CapsuleType\", None)\nif _CapsuleType is None:\n    try:\n        import _socket\n    except ImportError:\n        pass\n    else:\n        _CAPI = getattr(_socket, \"CAPI\", None)\n        if _CAPI is not None:\n            _CapsuleType = type(_CAPI)",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "_PEP_649_OR_749_IMPLEMENTED",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "_PEP_649_OR_749_IMPLEMENTED = (\n    hasattr(inspect, 'get_annotations')\n    and inspect.get_annotations.__kwdefaults__ is not None\n    and \"format\" in inspect.get_annotations.__kwdefaults__\n)\nclass Format(enum.IntEnum):\n    VALUE = 1\n    FORWARDREF = 2\n    STRING = 3\nif _PEP_649_OR_749_IMPLEMENTED:",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "AbstractSet",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "AbstractSet = typing.AbstractSet\nAnyStr = typing.AnyStr\nBinaryIO = typing.BinaryIO\nCallable = typing.Callable\nCollection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "AnyStr = typing.AnyStr\nBinaryIO = typing.BinaryIO\nCallable = typing.Callable\nCollection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "BinaryIO = typing.BinaryIO\nCallable = typing.Callable\nCollection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Callable",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Callable = typing.Callable\nCollection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Collection",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Collection = typing.Collection\nContainer = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Container = typing.Container\nDict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Dict = typing.Dict\nForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "ForwardRef",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "ForwardRef = typing.ForwardRef\nFrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "FrozenSet",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "FrozenSet = typing.FrozenSet\nGeneric = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Generic",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Generic = typing.Generic\nHashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Hashable = typing.Hashable\nIO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "IO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "IO = typing.IO\nItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "ItemsView",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "ItemsView = typing.ItemsView\nIterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Iterable = typing.Iterable\nIterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Iterator = typing.Iterator\nKeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "KeysView",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "KeysView = typing.KeysView\nList = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "List",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "List = typing.List\nMapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Mapping = typing.Mapping\nMappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "MappingView",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "MappingView = typing.MappingView\nMatch = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Match",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Match = typing.Match\nMutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "MutableMapping = typing.MutableMapping\nMutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "MutableSequence = typing.MutableSequence\nMutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "MutableSet",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "MutableSet = typing.MutableSet\nOptional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Optional",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Optional = typing.Optional\nPattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Pattern",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Pattern = typing.Pattern\nReversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Reversible",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Reversible = typing.Reversible\nSequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Sequence = typing.Sequence\nSet = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Set",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Set = typing.Set\nSized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Sized",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Sized = typing.Sized\nTextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "TextIO = typing.TextIO\nTuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Tuple = typing.Tuple\nUnion = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "Union",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "Union = typing.Union\nValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "ValuesView",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "ValuesView = typing.ValuesView\ncast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "cast",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "cast = typing.cast\nno_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "no_type_check",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "no_type_check = typing.no_type_check\nno_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "no_type_check_decorator",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.typing_extensions",
        "description": "dbus-serialbattery.ext.typing_extensions",
        "peekOfCode": "no_type_check_decorator = typing.no_type_check_decorator",
        "detail": "dbus-serialbattery.ext.typing_extensions",
        "documentation": {}
    },
    {
        "label": "update_file",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.update",
        "description": "dbus-serialbattery.ext.update",
        "peekOfCode": "def update_file(dir, url):\n    # extract the filename from the URL\n    filename = url.split(\"/\")[-1]\n    print(f\"Updating file: {filename}...\")\n    # create the directory if it doesn't exist\n    if not os.path.exists(dir):\n        os.makedirs(dir)\n    # full path for the file to be saved\n    file_path = os.path.join(dir, filename)\n    # download the file",
        "detail": "dbus-serialbattery.ext.update",
        "documentation": {}
    },
    {
        "label": "update_module",
        "kind": 2,
        "importPath": "dbus-serialbattery.ext.update",
        "description": "dbus-serialbattery.ext.update",
        "peekOfCode": "def update_module(name, repo_url, extract):\n    print(f\"Updating module: {name}...\")\n    # Fetch the latest release information from the GitHub API\n    api_url = f\"https://api.github.com/repos/{repo_url}/releases/latest\"\n    response = requests.get(api_url)\n    # Get repo name\n    repo_name = repo_url.split(\"/\")[1]\n    if response.status_code == 404:\n        # No releases found, fallback to tags\n        api_url = f\"https://api.github.com/repos/{repo_url}/tags\"",
        "detail": "dbus-serialbattery.ext.update",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.update",
        "description": "dbus-serialbattery.ext.update",
        "peekOfCode": "files = [\n    # path: path where the file will be saved\n    # url: URL to the file\n    {\"path\": \"/\", \"url\": \"https://raw.githubusercontent.com/pyhys/minimalmodbus/refs/heads/master/minimalmodbus.py\"},\n    {\"path\": \"/\", \"url\": \"https://raw.githubusercontent.com/python/typing_extensions/refs/heads/main/src/typing_extensions.py\"},\n]\nmodules = [\n    # name: module name\n    # user/repository: GitHub user/repository\n    # extract: extract only this folder from the tarball",
        "detail": "dbus-serialbattery.ext.update",
        "documentation": {}
    },
    {
        "label": "modules",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.update",
        "description": "dbus-serialbattery.ext.update",
        "peekOfCode": "modules = [\n    # name: module name\n    # user/repository: GitHub user/repository\n    # extract: extract only this folder from the tarball\n    {\"name\": \"aenum\", \"user/repository\": \"ethanfurman/aenum\", \"extract\": \"/aenum\"},\n    {\"name\": \"bleak\", \"user/repository\": \"hbldh/bleak\", \"extract\": \"/bleak\"},\n    {\"name\": \"can\", \"user/repository\": \"hardbyte/python-can\", \"extract\": \"/can\"},\n    {\"name\": \"velib_python\", \"user/repository\": \"victronenergy/velib_python\", \"extract\": \"\"},\n    {\"name\": \"venus-os_dbus-serialbattery_gui-v2\", \"user/repository\": \"mr-manuel/venus-os_dbus-serialbattery_gui-v2\", \"extract\": \"\"},\n    {\"name\": \"venus-os_overlay-fs\", \"user/repository\": \"mr-manuel/venus-os_overlay-fs\", \"extract\": \"\"},",
        "detail": "dbus-serialbattery.ext.update",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.update",
        "description": "dbus-serialbattery.ext.update",
        "peekOfCode": "root_dir = \"./dbus-serialbattery/ext\"\ntemp_dir = f\"{root_dir}/.temp\"\ndef update_file(dir, url):\n    # extract the filename from the URL\n    filename = url.split(\"/\")[-1]\n    print(f\"Updating file: {filename}...\")\n    # create the directory if it doesn't exist\n    if not os.path.exists(dir):\n        os.makedirs(dir)\n    # full path for the file to be saved",
        "detail": "dbus-serialbattery.ext.update",
        "documentation": {}
    },
    {
        "label": "temp_dir",
        "kind": 5,
        "importPath": "dbus-serialbattery.ext.update",
        "description": "dbus-serialbattery.ext.update",
        "peekOfCode": "temp_dir = f\"{root_dir}/.temp\"\ndef update_file(dir, url):\n    # extract the filename from the URL\n    filename = url.split(\"/\")[-1]\n    print(f\"Updating file: {filename}...\")\n    # create the directory if it doesn't exist\n    if not os.path.exists(dir):\n        os.makedirs(dir)\n    # full path for the file to be saved\n    file_path = os.path.join(dir, filename)",
        "detail": "dbus-serialbattery.ext.update",
        "documentation": {}
    },
    {
        "label": "Protection",
        "kind": 6,
        "importPath": "dbus-serialbattery.battery",
        "description": "dbus-serialbattery.battery",
        "peekOfCode": "class Protection(object):\n    \"\"\"\n    This class holds warning and alarm states for different types of checks.\n    The alarm name in the GUI is the same as the variable name.\n    They are of type integer\n    2 = alarm\n    1 = warning\n    0 = ok, everything is fine\n    \"\"\"\n    ALARM = 2",
        "detail": "dbus-serialbattery.battery",
        "documentation": {}
    },
    {
        "label": "History",
        "kind": 6,
        "importPath": "dbus-serialbattery.battery",
        "description": "dbus-serialbattery.battery",
        "peekOfCode": "class History:\n    \"\"\"\n    This class holds the history data of the battery.\n    \"\"\"\n    def __init__(self):\n        self.exclude_values_to_calculate: list = []\n        \"\"\"\n        List of values to exclude from calculation, because they are fetched from the BMS.\n        \"\"\"\n        self.clear: int = 0",
        "detail": "dbus-serialbattery.battery",
        "documentation": {}
    },
    {
        "label": "Cell",
        "kind": 6,
        "importPath": "dbus-serialbattery.battery",
        "description": "dbus-serialbattery.battery",
        "peekOfCode": "class Cell:\n    \"\"\"\n    This class holds information about a single cell\n    :param voltage: float = the voltage of the cell in Volts\n    :param balance: bool = the balance status of the cell\n    \"\"\"\n    voltage: float = None\n    \"\"\"\n    The voltage of a specific cell in Volts\n    \"\"\"",
        "detail": "dbus-serialbattery.battery",
        "documentation": {}
    },
    {
        "label": "Battery",
        "kind": 6,
        "importPath": "dbus-serialbattery.battery",
        "description": "dbus-serialbattery.battery",
        "peekOfCode": "class Battery(ABC):\n    \"\"\"\n    This Class is the abstract baseclass for all batteries. For each BMS this class needs to be extended\n    and the abstract methods need to be implemented. The main program in dbus-serialbattery.py will then\n    use the individual implementations as type Battery and work with it.\n    \"\"\"\n    def __init__(self, port: str, baud: int, address: str):\n        self.port: str = port\n        self.baud_rate: int = baud\n        self.address: str = address",
        "detail": "dbus-serialbattery.battery",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dbus-serialbattery.dbus-serialbattery",
        "description": "dbus-serialbattery.dbus-serialbattery",
        "peekOfCode": "def main():\n    global expected_bms_types, supported_bms_types\n    def exit_driver(sig, frame, code: int = 0) -> None:\n        \"\"\"\n        Gracefully exit the driver.\n        Handles also signal for SIGINT and SIGTERM.\n        :return: None\n        \"\"\"\n        logger.info(\"Exit signal received, exiting gracefully...\")\n        port = get_port()",
        "detail": "dbus-serialbattery.dbus-serialbattery",
        "documentation": {}
    },
    {
        "label": "supported_bms_types",
        "kind": 5,
        "importPath": "dbus-serialbattery.dbus-serialbattery",
        "description": "dbus-serialbattery.dbus-serialbattery",
        "peekOfCode": "supported_bms_types = [\n    {\"bms\": Daly, \"baud\": 9600, \"address\": b\"\\x40\"},\n    {\"bms\": Daly, \"baud\": 9600, \"address\": b\"\\x80\"},\n    {\"bms\": Daren485, \"baud\": 19200, \"address\": b\"\\x01\"},\n    {\"bms\": Ecs, \"baud\": 19200},\n    {\"bms\": EG4_Lifepower, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": EG4_LL, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": Felicity, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": HeltecModbus, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": HLPdataBMS4S, \"baud\": 9600},",
        "detail": "dbus-serialbattery.dbus-serialbattery",
        "documentation": {}
    },
    {
        "label": "expected_bms_types",
        "kind": 5,
        "importPath": "dbus-serialbattery.dbus-serialbattery",
        "description": "dbus-serialbattery.dbus-serialbattery",
        "peekOfCode": "expected_bms_types = [battery_type for battery_type in supported_bms_types if battery_type[\"bms\"].__name__ in BMS_TYPE or len(BMS_TYPE) == 0]\nlogger.info(\"\")\nlogger.info(\"Starting dbus-serialbattery\")\n# count loops\ncount_for_loops = 5\ndelayed_loop_count = 0\ndef main():\n    global expected_bms_types, supported_bms_types\n    def exit_driver(sig, frame, code: int = 0) -> None:\n        \"\"\"",
        "detail": "dbus-serialbattery.dbus-serialbattery",
        "documentation": {}
    },
    {
        "label": "count_for_loops",
        "kind": 5,
        "importPath": "dbus-serialbattery.dbus-serialbattery",
        "description": "dbus-serialbattery.dbus-serialbattery",
        "peekOfCode": "count_for_loops = 5\ndelayed_loop_count = 0\ndef main():\n    global expected_bms_types, supported_bms_types\n    def exit_driver(sig, frame, code: int = 0) -> None:\n        \"\"\"\n        Gracefully exit the driver.\n        Handles also signal for SIGINT and SIGTERM.\n        :return: None\n        \"\"\"",
        "detail": "dbus-serialbattery.dbus-serialbattery",
        "documentation": {}
    },
    {
        "label": "delayed_loop_count",
        "kind": 5,
        "importPath": "dbus-serialbattery.dbus-serialbattery",
        "description": "dbus-serialbattery.dbus-serialbattery",
        "peekOfCode": "delayed_loop_count = 0\ndef main():\n    global expected_bms_types, supported_bms_types\n    def exit_driver(sig, frame, code: int = 0) -> None:\n        \"\"\"\n        Gracefully exit the driver.\n        Handles also signal for SIGINT and SIGTERM.\n        :return: None\n        \"\"\"\n        logger.info(\"Exit signal received, exiting gracefully...\")",
        "detail": "dbus-serialbattery.dbus-serialbattery",
        "documentation": {}
    },
    {
        "label": "SystemBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.dbushelper",
        "description": "dbus-serialbattery.dbushelper",
        "peekOfCode": "class SystemBus(dbus.bus.BusConnection):\n    def __new__(cls):\n        return dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SYSTEM)\nclass SessionBus(dbus.bus.BusConnection):\n    def __new__(cls):\n        return dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)\ndef get_bus() -> dbus.bus.BusConnection:\n    return SessionBus() if \"DBUS_SESSION_BUS_ADDRESS\" in os.environ else SystemBus()\nclass DbusHelper:\n    \"\"\"",
        "detail": "dbus-serialbattery.dbushelper",
        "documentation": {}
    },
    {
        "label": "SessionBus",
        "kind": 6,
        "importPath": "dbus-serialbattery.dbushelper",
        "description": "dbus-serialbattery.dbushelper",
        "peekOfCode": "class SessionBus(dbus.bus.BusConnection):\n    def __new__(cls):\n        return dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)\ndef get_bus() -> dbus.bus.BusConnection:\n    return SessionBus() if \"DBUS_SESSION_BUS_ADDRESS\" in os.environ else SystemBus()\nclass DbusHelper:\n    \"\"\"\n    This class is used to handle all the dbus communication.\n    \"\"\"\n    EMPTY_DICT = {}",
        "detail": "dbus-serialbattery.dbushelper",
        "documentation": {}
    },
    {
        "label": "DbusHelper",
        "kind": 6,
        "importPath": "dbus-serialbattery.dbushelper",
        "description": "dbus-serialbattery.dbushelper",
        "peekOfCode": "class DbusHelper:\n    \"\"\"\n    This class is used to handle all the dbus communication.\n    \"\"\"\n    EMPTY_DICT = {}\n    def __init__(self, battery, bms_address=None):\n        self.battery = battery\n        self.instance = 1\n        self.settings = None\n        self.error = {\"count\": 0, \"timestamp_first\": None, \"timestamp_last\": None}",
        "detail": "dbus-serialbattery.dbushelper",
        "documentation": {}
    },
    {
        "label": "get_bus",
        "kind": 2,
        "importPath": "dbus-serialbattery.dbushelper",
        "description": "dbus-serialbattery.dbushelper",
        "peekOfCode": "def get_bus() -> dbus.bus.BusConnection:\n    return SessionBus() if \"DBUS_SESSION_BUS_ADDRESS\" in os.environ else SystemBus()\nclass DbusHelper:\n    \"\"\"\n    This class is used to handle all the dbus communication.\n    \"\"\"\n    EMPTY_DICT = {}\n    def __init__(self, battery, bms_address=None):\n        self.battery = battery\n        self.instance = 1",
        "detail": "dbus-serialbattery.dbushelper",
        "documentation": {}
    },
    {
        "label": "MaxIdentifier",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class MaxIdentifier(object):\n    __slots__ = []\n    def __repr__(self):\n        return 'MaxIdentifier()'\n    def __eq__(self, other):\n        return isinstance(other, self.__class__)\n@functools.total_ordering\nclass NumericIdentifier(object):\n    __slots__ = ['value']\n    def __init__(self, value):",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "NumericIdentifier",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class NumericIdentifier(object):\n    __slots__ = ['value']\n    def __init__(self, value):\n        self.value = int(value)\n    def __repr__(self):\n        return 'NumericIdentifier(%r)' % self.value\n    def __eq__(self, other):\n        if isinstance(other, NumericIdentifier):\n            return self.value == other.value\n        return NotImplemented",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "AlphaIdentifier",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class AlphaIdentifier(object):\n    __slots__ = ['value']\n    def __init__(self, value):\n        self.value = value.encode('ascii')\n    def __repr__(self):\n        return 'AlphaIdentifier(%r)' % self.value\n    def __eq__(self, other):\n        if isinstance(other, AlphaIdentifier):\n            return self.value == other.value\n        return NotImplemented",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Version",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class Version(object):\n    version_re = re.compile(r'^(\\d+)\\.(\\d+)\\.(\\d+)(?:-([0-9a-zA-Z.-]+))?(?:\\+([0-9a-zA-Z.-]+))?$')\n    partial_version_re = re.compile(r'^(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?(?:-([0-9a-zA-Z.-]*))?(?:\\+([0-9a-zA-Z.-]*))?$')\n    def __init__(\n            self,\n            version_string=None,\n            major=None,\n            minor=None,\n            patch=None,\n            prerelease=None,",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "SpecItem",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class SpecItem(object):\n    \"\"\"A requirement specification.\"\"\"\n    KIND_ANY = '*'\n    KIND_LT = '<'\n    KIND_LTE = '<='\n    KIND_EQUAL = '=='\n    KIND_SHORTEQ = '='\n    KIND_EMPTY = ''\n    KIND_GTE = '>='\n    KIND_GT = '>'",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "BaseSpec",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class BaseSpec(object):\n    \"\"\"A specification of compatible versions.\n    Usage:\n    >>> Spec('>=1.0.0', syntax='npm')\n    A version matches a specification if it matches any\n    of the clauses of that specification.\n    Internally, a Spec is AnyOf(\n        AllOf(Matcher, Matcher, Matcher),\n        AllOf(...),\n    )",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Clause",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class Clause(object):\n    __slots__ = []\n    def match(self, version):\n        raise NotImplementedError()\n    def __and__(self, other):\n        raise NotImplementedError()\n    def __or__(self, other):\n        raise NotImplementedError()\n    def __eq__(self, other):\n        raise NotImplementedError()",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "AnyOf",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class AnyOf(Clause):\n    __slots__ = ['clauses']\n    def __init__(self, *clauses):\n        super(AnyOf, self).__init__()\n        self.clauses = frozenset(clauses)\n    def match(self, version):\n        return any(c.match(version) for c in self.clauses)\n    def simplify(self):\n        subclauses = set()\n        for clause in self.clauses:",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "AllOf",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class AllOf(Clause):\n    __slots__ = ['clauses']\n    def __init__(self, *clauses):\n        super(AllOf, self).__init__()\n        self.clauses = frozenset(clauses)\n    def match(self, version):\n        return all(clause.match(version) for clause in self.clauses)\n    def simplify(self):\n        subclauses = set()\n        for clause in self.clauses:",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Matcher",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class Matcher(Clause):\n    __slots__ = []\n    def __and__(self, other):\n        if isinstance(other, AllOf):\n            return other & self\n        elif isinstance(other, Matcher) or isinstance(other, AnyOf):\n            return AllOf(self, other)\n        else:\n            return NotImplemented\n    def __or__(self, other):",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Never",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class Never(Matcher):\n    __slots__ = []\n    def match(self, version):\n        return False\n    def __hash__(self):\n        return hash((Never,))\n    def __eq__(self, other):\n        return isinstance(other, self.__class__)\n    def __and__(self, other):\n        return self",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Always",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class Always(Matcher):\n    __slots__ = []\n    def match(self, version):\n        return True\n    def __hash__(self):\n        return hash((Always,))\n    def __eq__(self, other):\n        return isinstance(other, self.__class__)\n    def __and__(self, other):\n        return other",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Range",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class Range(Matcher):\n    OP_EQ = '=='\n    OP_GT = '>'\n    OP_GTE = '>='\n    OP_LT = '<'\n    OP_LTE = '<='\n    OP_NEQ = '!='\n    # <1.2.3 matches 1.2.3-a1\n    PRERELEASE_ALWAYS = 'always'\n    # <1.2.3 does not match 1.2.3-a1",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "SimpleSpec",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class SimpleSpec(BaseSpec):\n    SYNTAX = 'simple'\n    @classmethod\n    def _parse_to_clause(cls, expression):\n        return cls.Parser.parse(expression)\n    class Parser:\n        NUMBER = r'\\*|0|[1-9][0-9]*'\n        NAIVE_SPEC = re.compile(r\"\"\"^\n            (?P<op><|<=||=|==|>=|>|!=|\\^|~|~=)\n            (?P<major>{nb})(?:\\.(?P<minor>{nb})(?:\\.(?P<patch>{nb}))?)?",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "LegacySpec",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class LegacySpec(SimpleSpec):\n    def __init__(self, *expressions):\n        warnings.warn(\n            \"The Spec() class will be removed in 3.1; use SimpleSpec() instead.\",\n            PendingDeprecationWarning,\n            stacklevel=2,\n        )\n        if len(expressions) > 1:\n            warnings.warn(\n                \"Passing 2+ arguments to SimpleSpec will be removed in 3.0; concatenate them with ',' instead.\",",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "NpmSpec",
        "kind": 6,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "class NpmSpec(BaseSpec):\n    SYNTAX = 'npm'\n    @classmethod\n    def _parse_to_clause(cls, expression):\n        return cls.Parser.parse(expression)\n    class Parser:\n        JOINER = '||'\n        HYPHEN = ' - '\n        NUMBER = r'x|X|\\*|0|[1-9][0-9]*'\n        PART = r'[a-zA-Z0-9.-]*'",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "compare",
        "kind": 2,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "def compare(v1, v2):\n    return Version(v1).__cmp__(Version(v2))\ndef match(spec, version):\n    return Spec(spec).match(Version(version))\ndef validate(version_string):\n    \"\"\"Validates a version string againt the SemVer specification.\"\"\"\n    try:\n        Version.parse(version_string)\n        return True\n    except ValueError:",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "match",
        "kind": 2,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "def match(spec, version):\n    return Spec(spec).match(Version(version))\ndef validate(version_string):\n    \"\"\"Validates a version string againt the SemVer specification.\"\"\"\n    try:\n        Version.parse(version_string)\n        return True\n    except ValueError:\n        return False\nDEFAULT_SYNTAX = 'simple'",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "validate",
        "kind": 2,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "def validate(version_string):\n    \"\"\"Validates a version string againt the SemVer specification.\"\"\"\n    try:\n        Version.parse(version_string)\n        return True\n    except ValueError:\n        return False\nDEFAULT_SYNTAX = 'simple'\nclass BaseSpec(object):\n    \"\"\"A specification of compatible versions.",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SYNTAX",
        "kind": 5,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "DEFAULT_SYNTAX = 'simple'\nclass BaseSpec(object):\n    \"\"\"A specification of compatible versions.\n    Usage:\n    >>> Spec('>=1.0.0', syntax='npm')\n    A version matches a specification if it matches any\n    of the clauses of that specification.\n    Internally, a Spec is AnyOf(\n        AllOf(Matcher, Matcher, Matcher),\n        AllOf(...),",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "Spec",
        "kind": 5,
        "importPath": "dbus-serialbattery.semantic_version",
        "description": "dbus-serialbattery.semantic_version",
        "peekOfCode": "Spec = LegacySpec\n@BaseSpec.register_syntax\nclass NpmSpec(BaseSpec):\n    SYNTAX = 'npm'\n    @classmethod\n    def _parse_to_clause(cls, expression):\n        return cls.Parser.parse(expression)\n    class Parser:\n        JOINER = '||'\n        HYPHEN = ' - '",
        "detail": "dbus-serialbattery.semantic_version",
        "documentation": {}
    },
    {
        "label": "DbusHelper",
        "kind": 6,
        "importPath": "dbus-serialbattery.standalone_helper",
        "description": "dbus-serialbattery.standalone_helper",
        "peekOfCode": "class DbusHelper:\n    \"\"\"\n    This class is used to handle all the BMS communication. For easier comparision it still named dbushelper\n    \"\"\"\n    EMPTY_DICT = {}\n    def __init__(self, battery, bms_address=None):\n        self.battery = battery\n        self.bms_address = bms_address\n        self.instance = 1\n        self.settings = None",
        "detail": "dbus-serialbattery.standalone_helper",
        "documentation": {}
    },
    {
        "label": "standalone_serialbattery",
        "kind": 6,
        "importPath": "dbus-serialbattery.standalone_serialbattery",
        "description": "dbus-serialbattery.standalone_serialbattery",
        "peekOfCode": "class standalone_serialbattery:\n    def init_bms_types(self):\n        self.supported_bms_types = supported_bms_types\n        self.expected_bms_types = [battery_type for battery_type in self.supported_bms_types if battery_type[\"bms\"].__name__ in BMS_TYPE or len(BMS_TYPE) == 0]\n    def __init__(self, devpath, driverOption, devadr, loglevel):\n        # init with default\n        self.init_bms_types()\n        self.devpath = \"/dev/ttyUSB0\"  # just try if is is the common devpath\n        self.loglevel = 20  # just use info as default\n        self.driveroption = driverOption",
        "detail": "dbus-serialbattery.standalone_serialbattery",
        "documentation": {}
    },
    {
        "label": "supported_bms_types",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery",
        "description": "dbus-serialbattery.standalone_serialbattery",
        "peekOfCode": "supported_bms_types = [\n    {\"bms\": Daly, \"baud\": 9600, \"address\": b\"\\x40\"},\n    {\"bms\": Daly, \"baud\": 9600, \"address\": b\"\\x80\"},\n    {\"bms\": Daren485, \"baud\": 19200, \"address\": b\"\\x01\"},\n    {\"bms\": Ecs, \"baud\": 19200},\n    {\"bms\": EG4_Lifepower, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": EG4_LL, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": Felicity, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": HeltecModbus, \"baud\": 9600, \"address\": b\"\\x01\"},\n    {\"bms\": HLPdataBMS4S, \"baud\": 9600},",
        "detail": "dbus-serialbattery.standalone_serialbattery",
        "documentation": {}
    },
    {
        "label": "on_exit",
        "kind": 2,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "def on_exit():\n    print(\"CLEAN UP ...\")\n    sasb.bms_close()\ndef handle_exit(signum, frame):\n    sys.exit(0)\n# ### Main\natexit.register(on_exit)\nsignal.signal(signal.SIGTERM, handle_exit)\nsignal.signal(signal.SIGINT, handle_exit)\nmylogs = logging.getLogger(\"UNIBMSTEST\")",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "handle_exit",
        "kind": 2,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "def handle_exit(signum, frame):\n    sys.exit(0)\n# ### Main\natexit.register(on_exit)\nsignal.signal(signal.SIGTERM, handle_exit)\nsignal.signal(signal.SIGINT, handle_exit)\nmylogs = logging.getLogger(\"UNIBMSTEST\")\nmylogs.setLevel(LOGLEVEL)\nif logtofile == 1:\n    file = logging.FileHandler(logpath, mode=\"a\")",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "DEVPATH",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "DEVPATH = \"/dev/ttyUSB0\"\nUSEDIDADR = 1\n# Enter Loglevel 0,10,20,30,40,50\n# CRITICAL   50\n# ERROR      40\n# WARNING    30\n# INFO       20\n# DEBUG      10\n# NOTSET      0\nLOGLEVEL = 20",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "USEDIDADR",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "USEDIDADR = 1\n# Enter Loglevel 0,10,20,30,40,50\n# CRITICAL   50\n# ERROR      40\n# WARNING    30\n# INFO       20\n# DEBUG      10\n# NOTSET      0\nLOGLEVEL = 20\nlogtofile = 0",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "LOGLEVEL",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "LOGLEVEL = 20\nlogtofile = 0\nlogtoconsole = 1\nlogpath = \"bmslog.log\"\n##################################################################\n##################################################################\ndef on_exit():\n    print(\"CLEAN UP ...\")\n    sasb.bms_close()\ndef handle_exit(signum, frame):",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "logtofile",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "logtofile = 0\nlogtoconsole = 1\nlogpath = \"bmslog.log\"\n##################################################################\n##################################################################\ndef on_exit():\n    print(\"CLEAN UP ...\")\n    sasb.bms_close()\ndef handle_exit(signum, frame):\n    sys.exit(0)",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "logtoconsole",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "logtoconsole = 1\nlogpath = \"bmslog.log\"\n##################################################################\n##################################################################\ndef on_exit():\n    print(\"CLEAN UP ...\")\n    sasb.bms_close()\ndef handle_exit(signum, frame):\n    sys.exit(0)\n# ### Main",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "logpath",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "logpath = \"bmslog.log\"\n##################################################################\n##################################################################\ndef on_exit():\n    print(\"CLEAN UP ...\")\n    sasb.bms_close()\ndef handle_exit(signum, frame):\n    sys.exit(0)\n# ### Main\natexit.register(on_exit)",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "mylogs",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "mylogs = logging.getLogger(\"UNIBMSTEST\")\nmylogs.setLevel(LOGLEVEL)\nif logtofile == 1:\n    file = logging.FileHandler(logpath, mode=\"a\")\n    file.setLevel(LOGLEVEL)\n    fileformat = logging.Formatter(\"%(asctime)s:%(module)s:%(levelname)s:%(message)s\", datefmt=\"%H:%M:%S\")\n    file.setFormatter(fileformat)\n    mylogs.addHandler(file)\nif logtoconsole == 1:\n    stream = logging.StreamHandler()",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "sasb",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "sasb = standalone_serialbattery(DEVPATH, 0, \"\", LOGLEVEL)\nsasb.bms_open()\nsleep(0.5)\ntime1 = datetime.datetime.now()\nST = sasb.bms_read()\nprint(\"Runtime: \" + str((datetime.datetime.now() - time1).total_seconds()))\ni = 0\nprint(\"Cellcount: \" + str(sasb.cell_count))\nfor i in range(sasb.cell_count):\n    print(\"CellVolt\" + str(i) + \": \" + str(sasb.cells[i] / 1000))",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "time1",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "time1 = datetime.datetime.now()\nST = sasb.bms_read()\nprint(\"Runtime: \" + str((datetime.datetime.now() - time1).total_seconds()))\ni = 0\nprint(\"Cellcount: \" + str(sasb.cell_count))\nfor i in range(sasb.cell_count):\n    print(\"CellVolt\" + str(i) + \": \" + str(sasb.cells[i] / 1000))\nprint(\"Temperature_Fet : \" + str(sasb.temperature_fet))\nprint(\"Temperature_1   : \" + str(sasb.temperature_1))\nprint(\"temperature_2   : \" + str(sasb.temperature_2))",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "ST",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "ST = sasb.bms_read()\nprint(\"Runtime: \" + str((datetime.datetime.now() - time1).total_seconds()))\ni = 0\nprint(\"Cellcount: \" + str(sasb.cell_count))\nfor i in range(sasb.cell_count):\n    print(\"CellVolt\" + str(i) + \": \" + str(sasb.cells[i] / 1000))\nprint(\"Temperature_Fet : \" + str(sasb.temperature_fet))\nprint(\"Temperature_1   : \" + str(sasb.temperature_1))\nprint(\"temperature_2   : \" + str(sasb.temperature_2))\nprint(\"BatVolt         : \" + str(sasb.voltage / 100))",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "dbus-serialbattery.standalone_serialbattery_test",
        "description": "dbus-serialbattery.standalone_serialbattery_test",
        "peekOfCode": "i = 0\nprint(\"Cellcount: \" + str(sasb.cell_count))\nfor i in range(sasb.cell_count):\n    print(\"CellVolt\" + str(i) + \": \" + str(sasb.cells[i] / 1000))\nprint(\"Temperature_Fet : \" + str(sasb.temperature_fet))\nprint(\"Temperature_1   : \" + str(sasb.temperature_1))\nprint(\"temperature_2   : \" + str(sasb.temperature_2))\nprint(\"BatVolt         : \" + str(sasb.voltage / 100))\nprint(\"Current         : \" + str(sasb.act_current / 100))\nprint(\"SOC             : \" + str(sasb.soc))",
        "detail": "dbus-serialbattery.standalone_serialbattery_test",
        "documentation": {}
    },
    {
        "label": "get_bool_from_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def get_bool_from_config(group: str, option: str) -> bool:\n    \"\"\"\n    Get a boolean value from the config file.\n    :param group: Group in the config file\n    :param option: Option in the config file\n    :return: Boolean value\n    \"\"\"\n    return config[group].get(option, \"False\").lower() == \"true\"\ndef get_float_from_config(group: str, option: str, default_value: float = 0) -> float:\n    \"\"\"",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "get_float_from_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def get_float_from_config(group: str, option: str, default_value: float = 0) -> float:\n    \"\"\"\n    Get a float value from the config file.\n    :param group: Group in the config file\n    :param option: Option in the config file\n    :return: Float value\n    \"\"\"\n    value = config[group].get(option, default_value)\n    if value == \"\":\n        return default_value",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "get_int_from_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def get_int_from_config(group: str, option: str, default_value: int = 0) -> int:\n    \"\"\"\n    Get an integer value from the config file.\n    :param group: Group in the config file\n    :param option: Option in the config file\n    :return: Integer value\n    \"\"\"\n    value = config[group].get(option, default_value)\n    if value == \"\":\n        return default_value",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "get_list_from_config",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def get_list_from_config(group: str, option: str, mapper: Callable[[Any], Any] = lambda v: v) -> List[Any]:\n    \"\"\"\n    Get a string with comma-separated values from the config file and return a list of values.\n    :param group: Group in the config file\n    :param option: Option in the config file\n    :param mapper: Function to map the values to the correct type\n    :return: List of values\n    \"\"\"\n    try:\n        raw_list = config[group].get(option).split(\",\")",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "check_config_issue",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def check_config_issue(condition: bool, message: str):\n    \"\"\"\n    Check a condition and append a message to the errors_in_config list if the condition is True.\n    :param condition: The condition to check\n    :param message: The message to append if the condition is True\n    \"\"\"\n    if condition:\n        errors_in_config.append(f\"**CONFIG ISSUE**: {message}\")\n# SAVE CONFIG VALUES to constants\n# --------- Battery Current Limits ---------",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "constrain",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def constrain(val: float, min_val: float, max_val: float) -> float:\n    \"\"\"\n    Constrain a value between a minimum and maximum value.\n    :param val: Value to constrain\n    :param min_val: Minimum value\n    :param max_val: Maximum value\n    :return: Constrained value\n    \"\"\"\n    if min_val > max_val:\n        min_val, max_val = max_val, min_val",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "map_range",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def map_range(in_value: float, in_min: float, in_max: float, out_min: float, out_max: float) -> float:\n    \"\"\"\n    Map a value from one range to another.\n    :param in_value: Input value\n    :param in_min: Minimum value of the input range\n    :param in_max: Maximum value of the input range\n    :param out_min: Minimum value of the output range\n    :param out_max: Maximum value of the output range\n    :return: Mapped value\n    \"\"\"",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "map_range_constrain",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def map_range_constrain(in_value: float, in_min: float, in_max: float, out_min: float, out_max: float) -> float:\n    \"\"\"\n    Map a value from one range to another and constrain it between the output range.\n    :param in_value: Input value\n    :param in_min: Minimum value of the input range\n    :param in_max: Maximum value of the input range\n    :param out_min: Minimum value of the output range\n    :param out_max: Maximum value of the output range\n    :return: Mapped and constrained value\n    \"\"\"",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "calc_linear_relationship",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def calc_linear_relationship(in_value: float, in_array: List[float], out_array: List[float]) -> float:\n    \"\"\"\n    Calculate a linear relationship between two arrays.\n    :param in_value: Input value\n    :param in_array: Input array\n    :param out_array: Output array\n    :return: Calculated value\n    \"\"\"\n    # Change compare-direction in array\n    if in_array[0] > in_array[-1]:",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "calc_step_relationship",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def calc_step_relationship(in_value: float, in_array: List[float], out_array: List[float], return_lower: bool) -> float:\n    \"\"\"\n    Calculate a step relationship between two arrays.\n    :param in_value: Input value\n    :param in_array: Input array\n    :param out_array: Output array\n    :param return_lower: Return lower value if True, else return higher value\n    :return: Calculated value\n    \"\"\"\n    # Change compare-direction in array",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "is_bit_set",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def is_bit_set(value: Any) -> bool:\n    \"\"\"\n    Check if a bit is set high or low.\n    :param value: Value to check\n    :return: True if bit is set, False if not\n    \"\"\"\n    return value != ZERO_CHAR\ndef kelvin_to_celsius(temperature: float) -> float:\n    \"\"\"\n    Convert Kelvin to Celsius.",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "kelvin_to_celsius",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def kelvin_to_celsius(temperature: float) -> float:\n    \"\"\"\n    Convert Kelvin to Celsius.\n    :param temperature: Temperature in Kelvin\n    :return: Temperature in Celsius\n    \"\"\"\n    return temperature - 273.15\ndef bytearray_to_string(data: bytearray) -> str:\n    \"\"\"\n    Convert a bytearray to a string.",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "bytearray_to_string",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def bytearray_to_string(data: bytearray) -> str:\n    \"\"\"\n    Convert a bytearray to a string.\n    :param data: Data to convert\n    :return: Converted string\n    \"\"\"\n    return \"\".join(f\"\\\\x{byte:02x}\" for byte in data)\ndef open_serial_port(port: str, baud: int) -> Union[serial.Serial, None]:\n    \"\"\"\n    Open a serial port.",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "open_serial_port",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def open_serial_port(port: str, baud: int) -> Union[serial.Serial, None]:\n    \"\"\"\n    Open a serial port.\n    :param port: Serial port\n    :param baud: Baud rate\n    :return: Opened serial port or None if failed\n    \"\"\"\n    tries = 3\n    while tries > 0:\n        try:",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "read_serialport_data",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def read_serialport_data(\n    ser: serial.Serial,\n    command: bytearray,\n    length_pos: int,\n    length_check: int,\n    length_fixed: Union[int, None] = None,\n    length_size: str = \"B\",\n) -> bytearray:\n    \"\"\"\n    Read data from a serial port",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "read_serial_data",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def read_serial_data(\n    command: any,\n    port: str,\n    baud: int,\n    length_pos: int,\n    length_check: int,\n    length_fixed: Union[int, None] = None,\n    length_size: str = \"B\",\n) -> bytearray:\n    \"\"\"",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "validate_config_values",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def validate_config_values() -> bool:\n    \"\"\"\n    Validate the config values and log any issues.\n    Has to be called in a function, otherwise the error messages are not instantly visible.\n    :return: True if there are no errors else False\n    \"\"\"\n    # loop through all errors and log them\n    for error in errors_in_config:\n        logger.error(error)\n    # return True if there are no errors",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "publish_config_variables",
        "kind": 2,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "def publish_config_variables(dbusservice) -> None:\n    \"\"\"\n    Publish the config variables to the dbus path \"/Info/Config/\"\n    :param dbusservice: DBus service\n    \"\"\"\n    for variable, value in locals_copy.items():\n        if variable.startswith(\"__\"):\n            continue\n        if isinstance(value, float) or isinstance(value, int) or isinstance(value, str) or isinstance(value, List):\n            dbusservice.add_path(f\"/Info/Config/{variable}\", value)",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "logger = logging.getLogger(\"SerialBattery\")\nPATH_CONFIG_DEFAULT: str = \"config.default.ini\"\nPATH_CONFIG_USER: str = \"config.ini\"\nconfig = configparser.ConfigParser()\npath = Path(__file__).parents[0]\ndefault_config_file_path = str(path.joinpath(PATH_CONFIG_DEFAULT).absolute())\ncustom_config_file_path = str(path.joinpath(PATH_CONFIG_USER).absolute())\nconfig.read([default_config_file_path, custom_config_file_path])\n# Map config logging levels to logging module levels\nLOGGING_LEVELS = {",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "config = configparser.ConfigParser()\npath = Path(__file__).parents[0]\ndefault_config_file_path = str(path.joinpath(PATH_CONFIG_DEFAULT).absolute())\ncustom_config_file_path = str(path.joinpath(PATH_CONFIG_USER).absolute())\nconfig.read([default_config_file_path, custom_config_file_path])\n# Map config logging levels to logging module levels\nLOGGING_LEVELS = {\n    \"ERROR\": logging.ERROR,\n    \"WARNING\": logging.WARNING,\n    \"INFO\": logging.INFO,",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "path = Path(__file__).parents[0]\ndefault_config_file_path = str(path.joinpath(PATH_CONFIG_DEFAULT).absolute())\ncustom_config_file_path = str(path.joinpath(PATH_CONFIG_USER).absolute())\nconfig.read([default_config_file_path, custom_config_file_path])\n# Map config logging levels to logging module levels\nLOGGING_LEVELS = {\n    \"ERROR\": logging.ERROR,\n    \"WARNING\": logging.WARNING,\n    \"INFO\": logging.INFO,\n    \"DEBUG\": logging.DEBUG,",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "default_config_file_path",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "default_config_file_path = str(path.joinpath(PATH_CONFIG_DEFAULT).absolute())\ncustom_config_file_path = str(path.joinpath(PATH_CONFIG_USER).absolute())\nconfig.read([default_config_file_path, custom_config_file_path])\n# Map config logging levels to logging module levels\nLOGGING_LEVELS = {\n    \"ERROR\": logging.ERROR,\n    \"WARNING\": logging.WARNING,\n    \"INFO\": logging.INFO,\n    \"DEBUG\": logging.DEBUG,\n}",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "custom_config_file_path",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "custom_config_file_path = str(path.joinpath(PATH_CONFIG_USER).absolute())\nconfig.read([default_config_file_path, custom_config_file_path])\n# Map config logging levels to logging module levels\nLOGGING_LEVELS = {\n    \"ERROR\": logging.ERROR,\n    \"WARNING\": logging.WARNING,\n    \"INFO\": logging.INFO,\n    \"DEBUG\": logging.DEBUG,\n}\n# Set logging level from config file",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "LOGGING_LEVELS",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "LOGGING_LEVELS = {\n    \"ERROR\": logging.ERROR,\n    \"WARNING\": logging.WARNING,\n    \"INFO\": logging.INFO,\n    \"DEBUG\": logging.DEBUG,\n}\n# Set logging level from config file\nlogger.setLevel(LOGGING_LEVELS.get(config[\"DEFAULT\"].get(\"LOGGING\").upper()))\n# List to store config errors\n# This is needed else the errors are not instantly visible",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "errors_in_config",
        "kind": 5,
        "importPath": "dbus-serialbattery.utils",
        "description": "dbus-serialbattery.utils",
        "peekOfCode": "errors_in_config = []\n# --------- Helper Functions ---------\ndef get_bool_from_config(group: str, option: str) -> bool:\n    \"\"\"\n    Get a boolean value from the config file.\n    :param group: Group in the config file\n    :param option: Option in the config file\n    :return: Boolean value\n    \"\"\"\n    return config[group].get(option, \"False\").lower() == \"true\"",
        "detail": "dbus-serialbattery.utils",
        "documentation": {}
    },
    {
        "label": "Syncron_Ble",
        "kind": 6,
        "importPath": "dbus-serialbattery.utils_ble",
        "description": "dbus-serialbattery.utils_ble",
        "peekOfCode": "class Syncron_Ble:\n    ble_async_thread_ready = threading.Event()\n    ble_connection_ready = threading.Event()\n    ble_async_thread_event_loop = False\n    client = False\n    address = None\n    response_event = False\n    response_data = False\n    main_thread = False\n    connected = False",
        "detail": "dbus-serialbattery.utils_ble",
        "documentation": {}
    },
    {
        "label": "CanTransportInterface",
        "kind": 6,
        "importPath": "dbus-serialbattery.utils_can",
        "description": "dbus-serialbattery.utils_can",
        "peekOfCode": "class CanTransportInterface:\n    \"\"\"\n    Class to manage the CAN transport interface\n    \"\"\"\n    can_message_cache_callback: callable = None\n    can_bus = None\nclass CanReceiverThread(threading.Thread):\n    \"\"\"\n    Class to receive CAN messages on a separate thread\n    \"\"\"",
        "detail": "dbus-serialbattery.utils_can",
        "documentation": {}
    },
    {
        "label": "CanReceiverThread",
        "kind": 6,
        "importPath": "dbus-serialbattery.utils_can",
        "description": "dbus-serialbattery.utils_can",
        "peekOfCode": "class CanReceiverThread(threading.Thread):\n    \"\"\"\n    Class to receive CAN messages on a separate thread\n    \"\"\"\n    _instances = {}\n    def __init__(self, channel, bustype):\n        # singleton for tuple\n        if (channel, bustype) in CanReceiverThread._instances:\n            raise Exception(\"Instance already exists for this configuration!\")\n        super().__init__(name=f\"CanReceiverThread-{channel}\")",
        "detail": "dbus-serialbattery.utils_can",
        "documentation": {}
    },
    {
        "label": "Lcd",
        "kind": 6,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "class Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)\n        self._backlight_on = True\n        self.pwm_backlight = os.path.exists(PWM_BACKLIGHT)\n        if self.pwm_backlight:\n            self.write_attr(\"auto_brightness\", 0)\n            self.on_pwm(True)\n            self.on_gpio(True)",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "DebugLcd",
        "kind": 6,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "class DebugLcd(Lcd):\n    def __init__(self):\n        pass\n    def display_string(self, string, line):\n        if line == 1:\n            print(\"|\" + \"-\" * 16 + \"|\")\n        print(\"|\" + string + \"|\")\n    def clear(self):\n        pass\n    @property",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "LCD_CLEARDISPLAY",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "LCD_CLEARDISPLAY = \"\\014\"\nLCD_RETURNHOME = \"\\033[H\"\nLCD_XY = \"\\033[Lx%dy%d;\"\nLCD_BACKLIGHT_ON = \"\\033[L+\"\nLCD_BACKLIGHT_OFF = \"\\033[L-\"\nPWM_BACKLIGHT = \"/sys/class/backlight/gxdisp-0-0051\"\nPWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "LCD_RETURNHOME",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "LCD_RETURNHOME = \"\\033[H\"\nLCD_XY = \"\\033[Lx%dy%d;\"\nLCD_BACKLIGHT_ON = \"\\033[L+\"\nLCD_BACKLIGHT_OFF = \"\\033[L-\"\nPWM_BACKLIGHT = \"/sys/class/backlight/gxdisp-0-0051\"\nPWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "LCD_XY",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "LCD_XY = \"\\033[Lx%dy%d;\"\nLCD_BACKLIGHT_ON = \"\\033[L+\"\nLCD_BACKLIGHT_OFF = \"\\033[L-\"\nPWM_BACKLIGHT = \"/sys/class/backlight/gxdisp-0-0051\"\nPWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "LCD_BACKLIGHT_ON",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "LCD_BACKLIGHT_ON = \"\\033[L+\"\nLCD_BACKLIGHT_OFF = \"\\033[L-\"\nPWM_BACKLIGHT = \"/sys/class/backlight/gxdisp-0-0051\"\nPWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "LCD_BACKLIGHT_OFF",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "LCD_BACKLIGHT_OFF = \"\\033[L-\"\nPWM_BACKLIGHT = \"/sys/class/backlight/gxdisp-0-0051\"\nPWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)\n        self._backlight_on = True",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "PWM_BACKLIGHT",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "PWM_BACKLIGHT = \"/sys/class/backlight/gxdisp-0-0051\"\nPWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)\n        self._backlight_on = True\n        self.pwm_backlight = os.path.exists(PWM_BACKLIGHT)",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "PWM_BRIGHTNESS_ON",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "PWM_BRIGHTNESS_ON = 15\nPWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)\n        self._backlight_on = True\n        self.pwm_backlight = os.path.exists(PWM_BACKLIGHT)\n        if self.pwm_backlight:",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "PWM_BRIGHTNESS_OFF",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "PWM_BRIGHTNESS_OFF = 1\nADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)\n        self._backlight_on = True\n        self.pwm_backlight = os.path.exists(PWM_BACKLIGHT)\n        if self.pwm_backlight:\n            self.write_attr(\"auto_brightness\", 0)",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "ADC_DAYLIGHT",
        "kind": 5,
        "importPath": "rc.lcddriver",
        "description": "rc.lcddriver",
        "peekOfCode": "ADC_DAYLIGHT = 200\nclass Lcd(object):\n    # initializes objects and lcd\n    def __init__(self, lcd_dev):\n        self.lcd = os.open(lcd_dev, os.O_WRONLY)\n        self._backlight_on = True\n        self.pwm_backlight = os.path.exists(PWM_BACKLIGHT)\n        if self.pwm_backlight:\n            self.write_attr(\"auto_brightness\", 0)\n            self.on_pwm(True)",
        "detail": "rc.lcddriver",
        "documentation": {}
    },
    {
        "label": "beep",
        "kind": 2,
        "importPath": "rc.notify",
        "description": "rc.notify",
        "peekOfCode": "def beep(console_fd, frequency=440):\n    if os.path.exists(\"/sys/class/gpio/gpio35/value\") and os.uname().nodename == \"ccgx\" and frequency > 0:\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"1\")\n        time.sleep(0.2)\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"0\")\n    else:\n        period = 0 if frequency == 0 else CLOCK_TICK_RATE // frequency\n        ioctl(console_fd, KIOCSOUND, period)",
        "detail": "rc.notify",
        "documentation": {}
    },
    {
        "label": "notify",
        "kind": 2,
        "importPath": "rc.notify",
        "description": "rc.notify",
        "peekOfCode": "def notify(lcd, message, no_beep=False):\n    if lcd:\n        if len(message) > 16:\n            # split_index = message.rfind(\" \", 0, 16)\n            # if split_index == -1:\n            #     split_index = 16\n            split_index = 16\n            part1 = message[:split_index].strip()\n            part2 = message[split_index:].strip()\n            lcd.display_string(part1, 1)",
        "detail": "rc.notify",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "rc.notify",
        "description": "rc.notify",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--no-beep\", help=\"Do not beep, sets count to 1\", default=False, action=\"store_true\")\n    parser.add_argument(\"--count\", help=\"Number of notifications (beeps/blinks) to do\", default=3)\n    parser.add_argument(\"--lcd\", help=\"Path to lcd device, default /dev/lcd\", default=\"/dev/lcd\")\n    parser.add_argument(\"--message\", help=\"Message to show on the lcd, default Victron Energy\", default=\"Victron Energy\")\n    parser.add_argument(\"--version\", help=\"Print the version to stdout\", default=False, action=\"store_true\")\n    args = parser.parse_args()\n    if args.version:\n        print(\"{} v{}\".format(basename(sys.argv[0]), VERSION))",
        "detail": "rc.notify",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "rc.notify",
        "description": "rc.notify",
        "peekOfCode": "VERSION = 0.1\nCLOCK_TICK_RATE = 1193180\nKIOCSOUND = 0x4B2F\ndef beep(console_fd, frequency=440):\n    if os.path.exists(\"/sys/class/gpio/gpio35/value\") and os.uname().nodename == \"ccgx\" and frequency > 0:\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"1\")\n        time.sleep(0.2)\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"0\")",
        "detail": "rc.notify",
        "documentation": {}
    },
    {
        "label": "CLOCK_TICK_RATE",
        "kind": 5,
        "importPath": "rc.notify",
        "description": "rc.notify",
        "peekOfCode": "CLOCK_TICK_RATE = 1193180\nKIOCSOUND = 0x4B2F\ndef beep(console_fd, frequency=440):\n    if os.path.exists(\"/sys/class/gpio/gpio35/value\") and os.uname().nodename == \"ccgx\" and frequency > 0:\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"1\")\n        time.sleep(0.2)\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"0\")\n    else:",
        "detail": "rc.notify",
        "documentation": {}
    },
    {
        "label": "KIOCSOUND",
        "kind": 5,
        "importPath": "rc.notify",
        "description": "rc.notify",
        "peekOfCode": "KIOCSOUND = 0x4B2F\ndef beep(console_fd, frequency=440):\n    if os.path.exists(\"/sys/class/gpio/gpio35/value\") and os.uname().nodename == \"ccgx\" and frequency > 0:\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"1\")\n        time.sleep(0.2)\n        with open(\"/sys/class/gpio/gpio35/value\", \"w\") as beep_file:\n            beep_file.write(\"0\")\n    else:\n        period = 0 if frequency == 0 else CLOCK_TICK_RATE // frequency",
        "detail": "rc.notify",
        "documentation": {}
    },
    {
        "label": "install_package",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def install_package(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\ndef fetch_releases():\n    url = \"https://api.github.com/repos/Arvernus/iRock-Modbus/releases\"\n    logger.info(f\"Fetching releases from {url}\")\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\ndef fetch_validate_yaml():\n    url = \"https://raw.githubusercontent.com/Arvernus/iRock-Modbus/main/validate_yaml.py\"",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "fetch_releases",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def fetch_releases():\n    url = \"https://api.github.com/repos/Arvernus/iRock-Modbus/releases\"\n    logger.info(f\"Fetching releases from {url}\")\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\ndef fetch_validate_yaml():\n    url = \"https://raw.githubusercontent.com/Arvernus/iRock-Modbus/main/validate_yaml.py\"\n    logger.info(f\"Fetching validate_yaml.py from {url}\")\n    response = requests.get(url)",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "fetch_validate_yaml",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def fetch_validate_yaml():\n    url = \"https://raw.githubusercontent.com/Arvernus/iRock-Modbus/main/validate_yaml.py\"\n    logger.info(f\"Fetching validate_yaml.py from {url}\")\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.content\ndef load_validate_yaml_module(data):\n    spec = importlib.util.spec_from_loader(\"validate_yaml\", loader=None)\n    validate_yaml = importlib.util.module_from_spec(spec)\n    exec(data, validate_yaml.__dict__)",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "load_validate_yaml_module",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def load_validate_yaml_module(data):\n    spec = importlib.util.spec_from_loader(\"validate_yaml\", loader=None)\n    validate_yaml = importlib.util.module_from_spec(spec)\n    exec(data, validate_yaml.__dict__)\n    sys.modules[\"validate_yaml\"] = validate_yaml\n    return validate_yaml\ndef extract_file_from_zip(data, filename):\n    logger.info(f\"Extracting {filename} from ZIP\")\n    try:\n        with zipfile.ZipFile(io.BytesIO(data)) as z:",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "extract_file_from_zip",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def extract_file_from_zip(data, filename):\n    logger.info(f\"Extracting {filename} from ZIP\")\n    try:\n        with zipfile.ZipFile(io.BytesIO(data)) as z:\n            logger.info(\"ZIP file opened successfully\")\n            for file_name in z.namelist():\n                if file_name.endswith(filename):\n                    with z.open(file_name) as f:\n                        logger.info(f\"{filename} found in ZIP file\")\n                        return f.read()",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "process_release_data",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def process_release_data(release, validate_yaml) -> Tuple[dict, dict]:\n    logger.info(f\"Processing release: {release['tag_name']}\")\n    data_url = release['zipball_url']\n    logger.info(f\"Downloading data from {data_url}\")\n    data_response = requests.get(data_url)\n    data_response.raise_for_status()\n    data = data_response.content\n    data_yaml = extract_file_from_zip(data, 'data.yaml')\n    if data_yaml:\n        data_yaml = yaml.safe_load(data_yaml)",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "replace_constant",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def replace_constant(content: str, constant_name: str, new_data: List[dict]) -> str:\n    pattern = re.compile(rf\"{constant_name} = \\[.*?\\]\", re.DOTALL)\n    replacement = f\"{constant_name} = [\\n\"\n    for item in new_data:\n        replacement += f\"    {repr(item)},\\n\"\n    replacement += \"]\"\n    return pattern.sub(replacement, content)\ndef main():\n    logger.info(\"Starting process to fetch and process releases\")\n    try:",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "def main():\n    logger.info(\"Starting process to fetch and process releases\")\n    try:\n        import jsonschema\n    except ImportError:\n        logger.info(\"jsonschema not found, installing...\")\n        install_package(\"jsonschema\")\n    validate_yaml_data = fetch_validate_yaml()\n    validate_yaml = load_validate_yaml_module(validate_yaml_data)\n    releases = fetch_releases()",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "scripts.process_releases",
        "description": "scripts.process_releases",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef install_package(package):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\ndef fetch_releases():\n    url = \"https://api.github.com/repos/Arvernus/iRock-Modbus/releases\"\n    logger.info(f\"Fetching releases from {url}\")\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\ndef fetch_validate_yaml():",
        "detail": "scripts.process_releases",
        "documentation": {}
    },
    {
        "label": "DalyCanSimulator",
        "kind": 6,
        "importPath": "test.daly_can_simulator",
        "description": "test.daly_can_simulator",
        "peekOfCode": "class DalyCanSimulator:\n    def __init__(self, channel=\"vcan0\", bustype=\"socketcan\"):\n        \"\"\"\n        Initialize the simulator with a given CAN interface (defaults to vcan0).\n        \"\"\"\n        self.bus = can.interface.Bus(channel=channel, bustype=bustype)\n        print(f\"Initialized Daly CAN BMS Simulator on interface '{channel}'.\")\n        # Store any stateful information here if needed, e.g., changing SoC over time.\n        # If you want to simulate a different number of cells, adapt this to match your scenario.\n        self.simulated_soc = 75.0  # 75%",
        "detail": "test.daly_can_simulator",
        "documentation": {}
    },
    {
        "label": "REQUEST_BASE",
        "kind": 5,
        "importPath": "test.daly_can_simulator",
        "description": "test.daly_can_simulator",
        "peekOfCode": "REQUEST_BASE = 0x18900040  # insert id at byte 3\nRESPONSE_BASE = 0x18904000  # insert id at byte 4\n# Offsets/constants used in daly_can.py\nCURRENT_ZERO_CONSTANT = 30000\nTEMP_ZERO_CONSTANT = 40\nclass DalyCanSimulator:\n    def __init__(self, channel=\"vcan0\", bustype=\"socketcan\"):\n        \"\"\"\n        Initialize the simulator with a given CAN interface (defaults to vcan0).\n        \"\"\"",
        "detail": "test.daly_can_simulator",
        "documentation": {}
    },
    {
        "label": "RESPONSE_BASE",
        "kind": 5,
        "importPath": "test.daly_can_simulator",
        "description": "test.daly_can_simulator",
        "peekOfCode": "RESPONSE_BASE = 0x18904000  # insert id at byte 4\n# Offsets/constants used in daly_can.py\nCURRENT_ZERO_CONSTANT = 30000\nTEMP_ZERO_CONSTANT = 40\nclass DalyCanSimulator:\n    def __init__(self, channel=\"vcan0\", bustype=\"socketcan\"):\n        \"\"\"\n        Initialize the simulator with a given CAN interface (defaults to vcan0).\n        \"\"\"\n        self.bus = can.interface.Bus(channel=channel, bustype=bustype)",
        "detail": "test.daly_can_simulator",
        "documentation": {}
    },
    {
        "label": "CURRENT_ZERO_CONSTANT",
        "kind": 5,
        "importPath": "test.daly_can_simulator",
        "description": "test.daly_can_simulator",
        "peekOfCode": "CURRENT_ZERO_CONSTANT = 30000\nTEMP_ZERO_CONSTANT = 40\nclass DalyCanSimulator:\n    def __init__(self, channel=\"vcan0\", bustype=\"socketcan\"):\n        \"\"\"\n        Initialize the simulator with a given CAN interface (defaults to vcan0).\n        \"\"\"\n        self.bus = can.interface.Bus(channel=channel, bustype=bustype)\n        print(f\"Initialized Daly CAN BMS Simulator on interface '{channel}'.\")\n        # Store any stateful information here if needed, e.g., changing SoC over time.",
        "detail": "test.daly_can_simulator",
        "documentation": {}
    },
    {
        "label": "TEMP_ZERO_CONSTANT",
        "kind": 5,
        "importPath": "test.daly_can_simulator",
        "description": "test.daly_can_simulator",
        "peekOfCode": "TEMP_ZERO_CONSTANT = 40\nclass DalyCanSimulator:\n    def __init__(self, channel=\"vcan0\", bustype=\"socketcan\"):\n        \"\"\"\n        Initialize the simulator with a given CAN interface (defaults to vcan0).\n        \"\"\"\n        self.bus = can.interface.Bus(channel=channel, bustype=bustype)\n        print(f\"Initialized Daly CAN BMS Simulator on interface '{channel}'.\")\n        # Store any stateful information here if needed, e.g., changing SoC over time.\n        # If you want to simulate a different number of cells, adapt this to match your scenario.",
        "detail": "test.daly_can_simulator",
        "documentation": {}
    }
]